<#+
    public class DbSchema
    {
        private string _ConnectionName;
        private string _ConnectionString;
        private string _ProviderName;
        private DbSchemaProvider _Provider;
        private Dictionary<string, DataTable> Cache = new Dictionary<string, DataTable>();
        private ArrayList dictionaryTablesManyToMany = new ArrayList();

        #region ' Properties '

        public string ConnectionName
        {
            get { return _ConnectionName; }
        }

        public string ConnectionString
        {
            get { return _ConnectionString; }
        }

        public string ProviderName
        {
            get { return _ProviderName; }
        }

        #endregion

        #region ' Constractors '

        public DbSchema() :
            this("LocalSqlServer")
        { }

        public DbSchema(string ConnectionName) :
            this(ConnectionName, ConfigurationManager.ConnectionStrings[ConnectionName].ConnectionString, ConfigurationManager.ConnectionStrings[ConnectionName].ProviderName)
        { }

        public DbSchema(string ConnectionName, string ConnectionString, string ProviderName)
        {
            _ConnectionName = ConnectionName;
            _ConnectionString = ConnectionString;
            _ProviderName = ProviderName;
            _Provider = GetSchemaProvider(_ConnectionName, _ProviderName);
        }

        #endregion

        #region ' Methods '

        #region ' Tables and Views '

        private DataTable GetSchemaTables()
        {
            string CacheKey = "TablesSchema";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable tbl = _Provider.GetSchemaTables();

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTables()
        {
            string CacheKey = "Tables";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable schemaTables = GetSchemaTables();
            DataTable tbl = new DataTable("Tables");
            if (schemaTables.Rows.Count > 0)
            {
                string WhereClause = "TABLE_TYPE='TABLE' OR TABLE_TYPE='BASE TABLE'";
                tbl = schemaTables.Clone();
                foreach (DataRow tblRow in schemaTables.Select(WhereClause))
                {
                    tbl.ImportRow(tblRow);
                }
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTablesLogical()
        {
            string CacheKey = "TablesLogical";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DiscoverManyToManyTables();

            return GetTablesLogical();
        }

        public DataTable GetViews()
        {
            string CacheKey = "Views";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable schemaTables = GetSchemaTables();
            DataTable tbl = new DataTable("Views");
            if (schemaTables.Rows.Count > 0)
            {
                string WhereClause = "TABLE_TYPE='VIEW'";
                tbl = schemaTables.Clone();
                foreach (DataRow tblRow in schemaTables.Select(WhereClause))
                {
                    tbl.ImportRow(tblRow);
                }
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        #endregion

        #region ' Columns and Primary Keys '

        public DataTable GetTableColumns(string tableSchema, string tableName)
        {
            string CacheKey = "Columns:" + _Provider.QualifiedTableName(tableSchema, tableName);
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable tbl = _Provider.GetTableColumns(tableSchema, tableName);

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public string GetTablePrimaryKey(string tableSchema, string tableName)
        {
            DataTable tbl = GetTableColumns(tableSchema, tableName);
            string primarykey = "";
            foreach (DataRow columnRow in tbl.Rows)
            {
                bool isPrimaryKey = false;
                if (columnRow["IsKey"] != DBNull.Value)
                    isPrimaryKey = (bool)columnRow["IsKey"];

                if (isPrimaryKey)
                {
                    primarykey = columnRow["ColumnName"].ToString();
                    break;
                }
            }
            return primarykey;
        }

        public DataTable GetTablePrimaryKeys(string tableSchema, string tableName)
        {
            DataTable TableColumns = GetTableColumns(tableSchema, tableName);
            string WhereClause = "IsKey = true";
            DataTable tbl = TableColumns.Clone();
            foreach (DataRow primaryKeyRow in TableColumns.Select(WhereClause))
                tbl.ImportRow(primaryKeyRow);

            return tbl;
        }

        public DataTable GetTableFields(string tableSchema, string tableName)
        {
            //keys, one-to-many, many-to-one
            List<string> filteredcolumns = new List<string>();

            foreach (DataRow primarykey in GetTablePrimaryKeys(tableSchema, tableName).Rows)
            {
                string columnname = "'" + primarykey["ColumnName"].ToString() + "'";
                if (!filteredcolumns.Contains(columnname))
                    filteredcolumns.Add(columnname);
            }
            foreach (DataRow onetomanyrelation in GetTableOneToManyRelations(tableSchema, tableName).Rows)
            {
                string columnname = "'" + onetomanyrelation["PK_COLUMN_NAME"].ToString() + "'";
                if (!filteredcolumns.Contains(columnname))
                    filteredcolumns.Add(columnname);
            }
            foreach (DataRow manytoonerelation in GetTableManyToOneRelations(tableSchema, tableName).Rows)
            {
                string columnname = "'" + manytoonerelation["FK_COLUMN_NAME"].ToString() + "'";
                if (!filteredcolumns.Contains(columnname))
                    filteredcolumns.Add(columnname);
            }

            string WhereClause = "ColumnName NOT IN ( " + string.Join(", ", filteredcolumns.ToArray()) + " )";
            DataTable TableColumns = GetTableColumns(tableSchema, tableName);
            DataTable tbl = TableColumns.Clone();
            foreach (DataRow columnRow in TableColumns.Select(WhereClause))
            {
                tbl.ImportRow(columnRow);
            }

            return tbl;
        }

        #endregion

        #region ' Relations '

        private DataTable GetConstraints()
        {
            string CacheKey = "Constraints";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable tbl = _Provider.GetConstraints();

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTableManyToOneRelations(string tableSchema, string tableName)
        {
            string WhereClause;
            if (!string.IsNullOrEmpty(tableSchema))
                WhereClause = string.Format("FK_TABLE_SCHEMA='{0}' AND FK_TABLE_NAME='{1}'", tableSchema, tableName);
            else
                WhereClause = string.Format("FK_TABLE_NAME='{0}'", tableName);

            DataTable relations = GetConstraints();
            DataRow[] fks = (DataRow[])relations.Select(WhereClause);
            DataTable tbl = relations.Clone();
            foreach (DataRow fk in fks)
            {
                tbl.ImportRow(fk);
            }

            return tbl;
        }

        public DataTable GetTableOneToManyRelations(string tableSchema, string tableName)
        {
            string WhereClause;
            if (!string.IsNullOrEmpty(tableSchema))
                WhereClause = string.Format("PK_TABLE_SCHEMA='{0}' AND PK_TABLE_NAME='{1}'", tableSchema, tableName);
            else
                WhereClause = string.Format("PK_TABLE_NAME='{0}'", tableName);

            DataTable relations = GetConstraints();
            DataRow[] pks = (DataRow[])relations.Select(WhereClause);
            DataTable tbl = relations.Clone();
            foreach (DataRow pk in pks)
            {
                string FKTableSchema = null;
                string FKTablename = null;
                if (pk["FK_TABLE_SCHEMA"] != DBNull.Value)
                    FKTableSchema = pk["FK_TABLE_SCHEMA"].ToString();
                FKTablename = pk["FK_TABLE_NAME"].ToString();

                string tableNameHash = string.IsNullOrEmpty(FKTableSchema) ? FKTablename : FKTableSchema + "." + FKTablename;
                if (!dictionaryTablesManyToMany.Contains(tableNameHash))
                    tbl.ImportRow(pk);
            }

            return tbl;
        }

        public DataTable GetTablesManyToManyRelations()
        {
            string CacheKey = "TablesManyToManyRelations";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DiscoverManyToManyTables();

            return GetTablesManyToManyRelations();
        }

        private void DiscoverManyToManyTables()
        {
            DataTable schemaTables = GetTables();
            DataTable tblManyToMany = new DataTable("TablesManyToManyRelations");
            tblManyToMany = schemaTables.Clone();
            DataTable tblLogical = new DataTable("TablesLogical");
            tblLogical = schemaTables.Clone();

            dictionaryTablesManyToMany.Clear();
            foreach (DataRow tableRow in schemaTables.Rows)
            {
                string tableSchema = null;
                if (tableRow["TABLE_SCHEMA"] != DBNull.Value)
                    tableSchema = tableRow["TABLE_SCHEMA"].ToString();
                string tableName = tableRow["TABLE_NAME"].ToString();

                DataTable manyToOneRelations = GetTableManyToOneRelations(tableSchema, tableName);
                if (manyToOneRelations.Rows.Count == GetTableColumns(tableSchema, tableName).Rows.Count)
                {
                    dictionaryTablesManyToMany.Add(_Provider.QualifiedTableName(tableSchema, tableName));
                    tblManyToMany.ImportRow(tableRow);
                }
                else
                    tblLogical.ImportRow(tableRow);
            }

            Cache.Add("TablesManyToManyRelations", tblManyToMany);
            Cache.Add("TablesLogical", tblLogical);
        }

        #endregion

        #region ' Store Procedures '

        public DataTable GetProcedures()
        {
            string CacheKey = "Procedures";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable tbl = _Provider.GetProcedures();

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetProcedureParameters(string procedureSchema, string procedureName)
        {
            string CacheKey = "ProcedureParameters:" + (string.IsNullOrEmpty(procedureSchema) ? procedureName : procedureSchema + "." + procedureName);
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable tbl = _Provider.GetProcedureParameters(procedureSchema, procedureName);

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        #endregion

        #endregion

        #region ' Helpers '

        private DbSchemaProvider GetSchemaProvider(string connectionString, string providerName)
        {
            DbSchemaProvider dbProvider;
            switch (providerName.ToLower())
            {
                case "system.data.sqlserverce.3.5":
                case "system.data.sqlserverce":
                    dbProvider = new SqlServerCeSchemaProvider(connectionString, providerName);
                    break;

                //case "system.data.oledb":
                //    dbProvider = new OleDbSchemaProvider(connectionString, providerName);
                //    break;

                case "system.data.sqlclient":
                    dbProvider = new SqlServerSchemaProvider(connectionString, providerName);
                    break;

                case "mysql.data.mysqlclient":
                    dbProvider = new MySqlSchemaProvider(connectionString, providerName);
                    break;

                default:
                    throw new NotImplementedException("The provider '" + providerName + "' is not implemented!");

            }
            return dbProvider;
        }

        #endregion

    }

    interface IDbSchemaProvider
    {
        DataTable GetSchemaTables();
        DataTable GetTableColumns(string tableSchema, string tableName);
        DataTable GetConstraints();
        DataTable GetProcedures();
        DataTable GetProcedureParameters(string procedureSchema, string procedureName);
        DbType GetDbType(string providerDbType);
        string GetPropertyType(string SystemType);
        string GetPropertyType(string SystemType, bool IsNullable);
        string QualifiedTableName(string tableSchema, string tableName);
    }

    abstract public class DbSchemaProvider : IDbSchemaProvider
    {
        private string _ConnectionString;
        private string _ProviderName;

        protected string ProviderName
        {
            get { return _ProviderName; }
        }

        public DbSchemaProvider(string connectionstring, string providername)
        {
            _ConnectionString = connectionstring;
            _ProviderName = providername;
        }

        #region ' IDbProvider Members '

        virtual public DataTable GetSchemaTables()
        {
            DataTable tbl = new DataTable("SchemaTables");
            using (DbConnection _Connection = GetDBConnection())
            {
                tbl = _Connection.GetSchema("Tables");
            }

            return tbl;
        }

        virtual public DataTable GetTableColumns(string tableSchema, string tableName)
        {
            DataTable tbl = new DataTable();

            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = string.Format("SELECT * FROM {0}", QualifiedTableName(tableSchema, tableName));
                _Command.CommandType = CommandType.Text;
                tbl = _Command.ExecuteReader(CommandBehavior.KeyInfo).GetSchemaTable();
            }

            return tbl;
        }

        abstract public DataTable GetConstraints();

        virtual public string QualifiedTableName(string tableSchema, string tableName)
        {
            if (!string.IsNullOrEmpty(tableSchema))
                return string.Format("[{0}].[{1}]", tableSchema, tableName);
            else
                return string.Format("[{0}]", tableName);
        }

        virtual public DataTable GetProcedures()
        {
            DataTable tbl = new DataTable("Procedures");
            using (DbConnection _Connection = GetDBConnection())
            {
                tbl = _Connection.GetSchema("Procedures");
            }

            return tbl;
        }

        virtual public DataTable GetProcedureParameters(string procedureSchema, string procedureName)
        {
            DataTable tbl = new DataTable("ProcedureParameters");
            using (DbConnection _Connection = GetDBConnection())
            {
                string[] restrictions = new string[4] { null, procedureSchema, procedureName, null };
                tbl = _Connection.GetSchema("ProcedureParameters", restrictions);
            }
            return tbl;
        }

        virtual public string GetPropertyType(string SystemType)
        {
            return GetPropertyType(SystemType, false);
        }

        virtual public string GetPropertyType(string SystemType, bool IsNullable)
        {
            string classType = string.Empty;
            string[] systemType = SystemType.Split('.');
            switch (systemType[1])
            {
                case "String":
                    classType = "string";
                    break;

                case "SByte":
                case "Boolean":
                    classType = IsNullable ? "bool?" : "bool";
                    break;

                case "Byte":
                    classType = IsNullable ? "byte?" : "byte";
                    break;

                case "Int16":
                    classType = IsNullable ? "short?" : "short";
                    break;

                case "Int32":
                    classType = IsNullable ? "int?" : "int";
                    break;

                case "Int64":
                    classType = IsNullable ? "long?" : "long";
                    break;

                case "Decimal":
                    classType = IsNullable ? "decimal?" : "decimal";
                    break;

                case "Double":
                    classType = IsNullable ? "double?" : "double";
                    break;

                case "DateTime":
                case "Guid":
                case "Single":
                case "Type":
                    classType = systemType[1];
                    break;

                case "Byte[]":
                    classType = IsNullable ? "byte?[]" : "byte[]";
                    break;

                default:
                    //throw new NotImplementedException("Not implemented type :" + SystemType);
                    classType = SystemType;
                    break;
            }

            return classType;
        }

        abstract public DbType GetDbType(string providerDbType);

        #endregion

        #region ' Helper functions '

        internal DbConnection GetDBConnection()
        {
            DbProviderFactory providerFactory = DbProviderFactories.GetFactory(_ProviderName);
            DbConnection _Connection = providerFactory.CreateConnection();
            _Connection.ConnectionString = _ConnectionString;
            _Connection.Open();
            return _Connection;
        }

        protected DataTable GetDTSchemaTables()
        {
            DataTable tbl = new DataTable("SchemaTables");
            tbl.Columns.Add("TABLE_CATALOG", typeof(System.String));
            tbl.Columns.Add("TABLE_SCHEMA", typeof(System.String));
            tbl.Columns.Add("TABLE_NAME", typeof(System.String));
            tbl.Columns.Add("TABLE_TYPE", typeof(System.String));
            tbl.Columns.Add("TABLE_GUID", typeof(System.Guid));
            tbl.Columns.Add("DESCRIPTION", typeof(System.String));
            tbl.Columns.Add("TABLE_PROPID", typeof(System.Int32));
            tbl.Columns.Add("DATE_CREATED", typeof(System.DateTime));
            tbl.Columns.Add("DATE_MODIFIED", typeof(System.DateTime));

            return tbl;
        }

        protected DataTable GetDTConstrains()
        {
            DataTable tbl = new DataTable("Constraints");
            tbl.Columns.Add("PK_TABLE_CATALOG", typeof(System.String));
            tbl.Columns.Add("PK_TABLE_SCHEMA", typeof(System.String));
            tbl.Columns.Add("PK_TABLE_NAME", typeof(System.String));
            tbl.Columns.Add("PK_COLUMN_NAME", typeof(System.String));
            tbl.Columns.Add("PK_ORDINAL_POSITION", typeof(System.String));
            tbl.Columns.Add("PK_NAME", typeof(System.String));
            tbl.Columns.Add("FK_TABLE_CATALOG", typeof(System.String));
            tbl.Columns.Add("FK_TABLE_SCHEMA", typeof(System.String));
            tbl.Columns.Add("FK_TABLE_NAME", typeof(System.String));
            tbl.Columns.Add("FK_COLUMN_NAME", typeof(System.String));
            tbl.Columns.Add("FK_ORDINAL_POSITION", typeof(System.Int32));
            tbl.Columns.Add("FK_NAME", typeof(System.String));

            return tbl;
        }

        protected DataTable GetDTProcedureParameters()
        {
            DataTable tbl = new DataTable("ProcedureParameters");
            tbl.Columns.Add("SPECIFIC_CATALOG", typeof(System.String));
            tbl.Columns.Add("SPECIFIC_SCHEMA", typeof(System.String));
            tbl.Columns.Add("SPECIFIC_NAME", typeof(System.String));
            tbl.Columns.Add("PARAMETER_NAME", typeof(System.String));
            tbl.Columns.Add("ORDINAL_POSITION", typeof(System.Int32));
            tbl.Columns.Add("PARAMETER_MODE", typeof(ParameterDirection));
            tbl.Columns.Add("IS_RESULT", typeof(System.Boolean));
            tbl.Columns.Add("DATA_TYPE", typeof(System.Data.DbType));
            tbl.Columns.Add("CHARACTER_MAXIMUM_LENGTH", typeof(System.Int32));
            tbl.Columns.Add("NUMERIC_PRECISION", typeof(System.Int16));
            tbl.Columns.Add("NUMERIC_SCALE", typeof(System.Int32));
            tbl.Columns.Add("DATETIME_PRECISION", typeof(System.Int16));

            return tbl;
        }

        #endregion

    }

    class SqlServerSchemaProvider : DbSchemaProvider
    {
        public SqlServerSchemaProvider(string connectionstring, string providername) : base(connectionstring, providername) { }

        #region ' IDbProvider Members '

        public override DataTable GetConstraints()
        {
            DataTable tbl = new DataTable("Constraints");
            using (DbConnection _Connection = this.GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlConstraints;
                _Command.CommandType = CommandType.Text;
                tbl.Load(_Command.ExecuteReader());
            }

            return tbl;
        }

        public override DbType GetDbType(string providerDbType)
        {
            switch (providerDbType)
            {
                case "0":   // SqlDbType.BigInt
                    return DbType.Int64;

                case "1":   // SqlDbType.Binary
                case "7":   // SqlDbType.Image
                case "19":  // SqlDbType.Timestamp
                case "21":  // SqlDbType.VarBinary
                    return DbType.Binary;

                case "2":   // SqlDbType.Bit
                    return DbType.Boolean;

                case "3":   // SqlDbType.Char
                    return DbType.AnsiStringFixedLength;

                case "4":   // SqlDbType.DateTime
                case "15":  // SqlDbType.SmallDateTime
                    return DbType.DateTime;

                case "5":   // SqlDbType.Decimal
                    return DbType.Decimal;

                case "6":   // SqlDbType.Float
                    return DbType.Double;

                case "8":   // SqlDbType.Int
                    return DbType.Int32;

                case "9":   // SqlDbType.Money
                case "17":  // SqlDbType.SmallMoney
                    return DbType.Currency;

                case "10":  // SqlDbType.NChar
                    return DbType.StringFixedLength;

                case "11":  // SqlDbType.NText
                case "12":  // SqlDbType.NVarChar 
                    return DbType.String;

                case "13":  // SqlDbType.Real:
                    return DbType.Single;

                case "14":  // SqlDbType.UniqueIdentifier:
                    return DbType.Guid;

                case "16":  // SqlDbType.SmallInt:
                    return DbType.Int16;

                case "18":  // SqlDbType.Text:
                case "22":  // SqlDbType.VarChar:
                    return DbType.AnsiString;

                case "20":  // SqlDbType.TinyInt:
                    return DbType.Byte;

                default:
                    return DbType.AnsiString;
            }

        }

        #endregion

        #region ' SQL code: database constrains '
        //
        // SQL Server: find database constrains
        //
        const string sqlConstraints =
            "SELECT" +
            "	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
            "	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
            "	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
            "	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
            "	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
            "	KCUUC.CONSTRAINT_NAME AS PK_NAME, " +
            "	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
            "	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
            "	KCUC.TABLE_NAME AS FK_TABLE_NAME," +
            "	KCUC.COLUMN_NAME AS FK_COLUMN_NAME," +
            "	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION," +
            "	KCUC.CONSTRAINT_NAME AS FK_NAME " +
            "FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
            "	ON (RC.CONSTRAINT_CATALOG = KCUC.CONSTRAINT_CATALOG" +
            "		AND RC.CONSTRAINT_SCHEMA = KCUC.CONSTRAINT_SCHEMA" +
            "		AND RC.CONSTRAINT_NAME = KCUC.CONSTRAINT_NAME)" +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
            "	ON (RC.UNIQUE_CONSTRAINT_CATALOG = KCUUC.CONSTRAINT_CATALOG" +
            "		AND RC.UNIQUE_CONSTRAINT_SCHEMA = KCUUC.CONSTRAINT_SCHEMA" +
            "		AND RC.UNIQUE_CONSTRAINT_NAME = KCUUC.CONSTRAINT_NAME)";

        #endregion

    }

    public class SqlServerCeSchemaProvider : DbSchemaProvider
    {
        public SqlServerCeSchemaProvider(string connectionstring, string providername) : base(connectionstring, providername) { }

        #region ' IDbProvider Members '

        public override DataTable GetSchemaTables()
        {
            DataTable tbl = GetDTSchemaTables();

            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlTables;
                _Command.CommandType = CommandType.Text;
                DbDataReader results = _Command.ExecuteReader();
                while (results.Read())
                {
                    DataRow valuesRow = tbl.NewRow();
                    if (results[0] != DBNull.Value)
                        valuesRow[0] = results.GetString(0);
                    if (results[1] != DBNull.Value)
                        valuesRow[1] = results.GetString(1);
                    if (results[2] != DBNull.Value)
                        valuesRow[2] = results.GetString(2);
                    if (results[3] != DBNull.Value)
                        valuesRow[3] = results.GetString(3);
                    if (results[5] != DBNull.Value)
                        valuesRow[5] = results.GetString(5);
                    if (results[7] != DBNull.Value)
                        valuesRow[7] = results.GetDateTime(7);
                    if (results[8] != DBNull.Value)
                        valuesRow[8] = results.GetDateTime(8);
                    tbl.Rows.Add(valuesRow);
                }
                results.Close();
            }

            return tbl;
        }

        public override DataTable GetConstraints()
        {
            DataTable tbl = GetDTConstrains();
            using (DbConnection _Connection = this.GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlConstraints;
                _Command.CommandType = CommandType.Text;
                DbDataReader results = _Command.ExecuteReader();
                while (results.Read())
                {
                    DataRow valuesRow = tbl.NewRow();
                    if (results[0] != DBNull.Value)
                        valuesRow[0] = results.GetString(0);
                    if (results[1] != DBNull.Value)
                        valuesRow[1] = results.GetString(1);
                    if (results[2] != DBNull.Value)
                        valuesRow[2] = results.GetString(2);
                    if (results[3] != DBNull.Value)
                        valuesRow[3] = results.GetString(3);
                    if (results[4] != DBNull.Value)
                        valuesRow[4] = results.GetInt32(4);
                    if (results[5] != DBNull.Value)
                        valuesRow[5] = results.GetString(5);
                    if (results[6] != DBNull.Value)
                        valuesRow[6] = results.GetString(6);
                    if (results[7] != DBNull.Value)
                        valuesRow[7] = results.GetString(7);
                    if (results[8] != DBNull.Value)
                        valuesRow[8] = results.GetString(8);
                    if (results[9] != DBNull.Value)
                        valuesRow[9] = results.GetString(9);
                    if (results[10] != DBNull.Value)
                        valuesRow[10] = results.GetInt32(10);
                    if (results[11] != DBNull.Value)
                        valuesRow[11] = results.GetString(11);

                    tbl.Rows.Add(valuesRow);
                }
                results.Close();
            }

            return tbl;
        }

        public override DataTable GetProcedures()
        {
            return new DataTable("Procedures");
        }

        public override DataTable GetProcedureParameters(string procedureSchema, string procedureName)
        {
            return GetDTProcedureParameters();
        }

        public override DbType GetDbType(string providerDbType)
        {
            switch (providerDbType.ToLower())
            {
                case "bigint":
                    return DbType.Int64;

                case "binary":
                case "image":
                case "timestamp":
                case "varbinary":
                case "rowversion":
                    return DbType.Binary;

                case "bit":
                    return DbType.Boolean;

                case "char":
                    return DbType.AnsiStringFixedLength;

                case "datetime":
                case "smalldatetime":
                    return DbType.DateTime;

                case "decimal":
                    return DbType.Decimal;

                case "float":
                    return DbType.Double;

                case "int":
                    return DbType.Int32;

                case "money":
                case "smallmoney":
                    return DbType.Currency;

                case "nchar":
                    return DbType.StringFixedLength;

                case "ntext":
                case "nvarchar":
                    return DbType.String;

                case "real":
                    return DbType.Single;

                case "uniqueidentifier":
                    return DbType.Guid;

                case "smallint":
                    return DbType.Int16;

                case "text":
                case "varchar":
                    return DbType.AnsiString;

                case "tinyint":
                    return DbType.Byte;

                default:
                    return DbType.AnsiString;
            }
        }

        #endregion

        #region ' SqlServerCe code: database constrains '
        //
        // SQL Server Compact: find tables and database constrains
        //
        const string sqlTables =
            "SELECT * " +
            "FROM INFORMATION_SCHEMA.TABLES";

        const string sqlConstraints =
            "SELECT" +
            "	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
            "	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
            "	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
            "	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
            "	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
            "	KCUUC.CONSTRAINT_NAME AS PK_NAME," +
            "	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
            "	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
            "	KCUC.TABLE_NAME AS FK_TABLE_NAME, " +
            "	KCUC.COLUMN_NAME AS FK_COLUMN_NAME, " +
            "	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION, " +
            "	KCUC.CONSTRAINT_NAME AS FK_NAME " +
            "FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
            "	ON (RC.CONSTRAINT_NAME = KCUC.CONSTRAINT_NAME)" +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
            "	ON (RC.UNIQUE_CONSTRAINT_NAME = KCUUC.CONSTRAINT_NAME)";

        #endregion

    }

    public class MySqlSchemaProvider : DbSchemaProvider
    {
        public MySqlSchemaProvider(string connectionstring, string providername) : base(connectionstring, providername) { }

        #region ' IDbProvider Members '

        public override DataTable GetConstraints()
        {
            DataTable tbl = new DataTable("Constraints");
            using (DbConnection _Connection = this.GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlConstraints;
                _Command.CommandType = CommandType.Text;
                tbl.Load(_Command.ExecuteReader());
            }

            return tbl;
        }

        public override string QualifiedTableName(string tableSchema, string tableName)
        {
            if (!string.IsNullOrEmpty(tableSchema))
                return string.Format("`{0}`.`{1}`", tableSchema, tableName);
            else
                return string.Format("`{0}`", tableName);
        }

        public override DataTable GetProcedureParameters(string procedureSchema, string procedureName)
        {
            DataTable tbl = GetDTProcedureParameters();
            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = this.QualifiedTableName(procedureSchema, procedureName);
                _Command.CommandType = CommandType.StoredProcedure;

                DbParameter par = _Command.CreateParameter();

                DbProviderFactory pf = DbProviderFactories.GetFactory(this.ProviderName);
                DbCommandBuilder cb = pf.CreateCommandBuilder();
                MethodInfo theMethod = cb.GetType().GetMethod("DeriveParameters");
                theMethod.Invoke(cb, new object[] { _Command });

                int counter = 1;
                foreach (DbParameter p in _Command.Parameters)
                {
                    DataRow parameterRow = tbl.NewRow();
                    if (!string.IsNullOrEmpty(procedureSchema))
                        parameterRow["SPECIFIC_SCHEMA"] = procedureSchema;
                    parameterRow["SPECIFIC_NAME"] = procedureName;
                    parameterRow["PARAMETER_NAME"] = p.ParameterName;
                    parameterRow["ORDINAL_POSITION"] = counter;
                    parameterRow["PARAMETER_MODE"] = p.Direction;
                    parameterRow["IS_RESULT"] = p.Direction == ParameterDirection.ReturnValue;
                    parameterRow["DATA_TYPE"] = p.DbType;
                    parameterRow["CHARACTER_MAXIMUM_LENGTH"] = p.Size;

                    tbl.Rows.Add(parameterRow);
                    counter++;
                }
            }

            return tbl;
        }

        public override DbType GetDbType(string providerDbType)
        {
            switch (providerDbType)
            {
                case "0":   // MySqlDbType.Decimal
                case "246": // MySqlDbType.NewDecimal
                    return DbType.Decimal;

                case "1":   // MySqlDbType.Byte
                    return DbType.SByte;

                case "2":   // MySqlDbType.Int16
                    return DbType.Int16;

                case "3":   // MySqlDbType.Int32
                case "9":   // MySqlDbType.Int24
                    return DbType.Int32;

                case "4":   // MySqlDbType.Float
                    return DbType.Single;

                case "5":   // MySqlDbType.Double
                    return DbType.Double;

                case "7":   // MySqlDbType.Timestamp
                case "12":  // MySqlDbType.DateTime
                    return DbType.DateTime;

                case "8":   // MySqlDbType.Int64
                    return DbType.Int64;

                case "10":  // MySqlDbType.Date
                case "13":  // MySqlDbType.Year
                case "14":  // MySqlDbType.Newdate
                    return DbType.Date;

                case "11":  // MySqlDbType.Time
                    return DbType.Time;

                case "16":  // MySqlDbType.Bit
                case "508": // MySqlDbType.UInt64
                    return DbType.UInt64;

                case "249": // MySqlDbType.TinyBlob
                case "250": // MySqlDbType.MediumBlob
                case "251": // MySqlDbType.LongBlob
                case "252": // MySqlDbType.Blob
                    return DbType.Binary;

                case "254": // MySqlDbType.String
                    return DbType.StringFixedLength;

                case "247": // MySqlDbType.Enum
                    return DbType.String;

                case "248": // MySqlDbType.Set
                case "253": // MySqlDbType.VarChar
                case "750": // MySqlDbType.MediumText
                case "749": // MySqlDbType.TinyText
                case "751": // MySqlDbType.LongText
                case "752": // MySqlDbType.Text
                    return DbType.String;

                case "501": // MySqlDbType.UByte
                    return DbType.Byte;

                case "502": // MySqlDbType.UInt16
                    return DbType.UInt16;

                case "503": // MySqlDbType.UInt32
                case "509": // MySqlDbType.UInt24
                    return DbType.UInt32;

                default:
                    return DbType.AnsiString;
            }
        }

        #endregion

        #region ' SQL code: database constrains '
        //
        // MySQL Server: find database constrains
        //
        const string sqlConstraints =
            "SELECT" +
            "	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
            "	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
            "	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
            "	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
            "	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
            "	KCUUC.CONSTRAINT_NAME AS PK_NAME," +
            "	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
            "	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
            "	KCUC.TABLE_NAME AS FK_TABLE_NAME," +
            "	KCUC.COLUMN_NAME AS FK_COLUMN_NAME," +
            "	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION," +
            "	KCUC.CONSTRAINT_NAME AS FK_NAME " +
            "FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
            "INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
            "	ON (KCUC.CONSTRAINT_SCHEMA = RC.CONSTRAINT_SCHEMA" +
            "  AND KCUC.CONSTRAINT_NAME = RC.CONSTRAINT_NAME" +
            "  AND KCUC.TABLE_NAME = RC.TABLE_NAME)" +
            "INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
            "	ON (KCUUC.CONSTRAINT_SCHEMA = RC.UNIQUE_CONSTRAINT_SCHEMA" +
            "  AND KCUUC.CONSTRAINT_NAME = RC.UNIQUE_CONSTRAINT_NAME" +
            "  AND KCUUC.TABLE_NAME = RC.REFERENCED_TABLE_NAME)";

        #endregion

    }

#>