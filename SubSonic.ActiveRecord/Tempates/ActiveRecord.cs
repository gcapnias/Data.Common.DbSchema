

//  Generated on 4/5/2009 02:21:02 by LocalAdmin
// <auto-generated />

using System;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Xml;
using System.Xml.Serialization;
using SubSonic;
using SubSonic.Utilities;

namespace Northwind
{

    /// <summary>
    /// Strongly-typed collection for the Category class.
    /// </summary>
    [Serializable]
    public partial class CategoryCollection : ActiveList<Category, CategoryCollection>
    {
        public CategoryCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CategoryCollection</returns>
        public CategoryCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Category o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [Categories] table.
    /// </summary>
    [Serializable]
    public class Category : ActiveRecord<Category>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public Category()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public Category(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Category(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Category(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Categories", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnCategoryID = new TableSchema.TableColumn(schema);
                columnCategoryID.ColumnName = "CategoryID";
                columnCategoryID.DataType = DbType.Int32;
                columnCategoryID.MaxLength = 0;
                columnCategoryID.AutoIncrement = true;
                columnCategoryID.IsNullable = false;
                columnCategoryID.IsPrimaryKey = true;
                columnCategoryID.IsForeignKey = false;
                columnCategoryID.IsReadOnly = true;
                schema.Columns.Add(columnCategoryID);

                TableSchema.TableColumn columnCategoryName = new TableSchema.TableColumn(schema);
                columnCategoryName.ColumnName = "CategoryName";
                columnCategoryName.DataType = DbType.String;
                columnCategoryName.MaxLength = 15;
                columnCategoryName.AutoIncrement = false;
                columnCategoryName.IsNullable = false;
                columnCategoryName.IsPrimaryKey = false;
                columnCategoryName.IsForeignKey = false;
                columnCategoryName.IsReadOnly = false;
                schema.Columns.Add(columnCategoryName);

                TableSchema.TableColumn columnDescription = new TableSchema.TableColumn(schema);
                columnDescription.ColumnName = "Description";
                columnDescription.DataType = DbType.String;
                columnDescription.MaxLength = 1073741823;
                columnDescription.AutoIncrement = false;
                columnDescription.IsNullable = true;
                columnDescription.IsPrimaryKey = false;
                columnDescription.IsForeignKey = false;
                columnDescription.IsReadOnly = false;
                schema.Columns.Add(columnDescription);

                TableSchema.TableColumn columnPicture = new TableSchema.TableColumn(schema);
                columnPicture.ColumnName = "Picture";
                columnPicture.DataType = DbType.Binary;
                columnPicture.MaxLength = 0;
                columnPicture.AutoIncrement = false;
                columnPicture.IsNullable = true;
                columnPicture.IsPrimaryKey = false;
                columnPicture.IsForeignKey = false;
                columnPicture.IsReadOnly = false;
                schema.Columns.Add(columnPicture);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Categories", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("CategoryID")]
        [Bindable(true)]
        public int CategoryID
        {
            get { return GetColumnValue<int>(Columns.CategoryID); }
            set { SetColumnValue(Columns.CategoryID, value); }
        }

        [XmlAttribute("CategoryName")]
        [Bindable(true)]
        public string CategoryName
        {
            get { return GetColumnValue<string>(Columns.CategoryName); }
            set { SetColumnValue(Columns.CategoryName, value); }
        }

        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description
        {
            get { return GetColumnValue<string>(Columns.Description); }
            set { SetColumnValue(Columns.Description, value); }
        }

        [XmlAttribute("Picture")]
        [Bindable(true)]
        public byte[] Picture
        {
            get { return GetColumnValue<byte[]>(Columns.Picture); }
            set { SetColumnValue(Columns.Picture, value); }
        }

        #endregion

        #region ' Primary key relations' Methods '

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            SetPKValues();
        }

        public Northwind.ProductCollection ProductsRecords()
        {
            return new Northwind.ProductCollection().Where(Product.Columns.CategoryID, CategoryID).Load();
        }


        #endregion

        // There are no foreign key relations

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int CategoryID, string CategoryName, string Description, byte[] Picture)
        {
            Category item = new Category();
            item.CategoryID = CategoryID;
            item.CategoryName = CategoryName;
            item.Description = Description;
            item.Picture = Picture;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string CategoryName, string Description, byte[] Picture)
        {
            Category item = new Category();
            item.CategoryName = CategoryName;
            item.Description = Description;
            item.Picture = Picture;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn CategoryIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn CategoryNameColumn
        {
            get { return Schema.Columns[1]; }
        }

        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }

        public static TableSchema.TableColumn PictureColumn
        {
            get { return Schema.Columns[3]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string CategoryID = @"CategoryID";
            public static string CategoryName = @"CategoryName";
            public static string Description = @"Description";
            public static string Picture = @"Picture";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the Customer class.
    /// </summary>
    [Serializable]
    public partial class CustomerCollection : ActiveList<Customer, CustomerCollection>
    {
        public CustomerCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CustomerCollection</returns>
        public CustomerCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Customer o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [Customers] table.
    /// </summary>
    [Serializable]
    public class Customer : ActiveRecord<Customer>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public Customer()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public Customer(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Customer(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Customer(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Customers", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnCustomerID = new TableSchema.TableColumn(schema);
                columnCustomerID.ColumnName = "CustomerID";
                columnCustomerID.DataType = DbType.StringFixedLength;
                columnCustomerID.MaxLength = 5;
                columnCustomerID.AutoIncrement = false;
                columnCustomerID.IsNullable = false;
                columnCustomerID.IsPrimaryKey = true;
                columnCustomerID.IsForeignKey = false;
                columnCustomerID.IsReadOnly = false;
                schema.Columns.Add(columnCustomerID);

                TableSchema.TableColumn columnCompanyName = new TableSchema.TableColumn(schema);
                columnCompanyName.ColumnName = "CompanyName";
                columnCompanyName.DataType = DbType.String;
                columnCompanyName.MaxLength = 40;
                columnCompanyName.AutoIncrement = false;
                columnCompanyName.IsNullable = false;
                columnCompanyName.IsPrimaryKey = false;
                columnCompanyName.IsForeignKey = false;
                columnCompanyName.IsReadOnly = false;
                schema.Columns.Add(columnCompanyName);

                TableSchema.TableColumn columnContactName = new TableSchema.TableColumn(schema);
                columnContactName.ColumnName = "ContactName";
                columnContactName.DataType = DbType.String;
                columnContactName.MaxLength = 30;
                columnContactName.AutoIncrement = false;
                columnContactName.IsNullable = true;
                columnContactName.IsPrimaryKey = false;
                columnContactName.IsForeignKey = false;
                columnContactName.IsReadOnly = false;
                schema.Columns.Add(columnContactName);

                TableSchema.TableColumn columnContactTitle = new TableSchema.TableColumn(schema);
                columnContactTitle.ColumnName = "ContactTitle";
                columnContactTitle.DataType = DbType.String;
                columnContactTitle.MaxLength = 30;
                columnContactTitle.AutoIncrement = false;
                columnContactTitle.IsNullable = true;
                columnContactTitle.IsPrimaryKey = false;
                columnContactTitle.IsForeignKey = false;
                columnContactTitle.IsReadOnly = false;
                schema.Columns.Add(columnContactTitle);

                TableSchema.TableColumn columnAddress = new TableSchema.TableColumn(schema);
                columnAddress.ColumnName = "Address";
                columnAddress.DataType = DbType.String;
                columnAddress.MaxLength = 60;
                columnAddress.AutoIncrement = false;
                columnAddress.IsNullable = true;
                columnAddress.IsPrimaryKey = false;
                columnAddress.IsForeignKey = false;
                columnAddress.IsReadOnly = false;
                schema.Columns.Add(columnAddress);

                TableSchema.TableColumn columnCity = new TableSchema.TableColumn(schema);
                columnCity.ColumnName = "City";
                columnCity.DataType = DbType.String;
                columnCity.MaxLength = 15;
                columnCity.AutoIncrement = false;
                columnCity.IsNullable = true;
                columnCity.IsPrimaryKey = false;
                columnCity.IsForeignKey = false;
                columnCity.IsReadOnly = false;
                schema.Columns.Add(columnCity);

                TableSchema.TableColumn columnRegion = new TableSchema.TableColumn(schema);
                columnRegion.ColumnName = "Region";
                columnRegion.DataType = DbType.String;
                columnRegion.MaxLength = 15;
                columnRegion.AutoIncrement = false;
                columnRegion.IsNullable = true;
                columnRegion.IsPrimaryKey = false;
                columnRegion.IsForeignKey = false;
                columnRegion.IsReadOnly = false;
                schema.Columns.Add(columnRegion);

                TableSchema.TableColumn columnPostalCode = new TableSchema.TableColumn(schema);
                columnPostalCode.ColumnName = "PostalCode";
                columnPostalCode.DataType = DbType.String;
                columnPostalCode.MaxLength = 10;
                columnPostalCode.AutoIncrement = false;
                columnPostalCode.IsNullable = true;
                columnPostalCode.IsPrimaryKey = false;
                columnPostalCode.IsForeignKey = false;
                columnPostalCode.IsReadOnly = false;
                schema.Columns.Add(columnPostalCode);

                TableSchema.TableColumn columnCountry = new TableSchema.TableColumn(schema);
                columnCountry.ColumnName = "Country";
                columnCountry.DataType = DbType.String;
                columnCountry.MaxLength = 15;
                columnCountry.AutoIncrement = false;
                columnCountry.IsNullable = true;
                columnCountry.IsPrimaryKey = false;
                columnCountry.IsForeignKey = false;
                columnCountry.IsReadOnly = false;
                schema.Columns.Add(columnCountry);

                TableSchema.TableColumn columnPhone = new TableSchema.TableColumn(schema);
                columnPhone.ColumnName = "Phone";
                columnPhone.DataType = DbType.String;
                columnPhone.MaxLength = 24;
                columnPhone.AutoIncrement = false;
                columnPhone.IsNullable = true;
                columnPhone.IsPrimaryKey = false;
                columnPhone.IsForeignKey = false;
                columnPhone.IsReadOnly = false;
                schema.Columns.Add(columnPhone);

                TableSchema.TableColumn columnFax = new TableSchema.TableColumn(schema);
                columnFax.ColumnName = "Fax";
                columnFax.DataType = DbType.String;
                columnFax.MaxLength = 24;
                columnFax.AutoIncrement = false;
                columnFax.IsNullable = true;
                columnFax.IsPrimaryKey = false;
                columnFax.IsForeignKey = false;
                columnFax.IsReadOnly = false;
                schema.Columns.Add(columnFax);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Customers", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("CustomerID")]
        [Bindable(true)]
        public string CustomerID
        {
            get { return GetColumnValue<string>(Columns.CustomerID); }
            set { SetColumnValue(Columns.CustomerID, value); }
        }

        [XmlAttribute("CompanyName")]
        [Bindable(true)]
        public string CompanyName
        {
            get { return GetColumnValue<string>(Columns.CompanyName); }
            set { SetColumnValue(Columns.CompanyName, value); }
        }

        [XmlAttribute("ContactName")]
        [Bindable(true)]
        public string ContactName
        {
            get { return GetColumnValue<string>(Columns.ContactName); }
            set { SetColumnValue(Columns.ContactName, value); }
        }

        [XmlAttribute("ContactTitle")]
        [Bindable(true)]
        public string ContactTitle
        {
            get { return GetColumnValue<string>(Columns.ContactTitle); }
            set { SetColumnValue(Columns.ContactTitle, value); }
        }

        [XmlAttribute("Address")]
        [Bindable(true)]
        public string Address
        {
            get { return GetColumnValue<string>(Columns.Address); }
            set { SetColumnValue(Columns.Address, value); }
        }

        [XmlAttribute("City")]
        [Bindable(true)]
        public string City
        {
            get { return GetColumnValue<string>(Columns.City); }
            set { SetColumnValue(Columns.City, value); }
        }

        [XmlAttribute("Region")]
        [Bindable(true)]
        public string Region
        {
            get { return GetColumnValue<string>(Columns.Region); }
            set { SetColumnValue(Columns.Region, value); }
        }

        [XmlAttribute("PostalCode")]
        [Bindable(true)]
        public string PostalCode
        {
            get { return GetColumnValue<string>(Columns.PostalCode); }
            set { SetColumnValue(Columns.PostalCode, value); }
        }

        [XmlAttribute("Country")]
        [Bindable(true)]
        public string Country
        {
            get { return GetColumnValue<string>(Columns.Country); }
            set { SetColumnValue(Columns.Country, value); }
        }

        [XmlAttribute("Phone")]
        [Bindable(true)]
        public string Phone
        {
            get { return GetColumnValue<string>(Columns.Phone); }
            set { SetColumnValue(Columns.Phone, value); }
        }

        [XmlAttribute("Fax")]
        [Bindable(true)]
        public string Fax
        {
            get { return GetColumnValue<string>(Columns.Fax); }
            set { SetColumnValue(Columns.Fax, value); }
        }

        #endregion

        #region ' Primary key relations' Methods '

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            SetPKValues();
        }

        public Northwind.CustomerCustomerDemoCollection CustomerCustomerDemosRecords()
        {
            return new Northwind.CustomerCustomerDemoCollection().Where(CustomerCustomerDemo.Columns.CustomerID, CustomerID).Load();
        }

        public Northwind.OrderCollection OrdersRecords()
        {
            return new Northwind.OrderCollection().Where(Order.Columns.CustomerID, CustomerID).Load();
        }


        #endregion

        // There are no foreign key relations

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string CustomerID, string CompanyName, string ContactName, string ContactTitle, string Address, string City, string Region, string PostalCode, string Country, string Phone, string Fax)
        {
            Customer item = new Customer();
            item.CustomerID = CustomerID;
            item.CompanyName = CompanyName;
            item.ContactName = ContactName;
            item.ContactTitle = ContactTitle;
            item.Address = Address;
            item.City = City;
            item.Region = Region;
            item.PostalCode = PostalCode;
            item.Country = Country;
            item.Phone = Phone;
            item.Fax = Fax;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string CustomerID, string CompanyName, string ContactName, string ContactTitle, string Address, string City, string Region, string PostalCode, string Country, string Phone, string Fax)
        {
            Customer item = new Customer();
            item.CustomerID = CustomerID;
            item.CompanyName = CompanyName;
            item.ContactName = ContactName;
            item.ContactTitle = ContactTitle;
            item.Address = Address;
            item.City = City;
            item.Region = Region;
            item.PostalCode = PostalCode;
            item.Country = Country;
            item.Phone = Phone;
            item.Fax = Fax;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn CustomerIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn CompanyNameColumn
        {
            get { return Schema.Columns[1]; }
        }

        public static TableSchema.TableColumn ContactNameColumn
        {
            get { return Schema.Columns[2]; }
        }

        public static TableSchema.TableColumn ContactTitleColumn
        {
            get { return Schema.Columns[3]; }
        }

        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[4]; }
        }

        public static TableSchema.TableColumn CityColumn
        {
            get { return Schema.Columns[5]; }
        }

        public static TableSchema.TableColumn RegionColumn
        {
            get { return Schema.Columns[6]; }
        }

        public static TableSchema.TableColumn PostalCodeColumn
        {
            get { return Schema.Columns[7]; }
        }

        public static TableSchema.TableColumn CountryColumn
        {
            get { return Schema.Columns[8]; }
        }

        public static TableSchema.TableColumn PhoneColumn
        {
            get { return Schema.Columns[9]; }
        }

        public static TableSchema.TableColumn FaxColumn
        {
            get { return Schema.Columns[10]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string CustomerID = @"CustomerID";
            public static string CompanyName = @"CompanyName";
            public static string ContactName = @"ContactName";
            public static string ContactTitle = @"ContactTitle";
            public static string Address = @"Address";
            public static string City = @"City";
            public static string Region = @"Region";
            public static string PostalCode = @"PostalCode";
            public static string Country = @"Country";
            public static string Phone = @"Phone";
            public static string Fax = @"Fax";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the Shipper class.
    /// </summary>
    [Serializable]
    public partial class ShipperCollection : ActiveList<Shipper, ShipperCollection>
    {
        public ShipperCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ShipperCollection</returns>
        public ShipperCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Shipper o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [Shippers] table.
    /// </summary>
    [Serializable]
    public class Shipper : ActiveRecord<Shipper>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public Shipper()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public Shipper(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Shipper(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Shipper(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Shippers", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnShipperID = new TableSchema.TableColumn(schema);
                columnShipperID.ColumnName = "ShipperID";
                columnShipperID.DataType = DbType.Int32;
                columnShipperID.MaxLength = 0;
                columnShipperID.AutoIncrement = true;
                columnShipperID.IsNullable = false;
                columnShipperID.IsPrimaryKey = true;
                columnShipperID.IsForeignKey = false;
                columnShipperID.IsReadOnly = true;
                schema.Columns.Add(columnShipperID);

                TableSchema.TableColumn columnCompanyName = new TableSchema.TableColumn(schema);
                columnCompanyName.ColumnName = "CompanyName";
                columnCompanyName.DataType = DbType.String;
                columnCompanyName.MaxLength = 40;
                columnCompanyName.AutoIncrement = false;
                columnCompanyName.IsNullable = false;
                columnCompanyName.IsPrimaryKey = false;
                columnCompanyName.IsForeignKey = false;
                columnCompanyName.IsReadOnly = false;
                schema.Columns.Add(columnCompanyName);

                TableSchema.TableColumn columnPhone = new TableSchema.TableColumn(schema);
                columnPhone.ColumnName = "Phone";
                columnPhone.DataType = DbType.String;
                columnPhone.MaxLength = 24;
                columnPhone.AutoIncrement = false;
                columnPhone.IsNullable = true;
                columnPhone.IsPrimaryKey = false;
                columnPhone.IsForeignKey = false;
                columnPhone.IsReadOnly = false;
                schema.Columns.Add(columnPhone);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Shippers", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("ShipperID")]
        [Bindable(true)]
        public int ShipperID
        {
            get { return GetColumnValue<int>(Columns.ShipperID); }
            set { SetColumnValue(Columns.ShipperID, value); }
        }

        [XmlAttribute("CompanyName")]
        [Bindable(true)]
        public string CompanyName
        {
            get { return GetColumnValue<string>(Columns.CompanyName); }
            set { SetColumnValue(Columns.CompanyName, value); }
        }

        [XmlAttribute("Phone")]
        [Bindable(true)]
        public string Phone
        {
            get { return GetColumnValue<string>(Columns.Phone); }
            set { SetColumnValue(Columns.Phone, value); }
        }

        #endregion

        #region ' Primary key relations' Methods '

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            SetPKValues();
        }

        public Northwind.OrderCollection OrdersRecords()
        {
            return new Northwind.OrderCollection().Where(Order.Columns.ShipVia, ShipperID).Load();
        }


        #endregion

        // There are no foreign key relations

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int ShipperID, string CompanyName, string Phone)
        {
            Shipper item = new Shipper();
            item.ShipperID = ShipperID;
            item.CompanyName = CompanyName;
            item.Phone = Phone;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string CompanyName, string Phone)
        {
            Shipper item = new Shipper();
            item.CompanyName = CompanyName;
            item.Phone = Phone;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn ShipperIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn CompanyNameColumn
        {
            get { return Schema.Columns[1]; }
        }

        public static TableSchema.TableColumn PhoneColumn
        {
            get { return Schema.Columns[2]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string ShipperID = @"ShipperID";
            public static string CompanyName = @"CompanyName";
            public static string Phone = @"Phone";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the Supplier class.
    /// </summary>
    [Serializable]
    public partial class SupplierCollection : ActiveList<Supplier, SupplierCollection>
    {
        public SupplierCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SupplierCollection</returns>
        public SupplierCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Supplier o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [Suppliers] table.
    /// </summary>
    [Serializable]
    public class Supplier : ActiveRecord<Supplier>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public Supplier()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public Supplier(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Supplier(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Supplier(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Suppliers", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnSupplierID = new TableSchema.TableColumn(schema);
                columnSupplierID.ColumnName = "SupplierID";
                columnSupplierID.DataType = DbType.Int32;
                columnSupplierID.MaxLength = 0;
                columnSupplierID.AutoIncrement = true;
                columnSupplierID.IsNullable = false;
                columnSupplierID.IsPrimaryKey = true;
                columnSupplierID.IsForeignKey = false;
                columnSupplierID.IsReadOnly = true;
                schema.Columns.Add(columnSupplierID);

                TableSchema.TableColumn columnCompanyName = new TableSchema.TableColumn(schema);
                columnCompanyName.ColumnName = "CompanyName";
                columnCompanyName.DataType = DbType.String;
                columnCompanyName.MaxLength = 40;
                columnCompanyName.AutoIncrement = false;
                columnCompanyName.IsNullable = false;
                columnCompanyName.IsPrimaryKey = false;
                columnCompanyName.IsForeignKey = false;
                columnCompanyName.IsReadOnly = false;
                schema.Columns.Add(columnCompanyName);

                TableSchema.TableColumn columnContactName = new TableSchema.TableColumn(schema);
                columnContactName.ColumnName = "ContactName";
                columnContactName.DataType = DbType.String;
                columnContactName.MaxLength = 30;
                columnContactName.AutoIncrement = false;
                columnContactName.IsNullable = true;
                columnContactName.IsPrimaryKey = false;
                columnContactName.IsForeignKey = false;
                columnContactName.IsReadOnly = false;
                schema.Columns.Add(columnContactName);

                TableSchema.TableColumn columnContactTitle = new TableSchema.TableColumn(schema);
                columnContactTitle.ColumnName = "ContactTitle";
                columnContactTitle.DataType = DbType.String;
                columnContactTitle.MaxLength = 30;
                columnContactTitle.AutoIncrement = false;
                columnContactTitle.IsNullable = true;
                columnContactTitle.IsPrimaryKey = false;
                columnContactTitle.IsForeignKey = false;
                columnContactTitle.IsReadOnly = false;
                schema.Columns.Add(columnContactTitle);

                TableSchema.TableColumn columnAddress = new TableSchema.TableColumn(schema);
                columnAddress.ColumnName = "Address";
                columnAddress.DataType = DbType.String;
                columnAddress.MaxLength = 60;
                columnAddress.AutoIncrement = false;
                columnAddress.IsNullable = true;
                columnAddress.IsPrimaryKey = false;
                columnAddress.IsForeignKey = false;
                columnAddress.IsReadOnly = false;
                schema.Columns.Add(columnAddress);

                TableSchema.TableColumn columnCity = new TableSchema.TableColumn(schema);
                columnCity.ColumnName = "City";
                columnCity.DataType = DbType.String;
                columnCity.MaxLength = 15;
                columnCity.AutoIncrement = false;
                columnCity.IsNullable = true;
                columnCity.IsPrimaryKey = false;
                columnCity.IsForeignKey = false;
                columnCity.IsReadOnly = false;
                schema.Columns.Add(columnCity);

                TableSchema.TableColumn columnRegion = new TableSchema.TableColumn(schema);
                columnRegion.ColumnName = "Region";
                columnRegion.DataType = DbType.String;
                columnRegion.MaxLength = 15;
                columnRegion.AutoIncrement = false;
                columnRegion.IsNullable = true;
                columnRegion.IsPrimaryKey = false;
                columnRegion.IsForeignKey = false;
                columnRegion.IsReadOnly = false;
                schema.Columns.Add(columnRegion);

                TableSchema.TableColumn columnPostalCode = new TableSchema.TableColumn(schema);
                columnPostalCode.ColumnName = "PostalCode";
                columnPostalCode.DataType = DbType.String;
                columnPostalCode.MaxLength = 10;
                columnPostalCode.AutoIncrement = false;
                columnPostalCode.IsNullable = true;
                columnPostalCode.IsPrimaryKey = false;
                columnPostalCode.IsForeignKey = false;
                columnPostalCode.IsReadOnly = false;
                schema.Columns.Add(columnPostalCode);

                TableSchema.TableColumn columnCountry = new TableSchema.TableColumn(schema);
                columnCountry.ColumnName = "Country";
                columnCountry.DataType = DbType.String;
                columnCountry.MaxLength = 15;
                columnCountry.AutoIncrement = false;
                columnCountry.IsNullable = true;
                columnCountry.IsPrimaryKey = false;
                columnCountry.IsForeignKey = false;
                columnCountry.IsReadOnly = false;
                schema.Columns.Add(columnCountry);

                TableSchema.TableColumn columnPhone = new TableSchema.TableColumn(schema);
                columnPhone.ColumnName = "Phone";
                columnPhone.DataType = DbType.String;
                columnPhone.MaxLength = 24;
                columnPhone.AutoIncrement = false;
                columnPhone.IsNullable = true;
                columnPhone.IsPrimaryKey = false;
                columnPhone.IsForeignKey = false;
                columnPhone.IsReadOnly = false;
                schema.Columns.Add(columnPhone);

                TableSchema.TableColumn columnFax = new TableSchema.TableColumn(schema);
                columnFax.ColumnName = "Fax";
                columnFax.DataType = DbType.String;
                columnFax.MaxLength = 24;
                columnFax.AutoIncrement = false;
                columnFax.IsNullable = true;
                columnFax.IsPrimaryKey = false;
                columnFax.IsForeignKey = false;
                columnFax.IsReadOnly = false;
                schema.Columns.Add(columnFax);

                TableSchema.TableColumn columnHomePage = new TableSchema.TableColumn(schema);
                columnHomePage.ColumnName = "HomePage";
                columnHomePage.DataType = DbType.String;
                columnHomePage.MaxLength = 1073741823;
                columnHomePage.AutoIncrement = false;
                columnHomePage.IsNullable = true;
                columnHomePage.IsPrimaryKey = false;
                columnHomePage.IsForeignKey = false;
                columnHomePage.IsReadOnly = false;
                schema.Columns.Add(columnHomePage);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Suppliers", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("SupplierID")]
        [Bindable(true)]
        public int SupplierID
        {
            get { return GetColumnValue<int>(Columns.SupplierID); }
            set { SetColumnValue(Columns.SupplierID, value); }
        }

        [XmlAttribute("CompanyName")]
        [Bindable(true)]
        public string CompanyName
        {
            get { return GetColumnValue<string>(Columns.CompanyName); }
            set { SetColumnValue(Columns.CompanyName, value); }
        }

        [XmlAttribute("ContactName")]
        [Bindable(true)]
        public string ContactName
        {
            get { return GetColumnValue<string>(Columns.ContactName); }
            set { SetColumnValue(Columns.ContactName, value); }
        }

        [XmlAttribute("ContactTitle")]
        [Bindable(true)]
        public string ContactTitle
        {
            get { return GetColumnValue<string>(Columns.ContactTitle); }
            set { SetColumnValue(Columns.ContactTitle, value); }
        }

        [XmlAttribute("Address")]
        [Bindable(true)]
        public string Address
        {
            get { return GetColumnValue<string>(Columns.Address); }
            set { SetColumnValue(Columns.Address, value); }
        }

        [XmlAttribute("City")]
        [Bindable(true)]
        public string City
        {
            get { return GetColumnValue<string>(Columns.City); }
            set { SetColumnValue(Columns.City, value); }
        }

        [XmlAttribute("Region")]
        [Bindable(true)]
        public string Region
        {
            get { return GetColumnValue<string>(Columns.Region); }
            set { SetColumnValue(Columns.Region, value); }
        }

        [XmlAttribute("PostalCode")]
        [Bindable(true)]
        public string PostalCode
        {
            get { return GetColumnValue<string>(Columns.PostalCode); }
            set { SetColumnValue(Columns.PostalCode, value); }
        }

        [XmlAttribute("Country")]
        [Bindable(true)]
        public string Country
        {
            get { return GetColumnValue<string>(Columns.Country); }
            set { SetColumnValue(Columns.Country, value); }
        }

        [XmlAttribute("Phone")]
        [Bindable(true)]
        public string Phone
        {
            get { return GetColumnValue<string>(Columns.Phone); }
            set { SetColumnValue(Columns.Phone, value); }
        }

        [XmlAttribute("Fax")]
        [Bindable(true)]
        public string Fax
        {
            get { return GetColumnValue<string>(Columns.Fax); }
            set { SetColumnValue(Columns.Fax, value); }
        }

        [XmlAttribute("HomePage")]
        [Bindable(true)]
        public string HomePage
        {
            get { return GetColumnValue<string>(Columns.HomePage); }
            set { SetColumnValue(Columns.HomePage, value); }
        }

        #endregion

        #region ' Primary key relations' Methods '

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            SetPKValues();
        }

        public Northwind.ProductCollection ProductsRecords()
        {
            return new Northwind.ProductCollection().Where(Product.Columns.SupplierID, SupplierID).Load();
        }


        #endregion

        // There are no foreign key relations

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int SupplierID, string CompanyName, string ContactName, string ContactTitle, string Address, string City, string Region, string PostalCode, string Country, string Phone, string Fax, string HomePage)
        {
            Supplier item = new Supplier();
            item.SupplierID = SupplierID;
            item.CompanyName = CompanyName;
            item.ContactName = ContactName;
            item.ContactTitle = ContactTitle;
            item.Address = Address;
            item.City = City;
            item.Region = Region;
            item.PostalCode = PostalCode;
            item.Country = Country;
            item.Phone = Phone;
            item.Fax = Fax;
            item.HomePage = HomePage;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string CompanyName, string ContactName, string ContactTitle, string Address, string City, string Region, string PostalCode, string Country, string Phone, string Fax, string HomePage)
        {
            Supplier item = new Supplier();
            item.CompanyName = CompanyName;
            item.ContactName = ContactName;
            item.ContactTitle = ContactTitle;
            item.Address = Address;
            item.City = City;
            item.Region = Region;
            item.PostalCode = PostalCode;
            item.Country = Country;
            item.Phone = Phone;
            item.Fax = Fax;
            item.HomePage = HomePage;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn SupplierIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn CompanyNameColumn
        {
            get { return Schema.Columns[1]; }
        }

        public static TableSchema.TableColumn ContactNameColumn
        {
            get { return Schema.Columns[2]; }
        }

        public static TableSchema.TableColumn ContactTitleColumn
        {
            get { return Schema.Columns[3]; }
        }

        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[4]; }
        }

        public static TableSchema.TableColumn CityColumn
        {
            get { return Schema.Columns[5]; }
        }

        public static TableSchema.TableColumn RegionColumn
        {
            get { return Schema.Columns[6]; }
        }

        public static TableSchema.TableColumn PostalCodeColumn
        {
            get { return Schema.Columns[7]; }
        }

        public static TableSchema.TableColumn CountryColumn
        {
            get { return Schema.Columns[8]; }
        }

        public static TableSchema.TableColumn PhoneColumn
        {
            get { return Schema.Columns[9]; }
        }

        public static TableSchema.TableColumn FaxColumn
        {
            get { return Schema.Columns[10]; }
        }

        public static TableSchema.TableColumn HomePageColumn
        {
            get { return Schema.Columns[11]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string SupplierID = @"SupplierID";
            public static string CompanyName = @"CompanyName";
            public static string ContactName = @"ContactName";
            public static string ContactTitle = @"ContactTitle";
            public static string Address = @"Address";
            public static string City = @"City";
            public static string Region = @"Region";
            public static string PostalCode = @"PostalCode";
            public static string Country = @"Country";
            public static string Phone = @"Phone";
            public static string Fax = @"Fax";
            public static string HomePage = @"HomePage";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the Order class.
    /// </summary>
    [Serializable]
    public partial class OrderCollection : ActiveList<Order, OrderCollection>
    {
        public OrderCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>OrderCollection</returns>
        public OrderCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Order o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [Orders] table.
    /// </summary>
    [Serializable]
    public class Order : ActiveRecord<Order>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public Order()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public Order(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Order(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Order(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Orders", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnOrderID = new TableSchema.TableColumn(schema);
                columnOrderID.ColumnName = "OrderID";
                columnOrderID.DataType = DbType.Int32;
                columnOrderID.MaxLength = 0;
                columnOrderID.AutoIncrement = true;
                columnOrderID.IsNullable = false;
                columnOrderID.IsPrimaryKey = true;
                columnOrderID.IsForeignKey = false;
                columnOrderID.IsReadOnly = true;
                schema.Columns.Add(columnOrderID);

                TableSchema.TableColumn columnCustomerID = new TableSchema.TableColumn(schema);
                columnCustomerID.ColumnName = "CustomerID";
                columnCustomerID.DataType = DbType.StringFixedLength;
                columnCustomerID.MaxLength = 5;
                columnCustomerID.AutoIncrement = false;
                columnCustomerID.IsNullable = true;
                columnCustomerID.IsPrimaryKey = false;
                columnCustomerID.IsForeignKey = true;
                columnCustomerID.ForeignKeyTableName = "Orders";
                columnCustomerID.IsReadOnly = false;
                schema.Columns.Add(columnCustomerID);

                TableSchema.TableColumn columnEmployeeID = new TableSchema.TableColumn(schema);
                columnEmployeeID.ColumnName = "EmployeeID";
                columnEmployeeID.DataType = DbType.Int32;
                columnEmployeeID.MaxLength = 0;
                columnEmployeeID.AutoIncrement = false;
                columnEmployeeID.IsNullable = true;
                columnEmployeeID.IsPrimaryKey = false;
                columnEmployeeID.IsForeignKey = true;
                columnEmployeeID.ForeignKeyTableName = "Orders";
                columnEmployeeID.IsReadOnly = false;
                schema.Columns.Add(columnEmployeeID);

                TableSchema.TableColumn columnOrderDate = new TableSchema.TableColumn(schema);
                columnOrderDate.ColumnName = "OrderDate";
                columnOrderDate.DataType = DbType.DateTime;
                columnOrderDate.MaxLength = 0;
                columnOrderDate.AutoIncrement = false;
                columnOrderDate.IsNullable = true;
                columnOrderDate.IsPrimaryKey = false;
                columnOrderDate.IsForeignKey = false;
                columnOrderDate.IsReadOnly = false;
                schema.Columns.Add(columnOrderDate);

                TableSchema.TableColumn columnRequiredDate = new TableSchema.TableColumn(schema);
                columnRequiredDate.ColumnName = "RequiredDate";
                columnRequiredDate.DataType = DbType.DateTime;
                columnRequiredDate.MaxLength = 0;
                columnRequiredDate.AutoIncrement = false;
                columnRequiredDate.IsNullable = true;
                columnRequiredDate.IsPrimaryKey = false;
                columnRequiredDate.IsForeignKey = false;
                columnRequiredDate.IsReadOnly = false;
                schema.Columns.Add(columnRequiredDate);

                TableSchema.TableColumn columnShippedDate = new TableSchema.TableColumn(schema);
                columnShippedDate.ColumnName = "ShippedDate";
                columnShippedDate.DataType = DbType.DateTime;
                columnShippedDate.MaxLength = 0;
                columnShippedDate.AutoIncrement = false;
                columnShippedDate.IsNullable = true;
                columnShippedDate.IsPrimaryKey = false;
                columnShippedDate.IsForeignKey = false;
                columnShippedDate.IsReadOnly = false;
                schema.Columns.Add(columnShippedDate);

                TableSchema.TableColumn columnShipVia = new TableSchema.TableColumn(schema);
                columnShipVia.ColumnName = "ShipVia";
                columnShipVia.DataType = DbType.Int32;
                columnShipVia.MaxLength = 0;
                columnShipVia.AutoIncrement = false;
                columnShipVia.IsNullable = true;
                columnShipVia.IsPrimaryKey = false;
                columnShipVia.IsForeignKey = true;
                columnShipVia.ForeignKeyTableName = "Orders";
                columnShipVia.IsReadOnly = false;
                schema.Columns.Add(columnShipVia);

                TableSchema.TableColumn columnFreight = new TableSchema.TableColumn(schema);
                columnFreight.ColumnName = "Freight";
                columnFreight.DataType = DbType.Currency;
                columnFreight.MaxLength = 0;
                columnFreight.AutoIncrement = false;
                columnFreight.IsNullable = true;
                columnFreight.IsPrimaryKey = false;
                columnFreight.IsForeignKey = false;
                columnFreight.IsReadOnly = false;
                schema.Columns.Add(columnFreight);

                TableSchema.TableColumn columnShipName = new TableSchema.TableColumn(schema);
                columnShipName.ColumnName = "ShipName";
                columnShipName.DataType = DbType.String;
                columnShipName.MaxLength = 40;
                columnShipName.AutoIncrement = false;
                columnShipName.IsNullable = true;
                columnShipName.IsPrimaryKey = false;
                columnShipName.IsForeignKey = false;
                columnShipName.IsReadOnly = false;
                schema.Columns.Add(columnShipName);

                TableSchema.TableColumn columnShipAddress = new TableSchema.TableColumn(schema);
                columnShipAddress.ColumnName = "ShipAddress";
                columnShipAddress.DataType = DbType.String;
                columnShipAddress.MaxLength = 60;
                columnShipAddress.AutoIncrement = false;
                columnShipAddress.IsNullable = true;
                columnShipAddress.IsPrimaryKey = false;
                columnShipAddress.IsForeignKey = false;
                columnShipAddress.IsReadOnly = false;
                schema.Columns.Add(columnShipAddress);

                TableSchema.TableColumn columnShipCity = new TableSchema.TableColumn(schema);
                columnShipCity.ColumnName = "ShipCity";
                columnShipCity.DataType = DbType.String;
                columnShipCity.MaxLength = 15;
                columnShipCity.AutoIncrement = false;
                columnShipCity.IsNullable = true;
                columnShipCity.IsPrimaryKey = false;
                columnShipCity.IsForeignKey = false;
                columnShipCity.IsReadOnly = false;
                schema.Columns.Add(columnShipCity);

                TableSchema.TableColumn columnShipRegion = new TableSchema.TableColumn(schema);
                columnShipRegion.ColumnName = "ShipRegion";
                columnShipRegion.DataType = DbType.String;
                columnShipRegion.MaxLength = 15;
                columnShipRegion.AutoIncrement = false;
                columnShipRegion.IsNullable = true;
                columnShipRegion.IsPrimaryKey = false;
                columnShipRegion.IsForeignKey = false;
                columnShipRegion.IsReadOnly = false;
                schema.Columns.Add(columnShipRegion);

                TableSchema.TableColumn columnShipPostalCode = new TableSchema.TableColumn(schema);
                columnShipPostalCode.ColumnName = "ShipPostalCode";
                columnShipPostalCode.DataType = DbType.String;
                columnShipPostalCode.MaxLength = 10;
                columnShipPostalCode.AutoIncrement = false;
                columnShipPostalCode.IsNullable = true;
                columnShipPostalCode.IsPrimaryKey = false;
                columnShipPostalCode.IsForeignKey = false;
                columnShipPostalCode.IsReadOnly = false;
                schema.Columns.Add(columnShipPostalCode);

                TableSchema.TableColumn columnShipCountry = new TableSchema.TableColumn(schema);
                columnShipCountry.ColumnName = "ShipCountry";
                columnShipCountry.DataType = DbType.String;
                columnShipCountry.MaxLength = 15;
                columnShipCountry.AutoIncrement = false;
                columnShipCountry.IsNullable = true;
                columnShipCountry.IsPrimaryKey = false;
                columnShipCountry.IsForeignKey = false;
                columnShipCountry.IsReadOnly = false;
                schema.Columns.Add(columnShipCountry);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Orders", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public int OrderID
        {
            get { return GetColumnValue<int>(Columns.OrderID); }
            set { SetColumnValue(Columns.OrderID, value); }
        }

        [XmlAttribute("CustomerID")]
        [Bindable(true)]
        public string CustomerID
        {
            get { return GetColumnValue<string>(Columns.CustomerID); }
            set { SetColumnValue(Columns.CustomerID, value); }
        }

        [XmlAttribute("EmployeeID")]
        [Bindable(true)]
        public int EmployeeID
        {
            get { return GetColumnValue<int>(Columns.EmployeeID); }
            set { SetColumnValue(Columns.EmployeeID, value); }
        }

        [XmlAttribute("OrderDate")]
        [Bindable(true)]
        public DateTime OrderDate
        {
            get { return GetColumnValue<DateTime>(Columns.OrderDate); }
            set { SetColumnValue(Columns.OrderDate, value); }
        }

        [XmlAttribute("RequiredDate")]
        [Bindable(true)]
        public DateTime RequiredDate
        {
            get { return GetColumnValue<DateTime>(Columns.RequiredDate); }
            set { SetColumnValue(Columns.RequiredDate, value); }
        }

        [XmlAttribute("ShippedDate")]
        [Bindable(true)]
        public DateTime ShippedDate
        {
            get { return GetColumnValue<DateTime>(Columns.ShippedDate); }
            set { SetColumnValue(Columns.ShippedDate, value); }
        }

        [XmlAttribute("ShipVia")]
        [Bindable(true)]
        public int ShipVia
        {
            get { return GetColumnValue<int>(Columns.ShipVia); }
            set { SetColumnValue(Columns.ShipVia, value); }
        }

        [XmlAttribute("Freight")]
        [Bindable(true)]
        public decimal Freight
        {
            get { return GetColumnValue<decimal>(Columns.Freight); }
            set { SetColumnValue(Columns.Freight, value); }
        }

        [XmlAttribute("ShipName")]
        [Bindable(true)]
        public string ShipName
        {
            get { return GetColumnValue<string>(Columns.ShipName); }
            set { SetColumnValue(Columns.ShipName, value); }
        }

        [XmlAttribute("ShipAddress")]
        [Bindable(true)]
        public string ShipAddress
        {
            get { return GetColumnValue<string>(Columns.ShipAddress); }
            set { SetColumnValue(Columns.ShipAddress, value); }
        }

        [XmlAttribute("ShipCity")]
        [Bindable(true)]
        public string ShipCity
        {
            get { return GetColumnValue<string>(Columns.ShipCity); }
            set { SetColumnValue(Columns.ShipCity, value); }
        }

        [XmlAttribute("ShipRegion")]
        [Bindable(true)]
        public string ShipRegion
        {
            get { return GetColumnValue<string>(Columns.ShipRegion); }
            set { SetColumnValue(Columns.ShipRegion, value); }
        }

        [XmlAttribute("ShipPostalCode")]
        [Bindable(true)]
        public string ShipPostalCode
        {
            get { return GetColumnValue<string>(Columns.ShipPostalCode); }
            set { SetColumnValue(Columns.ShipPostalCode, value); }
        }

        [XmlAttribute("ShipCountry")]
        [Bindable(true)]
        public string ShipCountry
        {
            get { return GetColumnValue<string>(Columns.ShipCountry); }
            set { SetColumnValue(Columns.ShipCountry, value); }
        }

        #endregion

        #region ' Primary key relations' Methods '

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            SetPKValues();
        }

        public Northwind.OrderDetailCollection OrderDetailsRecords()
        {
            return new Northwind.OrderDetailCollection().Where(OrderDetail.Columns.OrderID, OrderID).Load();
        }


        #endregion

        #region ' Foreign key relations Methods '

        /// <summary>
        /// Returns a Customer ActiveRecord object related to this Order
        ///
        /// </summary>
        public Northwind.Customer CustomerRecord
        {
            get { return Northwind.Customer.FetchByID(this.CustomerID); }
            set { SetColumnValue("CustomerID", value.CustomerID); }
        }

        /// <summary>
        /// Returns a Employee ActiveRecord object related to this Order
        ///
        /// </summary>
        public Northwind.Employee EmployeeRecord
        {
            get { return Northwind.Employee.FetchByID(this.EmployeeID); }
            set { SetColumnValue("EmployeeID", value.EmployeeID); }
        }

        /// <summary>
        /// Returns a Shipper ActiveRecord object related to this Order
        ///
        /// </summary>
        public Northwind.Shipper ShipperRecord
        {
            get { return Northwind.Shipper.FetchByID(this.ShipVia); }
            set { SetColumnValue("ShipVia", value.ShipperID); }
        }


        #endregion

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int OrderID, string CustomerID, int EmployeeID, DateTime OrderDate, DateTime RequiredDate, DateTime ShippedDate, int ShipVia, decimal Freight, string ShipName, string ShipAddress, string ShipCity, string ShipRegion, string ShipPostalCode, string ShipCountry)
        {
            Order item = new Order();
            item.OrderID = OrderID;
            item.CustomerID = CustomerID;
            item.EmployeeID = EmployeeID;
            item.OrderDate = OrderDate;
            item.RequiredDate = RequiredDate;
            item.ShippedDate = ShippedDate;
            item.ShipVia = ShipVia;
            item.Freight = Freight;
            item.ShipName = ShipName;
            item.ShipAddress = ShipAddress;
            item.ShipCity = ShipCity;
            item.ShipRegion = ShipRegion;
            item.ShipPostalCode = ShipPostalCode;
            item.ShipCountry = ShipCountry;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string CustomerID, int EmployeeID, DateTime OrderDate, DateTime RequiredDate, DateTime ShippedDate, int ShipVia, decimal Freight, string ShipName, string ShipAddress, string ShipCity, string ShipRegion, string ShipPostalCode, string ShipCountry)
        {
            Order item = new Order();
            item.CustomerID = CustomerID;
            item.EmployeeID = EmployeeID;
            item.OrderDate = OrderDate;
            item.RequiredDate = RequiredDate;
            item.ShippedDate = ShippedDate;
            item.ShipVia = ShipVia;
            item.Freight = Freight;
            item.ShipName = ShipName;
            item.ShipAddress = ShipAddress;
            item.ShipCity = ShipCity;
            item.ShipRegion = ShipRegion;
            item.ShipPostalCode = ShipPostalCode;
            item.ShipCountry = ShipCountry;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn OrderIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn CustomerIDColumn
        {
            get { return Schema.Columns[1]; }
        }

        public static TableSchema.TableColumn EmployeeIDColumn
        {
            get { return Schema.Columns[2]; }
        }

        public static TableSchema.TableColumn OrderDateColumn
        {
            get { return Schema.Columns[3]; }
        }

        public static TableSchema.TableColumn RequiredDateColumn
        {
            get { return Schema.Columns[4]; }
        }

        public static TableSchema.TableColumn ShippedDateColumn
        {
            get { return Schema.Columns[5]; }
        }

        public static TableSchema.TableColumn ShipViaColumn
        {
            get { return Schema.Columns[6]; }
        }

        public static TableSchema.TableColumn FreightColumn
        {
            get { return Schema.Columns[7]; }
        }

        public static TableSchema.TableColumn ShipNameColumn
        {
            get { return Schema.Columns[8]; }
        }

        public static TableSchema.TableColumn ShipAddressColumn
        {
            get { return Schema.Columns[9]; }
        }

        public static TableSchema.TableColumn ShipCityColumn
        {
            get { return Schema.Columns[10]; }
        }

        public static TableSchema.TableColumn ShipRegionColumn
        {
            get { return Schema.Columns[11]; }
        }

        public static TableSchema.TableColumn ShipPostalCodeColumn
        {
            get { return Schema.Columns[12]; }
        }

        public static TableSchema.TableColumn ShipCountryColumn
        {
            get { return Schema.Columns[13]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string OrderID = @"OrderID";
            public static string CustomerID = @"CustomerID";
            public static string EmployeeID = @"EmployeeID";
            public static string OrderDate = @"OrderDate";
            public static string RequiredDate = @"RequiredDate";
            public static string ShippedDate = @"ShippedDate";
            public static string ShipVia = @"ShipVia";
            public static string Freight = @"Freight";
            public static string ShipName = @"ShipName";
            public static string ShipAddress = @"ShipAddress";
            public static string ShipCity = @"ShipCity";
            public static string ShipRegion = @"ShipRegion";
            public static string ShipPostalCode = @"ShipPostalCode";
            public static string ShipCountry = @"ShipCountry";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the Product class.
    /// </summary>
    [Serializable]
    public partial class ProductCollection : ActiveList<Product, ProductCollection>
    {
        public ProductCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ProductCollection</returns>
        public ProductCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Product o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [Products] table.
    /// </summary>
    [Serializable]
    public class Product : ActiveRecord<Product>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public Product()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public Product(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Product(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Product(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Products", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnProductID = new TableSchema.TableColumn(schema);
                columnProductID.ColumnName = "ProductID";
                columnProductID.DataType = DbType.Int32;
                columnProductID.MaxLength = 0;
                columnProductID.AutoIncrement = true;
                columnProductID.IsNullable = false;
                columnProductID.IsPrimaryKey = true;
                columnProductID.IsForeignKey = false;
                columnProductID.IsReadOnly = true;
                schema.Columns.Add(columnProductID);

                TableSchema.TableColumn columnProductName = new TableSchema.TableColumn(schema);
                columnProductName.ColumnName = "ProductName";
                columnProductName.DataType = DbType.String;
                columnProductName.MaxLength = 40;
                columnProductName.AutoIncrement = false;
                columnProductName.IsNullable = false;
                columnProductName.IsPrimaryKey = false;
                columnProductName.IsForeignKey = false;
                columnProductName.IsReadOnly = false;
                schema.Columns.Add(columnProductName);

                TableSchema.TableColumn columnSupplierID = new TableSchema.TableColumn(schema);
                columnSupplierID.ColumnName = "SupplierID";
                columnSupplierID.DataType = DbType.Int32;
                columnSupplierID.MaxLength = 0;
                columnSupplierID.AutoIncrement = false;
                columnSupplierID.IsNullable = true;
                columnSupplierID.IsPrimaryKey = false;
                columnSupplierID.IsForeignKey = true;
                columnSupplierID.ForeignKeyTableName = "Products";
                columnSupplierID.IsReadOnly = false;
                schema.Columns.Add(columnSupplierID);

                TableSchema.TableColumn columnCategoryID = new TableSchema.TableColumn(schema);
                columnCategoryID.ColumnName = "CategoryID";
                columnCategoryID.DataType = DbType.Int32;
                columnCategoryID.MaxLength = 0;
                columnCategoryID.AutoIncrement = false;
                columnCategoryID.IsNullable = true;
                columnCategoryID.IsPrimaryKey = false;
                columnCategoryID.IsForeignKey = true;
                columnCategoryID.ForeignKeyTableName = "Products";
                columnCategoryID.IsReadOnly = false;
                schema.Columns.Add(columnCategoryID);

                TableSchema.TableColumn columnQuantityPerUnit = new TableSchema.TableColumn(schema);
                columnQuantityPerUnit.ColumnName = "QuantityPerUnit";
                columnQuantityPerUnit.DataType = DbType.String;
                columnQuantityPerUnit.MaxLength = 20;
                columnQuantityPerUnit.AutoIncrement = false;
                columnQuantityPerUnit.IsNullable = true;
                columnQuantityPerUnit.IsPrimaryKey = false;
                columnQuantityPerUnit.IsForeignKey = false;
                columnQuantityPerUnit.IsReadOnly = false;
                schema.Columns.Add(columnQuantityPerUnit);

                TableSchema.TableColumn columnUnitPrice = new TableSchema.TableColumn(schema);
                columnUnitPrice.ColumnName = "UnitPrice";
                columnUnitPrice.DataType = DbType.Currency;
                columnUnitPrice.MaxLength = 0;
                columnUnitPrice.AutoIncrement = false;
                columnUnitPrice.IsNullable = true;
                columnUnitPrice.IsPrimaryKey = false;
                columnUnitPrice.IsForeignKey = false;
                columnUnitPrice.IsReadOnly = false;
                schema.Columns.Add(columnUnitPrice);

                TableSchema.TableColumn columnUnitsInStock = new TableSchema.TableColumn(schema);
                columnUnitsInStock.ColumnName = "UnitsInStock";
                columnUnitsInStock.DataType = DbType.Int16;
                columnUnitsInStock.MaxLength = 0;
                columnUnitsInStock.AutoIncrement = false;
                columnUnitsInStock.IsNullable = true;
                columnUnitsInStock.IsPrimaryKey = false;
                columnUnitsInStock.IsForeignKey = false;
                columnUnitsInStock.IsReadOnly = false;
                schema.Columns.Add(columnUnitsInStock);

                TableSchema.TableColumn columnUnitsOnOrder = new TableSchema.TableColumn(schema);
                columnUnitsOnOrder.ColumnName = "UnitsOnOrder";
                columnUnitsOnOrder.DataType = DbType.Int16;
                columnUnitsOnOrder.MaxLength = 0;
                columnUnitsOnOrder.AutoIncrement = false;
                columnUnitsOnOrder.IsNullable = true;
                columnUnitsOnOrder.IsPrimaryKey = false;
                columnUnitsOnOrder.IsForeignKey = false;
                columnUnitsOnOrder.IsReadOnly = false;
                schema.Columns.Add(columnUnitsOnOrder);

                TableSchema.TableColumn columnReorderLevel = new TableSchema.TableColumn(schema);
                columnReorderLevel.ColumnName = "ReorderLevel";
                columnReorderLevel.DataType = DbType.Int16;
                columnReorderLevel.MaxLength = 0;
                columnReorderLevel.AutoIncrement = false;
                columnReorderLevel.IsNullable = true;
                columnReorderLevel.IsPrimaryKey = false;
                columnReorderLevel.IsForeignKey = false;
                columnReorderLevel.IsReadOnly = false;
                schema.Columns.Add(columnReorderLevel);

                TableSchema.TableColumn columnDiscontinued = new TableSchema.TableColumn(schema);
                columnDiscontinued.ColumnName = "Discontinued";
                columnDiscontinued.DataType = DbType.Boolean;
                columnDiscontinued.MaxLength = 0;
                columnDiscontinued.AutoIncrement = false;
                columnDiscontinued.IsNullable = false;
                columnDiscontinued.IsPrimaryKey = false;
                columnDiscontinued.IsForeignKey = false;
                columnDiscontinued.IsReadOnly = false;
                schema.Columns.Add(columnDiscontinued);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Products", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("ProductID")]
        [Bindable(true)]
        public int ProductID
        {
            get { return GetColumnValue<int>(Columns.ProductID); }
            set { SetColumnValue(Columns.ProductID, value); }
        }

        [XmlAttribute("ProductName")]
        [Bindable(true)]
        public string ProductName
        {
            get { return GetColumnValue<string>(Columns.ProductName); }
            set { SetColumnValue(Columns.ProductName, value); }
        }

        [XmlAttribute("SupplierID")]
        [Bindable(true)]
        public int SupplierID
        {
            get { return GetColumnValue<int>(Columns.SupplierID); }
            set { SetColumnValue(Columns.SupplierID, value); }
        }

        [XmlAttribute("CategoryID")]
        [Bindable(true)]
        public int CategoryID
        {
            get { return GetColumnValue<int>(Columns.CategoryID); }
            set { SetColumnValue(Columns.CategoryID, value); }
        }

        [XmlAttribute("QuantityPerUnit")]
        [Bindable(true)]
        public string QuantityPerUnit
        {
            get { return GetColumnValue<string>(Columns.QuantityPerUnit); }
            set { SetColumnValue(Columns.QuantityPerUnit, value); }
        }

        [XmlAttribute("UnitPrice")]
        [Bindable(true)]
        public decimal UnitPrice
        {
            get { return GetColumnValue<decimal>(Columns.UnitPrice); }
            set { SetColumnValue(Columns.UnitPrice, value); }
        }

        [XmlAttribute("UnitsInStock")]
        [Bindable(true)]
        public short UnitsInStock
        {
            get { return GetColumnValue<short>(Columns.UnitsInStock); }
            set { SetColumnValue(Columns.UnitsInStock, value); }
        }

        [XmlAttribute("UnitsOnOrder")]
        [Bindable(true)]
        public short UnitsOnOrder
        {
            get { return GetColumnValue<short>(Columns.UnitsOnOrder); }
            set { SetColumnValue(Columns.UnitsOnOrder, value); }
        }

        [XmlAttribute("ReorderLevel")]
        [Bindable(true)]
        public short ReorderLevel
        {
            get { return GetColumnValue<short>(Columns.ReorderLevel); }
            set { SetColumnValue(Columns.ReorderLevel, value); }
        }

        [XmlAttribute("Discontinued")]
        [Bindable(true)]
        public bool Discontinued
        {
            get { return GetColumnValue<bool>(Columns.Discontinued); }
            set { SetColumnValue(Columns.Discontinued, value); }
        }

        #endregion

        #region ' Primary key relations' Methods '

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            SetPKValues();
        }

        public Northwind.OrderDetailCollection OrderDetailsRecords()
        {
            return new Northwind.OrderDetailCollection().Where(OrderDetail.Columns.ProductID, ProductID).Load();
        }


        #endregion

        #region ' Foreign key relations Methods '

        /// <summary>
        /// Returns a Category ActiveRecord object related to this Product
        ///
        /// </summary>
        public Northwind.Category CategoryRecord
        {
            get { return Northwind.Category.FetchByID(this.CategoryID); }
            set { SetColumnValue("CategoryID", value.CategoryID); }
        }

        /// <summary>
        /// Returns a Supplier ActiveRecord object related to this Product
        ///
        /// </summary>
        public Northwind.Supplier SupplierRecord
        {
            get { return Northwind.Supplier.FetchByID(this.SupplierID); }
            set { SetColumnValue("SupplierID", value.SupplierID); }
        }


        #endregion

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int ProductID, string ProductName, int SupplierID, int CategoryID, string QuantityPerUnit, decimal UnitPrice, short UnitsInStock, short UnitsOnOrder, short ReorderLevel, bool Discontinued)
        {
            Product item = new Product();
            item.ProductID = ProductID;
            item.ProductName = ProductName;
            item.SupplierID = SupplierID;
            item.CategoryID = CategoryID;
            item.QuantityPerUnit = QuantityPerUnit;
            item.UnitPrice = UnitPrice;
            item.UnitsInStock = UnitsInStock;
            item.UnitsOnOrder = UnitsOnOrder;
            item.ReorderLevel = ReorderLevel;
            item.Discontinued = Discontinued;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string ProductName, int SupplierID, int CategoryID, string QuantityPerUnit, decimal UnitPrice, short UnitsInStock, short UnitsOnOrder, short ReorderLevel, bool Discontinued)
        {
            Product item = new Product();
            item.ProductName = ProductName;
            item.SupplierID = SupplierID;
            item.CategoryID = CategoryID;
            item.QuantityPerUnit = QuantityPerUnit;
            item.UnitPrice = UnitPrice;
            item.UnitsInStock = UnitsInStock;
            item.UnitsOnOrder = UnitsOnOrder;
            item.ReorderLevel = ReorderLevel;
            item.Discontinued = Discontinued;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn ProductIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn ProductNameColumn
        {
            get { return Schema.Columns[1]; }
        }

        public static TableSchema.TableColumn SupplierIDColumn
        {
            get { return Schema.Columns[2]; }
        }

        public static TableSchema.TableColumn CategoryIDColumn
        {
            get { return Schema.Columns[3]; }
        }

        public static TableSchema.TableColumn QuantityPerUnitColumn
        {
            get { return Schema.Columns[4]; }
        }

        public static TableSchema.TableColumn UnitPriceColumn
        {
            get { return Schema.Columns[5]; }
        }

        public static TableSchema.TableColumn UnitsInStockColumn
        {
            get { return Schema.Columns[6]; }
        }

        public static TableSchema.TableColumn UnitsOnOrderColumn
        {
            get { return Schema.Columns[7]; }
        }

        public static TableSchema.TableColumn ReorderLevelColumn
        {
            get { return Schema.Columns[8]; }
        }

        public static TableSchema.TableColumn DiscontinuedColumn
        {
            get { return Schema.Columns[9]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string ProductID = @"ProductID";
            public static string ProductName = @"ProductName";
            public static string SupplierID = @"SupplierID";
            public static string CategoryID = @"CategoryID";
            public static string QuantityPerUnit = @"QuantityPerUnit";
            public static string UnitPrice = @"UnitPrice";
            public static string UnitsInStock = @"UnitsInStock";
            public static string UnitsOnOrder = @"UnitsOnOrder";
            public static string ReorderLevel = @"ReorderLevel";
            public static string Discontinued = @"Discontinued";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the OrderDetail class.
    /// </summary>
    [Serializable]
    public partial class OrderDetailCollection : ActiveList<OrderDetail, OrderDetailCollection>
    {
        public OrderDetailCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>OrderDetailCollection</returns>
        public OrderDetailCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                OrderDetail o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [Order Details] table.
    /// </summary>
    [Serializable]
    public class OrderDetail : ActiveRecord<OrderDetail>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public OrderDetail()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public OrderDetail(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public OrderDetail(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public OrderDetail(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Order Details", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnOrderID = new TableSchema.TableColumn(schema);
                columnOrderID.ColumnName = "OrderID";
                columnOrderID.DataType = DbType.Int32;
                columnOrderID.MaxLength = 0;
                columnOrderID.AutoIncrement = false;
                columnOrderID.IsNullable = false;
                columnOrderID.IsPrimaryKey = true;
                columnOrderID.IsForeignKey = true;
                columnOrderID.ForeignKeyTableName = "Order Details";
                columnOrderID.IsReadOnly = false;
                schema.Columns.Add(columnOrderID);

                TableSchema.TableColumn columnProductID = new TableSchema.TableColumn(schema);
                columnProductID.ColumnName = "ProductID";
                columnProductID.DataType = DbType.Int32;
                columnProductID.MaxLength = 0;
                columnProductID.AutoIncrement = false;
                columnProductID.IsNullable = false;
                columnProductID.IsPrimaryKey = true;
                columnProductID.IsForeignKey = true;
                columnProductID.ForeignKeyTableName = "Order Details";
                columnProductID.IsReadOnly = false;
                schema.Columns.Add(columnProductID);

                TableSchema.TableColumn columnUnitPrice = new TableSchema.TableColumn(schema);
                columnUnitPrice.ColumnName = "UnitPrice";
                columnUnitPrice.DataType = DbType.Currency;
                columnUnitPrice.MaxLength = 0;
                columnUnitPrice.AutoIncrement = false;
                columnUnitPrice.IsNullable = false;
                columnUnitPrice.IsPrimaryKey = false;
                columnUnitPrice.IsForeignKey = false;
                columnUnitPrice.IsReadOnly = false;
                schema.Columns.Add(columnUnitPrice);

                TableSchema.TableColumn columnQuantity = new TableSchema.TableColumn(schema);
                columnQuantity.ColumnName = "Quantity";
                columnQuantity.DataType = DbType.Int16;
                columnQuantity.MaxLength = 0;
                columnQuantity.AutoIncrement = false;
                columnQuantity.IsNullable = false;
                columnQuantity.IsPrimaryKey = false;
                columnQuantity.IsForeignKey = false;
                columnQuantity.IsReadOnly = false;
                schema.Columns.Add(columnQuantity);

                TableSchema.TableColumn columnDiscount = new TableSchema.TableColumn(schema);
                columnDiscount.ColumnName = "Discount";
                columnDiscount.DataType = DbType.Single;
                columnDiscount.MaxLength = 0;
                columnDiscount.AutoIncrement = false;
                columnDiscount.IsNullable = false;
                columnDiscount.IsPrimaryKey = false;
                columnDiscount.IsForeignKey = false;
                columnDiscount.IsReadOnly = false;
                schema.Columns.Add(columnDiscount);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Order Details", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public int OrderID
        {
            get { return GetColumnValue<int>(Columns.OrderID); }
            set { SetColumnValue(Columns.OrderID, value); }
        }

        [XmlAttribute("ProductID")]
        [Bindable(true)]
        public int ProductID
        {
            get { return GetColumnValue<int>(Columns.ProductID); }
            set { SetColumnValue(Columns.ProductID, value); }
        }

        [XmlAttribute("UnitPrice")]
        [Bindable(true)]
        public decimal UnitPrice
        {
            get { return GetColumnValue<decimal>(Columns.UnitPrice); }
            set { SetColumnValue(Columns.UnitPrice, value); }
        }

        [XmlAttribute("Quantity")]
        [Bindable(true)]
        public short Quantity
        {
            get { return GetColumnValue<short>(Columns.Quantity); }
            set { SetColumnValue(Columns.Quantity, value); }
        }

        [XmlAttribute("Discount")]
        [Bindable(true)]
        public float Discount
        {
            get { return GetColumnValue<float>(Columns.Discount); }
            set { SetColumnValue(Columns.Discount, value); }
        }

        #endregion

        // There are no primary key relations

        #region ' Foreign key relations Methods '

        /// <summary>
        /// Returns a Order ActiveRecord object related to this OrderDetail
        ///
        /// </summary>
        public Northwind.Order OrderRecord
        {
            get { return Northwind.Order.FetchByID(this.OrderID); }
            set { SetColumnValue("OrderID", value.OrderID); }
        }

        /// <summary>
        /// Returns a Product ActiveRecord object related to this OrderDetail
        ///
        /// </summary>
        public Northwind.Product ProductRecord
        {
            get { return Northwind.Product.FetchByID(this.ProductID); }
            set { SetColumnValue("ProductID", value.ProductID); }
        }


        #endregion

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int OrderID, int ProductID, decimal UnitPrice, short Quantity, float Discount)
        {
            OrderDetail item = new OrderDetail();
            item.OrderID = OrderID;
            item.ProductID = ProductID;
            item.UnitPrice = UnitPrice;
            item.Quantity = Quantity;
            item.Discount = Discount;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int OrderID, int ProductID, decimal UnitPrice, short Quantity, float Discount)
        {
            OrderDetail item = new OrderDetail();
            item.OrderID = OrderID;
            item.ProductID = ProductID;
            item.UnitPrice = UnitPrice;
            item.Quantity = Quantity;
            item.Discount = Discount;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn OrderIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn ProductIDColumn
        {
            get { return Schema.Columns[1]; }
        }

        public static TableSchema.TableColumn UnitPriceColumn
        {
            get { return Schema.Columns[2]; }
        }

        public static TableSchema.TableColumn QuantityColumn
        {
            get { return Schema.Columns[3]; }
        }

        public static TableSchema.TableColumn DiscountColumn
        {
            get { return Schema.Columns[4]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string OrderID = @"OrderID";
            public static string ProductID = @"ProductID";
            public static string UnitPrice = @"UnitPrice";
            public static string Quantity = @"Quantity";
            public static string Discount = @"Discount";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the CustomerCustomerDemo class.
    /// </summary>
    [Serializable]
    public partial class CustomerCustomerDemoCollection : ActiveList<CustomerCustomerDemo, CustomerCustomerDemoCollection>
    {
        public CustomerCustomerDemoCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CustomerCustomerDemoCollection</returns>
        public CustomerCustomerDemoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                CustomerCustomerDemo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [CustomerCustomerDemo] table.
    /// </summary>
    [Serializable]
    public class CustomerCustomerDemo : ActiveRecord<CustomerCustomerDemo>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public CustomerCustomerDemo()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public CustomerCustomerDemo(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public CustomerCustomerDemo(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public CustomerCustomerDemo(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("CustomerCustomerDemo", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnCustomerID = new TableSchema.TableColumn(schema);
                columnCustomerID.ColumnName = "CustomerID";
                columnCustomerID.DataType = DbType.StringFixedLength;
                columnCustomerID.MaxLength = 5;
                columnCustomerID.AutoIncrement = false;
                columnCustomerID.IsNullable = false;
                columnCustomerID.IsPrimaryKey = true;
                columnCustomerID.IsForeignKey = true;
                columnCustomerID.ForeignKeyTableName = "CustomerCustomerDemo";
                columnCustomerID.IsReadOnly = false;
                schema.Columns.Add(columnCustomerID);

                TableSchema.TableColumn columnCustomerTypeID = new TableSchema.TableColumn(schema);
                columnCustomerTypeID.ColumnName = "CustomerTypeID";
                columnCustomerTypeID.DataType = DbType.StringFixedLength;
                columnCustomerTypeID.MaxLength = 10;
                columnCustomerTypeID.AutoIncrement = false;
                columnCustomerTypeID.IsNullable = false;
                columnCustomerTypeID.IsPrimaryKey = true;
                columnCustomerTypeID.IsForeignKey = true;
                columnCustomerTypeID.ForeignKeyTableName = "CustomerCustomerDemo";
                columnCustomerTypeID.IsReadOnly = false;
                schema.Columns.Add(columnCustomerTypeID);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("CustomerCustomerDemo", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("CustomerID")]
        [Bindable(true)]
        public string CustomerID
        {
            get { return GetColumnValue<string>(Columns.CustomerID); }
            set { SetColumnValue(Columns.CustomerID, value); }
        }

        [XmlAttribute("CustomerTypeID")]
        [Bindable(true)]
        public string CustomerTypeID
        {
            get { return GetColumnValue<string>(Columns.CustomerTypeID); }
            set { SetColumnValue(Columns.CustomerTypeID, value); }
        }

        #endregion

        // There are no primary key relations

        #region ' Foreign key relations Methods '

        /// <summary>
        /// Returns a CustomerDemographic ActiveRecord object related to this CustomerCustomerDemo
        ///
        /// </summary>
        public Northwind.CustomerDemographic CustomerDemographicRecord
        {
            get { return Northwind.CustomerDemographic.FetchByID(this.CustomerTypeID); }
            set { SetColumnValue("CustomerTypeID", value.CustomerTypeID); }
        }

        /// <summary>
        /// Returns a Customer ActiveRecord object related to this CustomerCustomerDemo
        ///
        /// </summary>
        public Northwind.Customer CustomerRecord
        {
            get { return Northwind.Customer.FetchByID(this.CustomerID); }
            set { SetColumnValue("CustomerID", value.CustomerID); }
        }


        #endregion

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string CustomerID, string CustomerTypeID)
        {
            CustomerCustomerDemo item = new CustomerCustomerDemo();
            item.CustomerID = CustomerID;
            item.CustomerTypeID = CustomerTypeID;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string CustomerID, string CustomerTypeID)
        {
            CustomerCustomerDemo item = new CustomerCustomerDemo();
            item.CustomerID = CustomerID;
            item.CustomerTypeID = CustomerTypeID;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn CustomerIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn CustomerTypeIDColumn
        {
            get { return Schema.Columns[1]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string CustomerID = @"CustomerID";
            public static string CustomerTypeID = @"CustomerTypeID";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the CustomerDemographic class.
    /// </summary>
    [Serializable]
    public partial class CustomerDemographicCollection : ActiveList<CustomerDemographic, CustomerDemographicCollection>
    {
        public CustomerDemographicCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>CustomerDemographicCollection</returns>
        public CustomerDemographicCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                CustomerDemographic o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [CustomerDemographics] table.
    /// </summary>
    [Serializable]
    public class CustomerDemographic : ActiveRecord<CustomerDemographic>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public CustomerDemographic()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public CustomerDemographic(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public CustomerDemographic(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public CustomerDemographic(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("CustomerDemographics", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnCustomerTypeID = new TableSchema.TableColumn(schema);
                columnCustomerTypeID.ColumnName = "CustomerTypeID";
                columnCustomerTypeID.DataType = DbType.StringFixedLength;
                columnCustomerTypeID.MaxLength = 10;
                columnCustomerTypeID.AutoIncrement = false;
                columnCustomerTypeID.IsNullable = false;
                columnCustomerTypeID.IsPrimaryKey = true;
                columnCustomerTypeID.IsForeignKey = false;
                columnCustomerTypeID.IsReadOnly = false;
                schema.Columns.Add(columnCustomerTypeID);

                TableSchema.TableColumn columnCustomerDesc = new TableSchema.TableColumn(schema);
                columnCustomerDesc.ColumnName = "CustomerDesc";
                columnCustomerDesc.DataType = DbType.String;
                columnCustomerDesc.MaxLength = 1073741823;
                columnCustomerDesc.AutoIncrement = false;
                columnCustomerDesc.IsNullable = true;
                columnCustomerDesc.IsPrimaryKey = false;
                columnCustomerDesc.IsForeignKey = false;
                columnCustomerDesc.IsReadOnly = false;
                schema.Columns.Add(columnCustomerDesc);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("CustomerDemographics", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("CustomerTypeID")]
        [Bindable(true)]
        public string CustomerTypeID
        {
            get { return GetColumnValue<string>(Columns.CustomerTypeID); }
            set { SetColumnValue(Columns.CustomerTypeID, value); }
        }

        [XmlAttribute("CustomerDesc")]
        [Bindable(true)]
        public string CustomerDesc
        {
            get { return GetColumnValue<string>(Columns.CustomerDesc); }
            set { SetColumnValue(Columns.CustomerDesc, value); }
        }

        #endregion

        #region ' Primary key relations' Methods '

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            SetPKValues();
        }

        public Northwind.CustomerCustomerDemoCollection CustomerCustomerDemosRecords()
        {
            return new Northwind.CustomerCustomerDemoCollection().Where(CustomerCustomerDemo.Columns.CustomerTypeID, CustomerTypeID).Load();
        }


        #endregion

        // There are no foreign key relations

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string CustomerTypeID, string CustomerDesc)
        {
            CustomerDemographic item = new CustomerDemographic();
            item.CustomerTypeID = CustomerTypeID;
            item.CustomerDesc = CustomerDesc;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string CustomerTypeID, string CustomerDesc)
        {
            CustomerDemographic item = new CustomerDemographic();
            item.CustomerTypeID = CustomerTypeID;
            item.CustomerDesc = CustomerDesc;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn CustomerTypeIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn CustomerDescColumn
        {
            get { return Schema.Columns[1]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string CustomerTypeID = @"CustomerTypeID";
            public static string CustomerDesc = @"CustomerDesc";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the Region class.
    /// </summary>
    [Serializable]
    public partial class RegionCollection : ActiveList<Region, RegionCollection>
    {
        public RegionCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>RegionCollection</returns>
        public RegionCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Region o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [Region] table.
    /// </summary>
    [Serializable]
    public class Region : ActiveRecord<Region>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public Region()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public Region(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Region(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Region(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Region", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnRegionID = new TableSchema.TableColumn(schema);
                columnRegionID.ColumnName = "RegionID";
                columnRegionID.DataType = DbType.Int32;
                columnRegionID.MaxLength = 0;
                columnRegionID.AutoIncrement = false;
                columnRegionID.IsNullable = false;
                columnRegionID.IsPrimaryKey = true;
                columnRegionID.IsForeignKey = false;
                columnRegionID.IsReadOnly = false;
                schema.Columns.Add(columnRegionID);

                TableSchema.TableColumn columnRegionDescription = new TableSchema.TableColumn(schema);
                columnRegionDescription.ColumnName = "RegionDescription";
                columnRegionDescription.DataType = DbType.StringFixedLength;
                columnRegionDescription.MaxLength = 50;
                columnRegionDescription.AutoIncrement = false;
                columnRegionDescription.IsNullable = false;
                columnRegionDescription.IsPrimaryKey = false;
                columnRegionDescription.IsForeignKey = false;
                columnRegionDescription.IsReadOnly = false;
                schema.Columns.Add(columnRegionDescription);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Region", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("RegionID")]
        [Bindable(true)]
        public int RegionID
        {
            get { return GetColumnValue<int>(Columns.RegionID); }
            set { SetColumnValue(Columns.RegionID, value); }
        }

        [XmlAttribute("RegionDescription")]
        [Bindable(true)]
        public string RegionDescription
        {
            get { return GetColumnValue<string>(Columns.RegionDescription); }
            set { SetColumnValue(Columns.RegionDescription, value); }
        }

        #endregion

        #region ' Primary key relations' Methods '

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            SetPKValues();
        }

        public Northwind.TerritoryCollection TerritoriesRecords()
        {
            return new Northwind.TerritoryCollection().Where(Territory.Columns.RegionID, RegionID).Load();
        }


        #endregion

        // There are no foreign key relations

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int RegionID, string RegionDescription)
        {
            Region item = new Region();
            item.RegionID = RegionID;
            item.RegionDescription = RegionDescription;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int RegionID, string RegionDescription)
        {
            Region item = new Region();
            item.RegionID = RegionID;
            item.RegionDescription = RegionDescription;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn RegionIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn RegionDescriptionColumn
        {
            get { return Schema.Columns[1]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string RegionID = @"RegionID";
            public static string RegionDescription = @"RegionDescription";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the Territory class.
    /// </summary>
    [Serializable]
    public partial class TerritoryCollection : ActiveList<Territory, TerritoryCollection>
    {
        public TerritoryCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TerritoryCollection</returns>
        public TerritoryCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Territory o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [Territories] table.
    /// </summary>
    [Serializable]
    public class Territory : ActiveRecord<Territory>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public Territory()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public Territory(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Territory(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Territory(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Territories", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnTerritoryID = new TableSchema.TableColumn(schema);
                columnTerritoryID.ColumnName = "TerritoryID";
                columnTerritoryID.DataType = DbType.String;
                columnTerritoryID.MaxLength = 20;
                columnTerritoryID.AutoIncrement = false;
                columnTerritoryID.IsNullable = false;
                columnTerritoryID.IsPrimaryKey = true;
                columnTerritoryID.IsForeignKey = false;
                columnTerritoryID.IsReadOnly = false;
                schema.Columns.Add(columnTerritoryID);

                TableSchema.TableColumn columnTerritoryDescription = new TableSchema.TableColumn(schema);
                columnTerritoryDescription.ColumnName = "TerritoryDescription";
                columnTerritoryDescription.DataType = DbType.StringFixedLength;
                columnTerritoryDescription.MaxLength = 50;
                columnTerritoryDescription.AutoIncrement = false;
                columnTerritoryDescription.IsNullable = false;
                columnTerritoryDescription.IsPrimaryKey = false;
                columnTerritoryDescription.IsForeignKey = false;
                columnTerritoryDescription.IsReadOnly = false;
                schema.Columns.Add(columnTerritoryDescription);

                TableSchema.TableColumn columnRegionID = new TableSchema.TableColumn(schema);
                columnRegionID.ColumnName = "RegionID";
                columnRegionID.DataType = DbType.Int32;
                columnRegionID.MaxLength = 0;
                columnRegionID.AutoIncrement = false;
                columnRegionID.IsNullable = false;
                columnRegionID.IsPrimaryKey = false;
                columnRegionID.IsForeignKey = true;
                columnRegionID.ForeignKeyTableName = "Territories";
                columnRegionID.IsReadOnly = false;
                schema.Columns.Add(columnRegionID);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Territories", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("TerritoryID")]
        [Bindable(true)]
        public string TerritoryID
        {
            get { return GetColumnValue<string>(Columns.TerritoryID); }
            set { SetColumnValue(Columns.TerritoryID, value); }
        }

        [XmlAttribute("TerritoryDescription")]
        [Bindable(true)]
        public string TerritoryDescription
        {
            get { return GetColumnValue<string>(Columns.TerritoryDescription); }
            set { SetColumnValue(Columns.TerritoryDescription, value); }
        }

        [XmlAttribute("RegionID")]
        [Bindable(true)]
        public int RegionID
        {
            get { return GetColumnValue<int>(Columns.RegionID); }
            set { SetColumnValue(Columns.RegionID, value); }
        }

        #endregion

        #region ' Primary key relations' Methods '

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            SetPKValues();
        }

        public Northwind.EmployeeTerritoryCollection EmployeeTerritoriesRecords()
        {
            return new Northwind.EmployeeTerritoryCollection().Where(EmployeeTerritory.Columns.TerritoryID, TerritoryID).Load();
        }


        #endregion

        #region ' Foreign key relations Methods '

        /// <summary>
        /// Returns a Region ActiveRecord object related to this Territory
        ///
        /// </summary>
        public Northwind.Region RegionRecord
        {
            get { return Northwind.Region.FetchByID(this.RegionID); }
            set { SetColumnValue("RegionID", value.RegionID); }
        }


        #endregion

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string TerritoryID, string TerritoryDescription, int RegionID)
        {
            Territory item = new Territory();
            item.TerritoryID = TerritoryID;
            item.TerritoryDescription = TerritoryDescription;
            item.RegionID = RegionID;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string TerritoryID, string TerritoryDescription, int RegionID)
        {
            Territory item = new Territory();
            item.TerritoryID = TerritoryID;
            item.TerritoryDescription = TerritoryDescription;
            item.RegionID = RegionID;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn TerritoryIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn TerritoryDescriptionColumn
        {
            get { return Schema.Columns[1]; }
        }

        public static TableSchema.TableColumn RegionIDColumn
        {
            get { return Schema.Columns[2]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string TerritoryID = @"TerritoryID";
            public static string TerritoryDescription = @"TerritoryDescription";
            public static string RegionID = @"RegionID";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the EmployeeTerritory class.
    /// </summary>
    [Serializable]
    public partial class EmployeeTerritoryCollection : ActiveList<EmployeeTerritory, EmployeeTerritoryCollection>
    {
        public EmployeeTerritoryCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>EmployeeTerritoryCollection</returns>
        public EmployeeTerritoryCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                EmployeeTerritory o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [EmployeeTerritories] table.
    /// </summary>
    [Serializable]
    public class EmployeeTerritory : ActiveRecord<EmployeeTerritory>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public EmployeeTerritory()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public EmployeeTerritory(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public EmployeeTerritory(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public EmployeeTerritory(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("EmployeeTerritories", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnEmployeeID = new TableSchema.TableColumn(schema);
                columnEmployeeID.ColumnName = "EmployeeID";
                columnEmployeeID.DataType = DbType.Int32;
                columnEmployeeID.MaxLength = 0;
                columnEmployeeID.AutoIncrement = false;
                columnEmployeeID.IsNullable = false;
                columnEmployeeID.IsPrimaryKey = true;
                columnEmployeeID.IsForeignKey = true;
                columnEmployeeID.ForeignKeyTableName = "EmployeeTerritories";
                columnEmployeeID.IsReadOnly = false;
                schema.Columns.Add(columnEmployeeID);

                TableSchema.TableColumn columnTerritoryID = new TableSchema.TableColumn(schema);
                columnTerritoryID.ColumnName = "TerritoryID";
                columnTerritoryID.DataType = DbType.String;
                columnTerritoryID.MaxLength = 20;
                columnTerritoryID.AutoIncrement = false;
                columnTerritoryID.IsNullable = false;
                columnTerritoryID.IsPrimaryKey = true;
                columnTerritoryID.IsForeignKey = true;
                columnTerritoryID.ForeignKeyTableName = "EmployeeTerritories";
                columnTerritoryID.IsReadOnly = false;
                schema.Columns.Add(columnTerritoryID);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("EmployeeTerritories", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("EmployeeID")]
        [Bindable(true)]
        public int EmployeeID
        {
            get { return GetColumnValue<int>(Columns.EmployeeID); }
            set { SetColumnValue(Columns.EmployeeID, value); }
        }

        [XmlAttribute("TerritoryID")]
        [Bindable(true)]
        public string TerritoryID
        {
            get { return GetColumnValue<string>(Columns.TerritoryID); }
            set { SetColumnValue(Columns.TerritoryID, value); }
        }

        #endregion

        // There are no primary key relations

        #region ' Foreign key relations Methods '

        /// <summary>
        /// Returns a Employee ActiveRecord object related to this EmployeeTerritory
        ///
        /// </summary>
        public Northwind.Employee EmployeeRecord
        {
            get { return Northwind.Employee.FetchByID(this.EmployeeID); }
            set { SetColumnValue("EmployeeID", value.EmployeeID); }
        }

        /// <summary>
        /// Returns a Territory ActiveRecord object related to this EmployeeTerritory
        ///
        /// </summary>
        public Northwind.Territory TerritoryRecord
        {
            get { return Northwind.Territory.FetchByID(this.TerritoryID); }
            set { SetColumnValue("TerritoryID", value.TerritoryID); }
        }


        #endregion

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int EmployeeID, string TerritoryID)
        {
            EmployeeTerritory item = new EmployeeTerritory();
            item.EmployeeID = EmployeeID;
            item.TerritoryID = TerritoryID;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int EmployeeID, string TerritoryID)
        {
            EmployeeTerritory item = new EmployeeTerritory();
            item.EmployeeID = EmployeeID;
            item.TerritoryID = TerritoryID;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn EmployeeIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn TerritoryIDColumn
        {
            get { return Schema.Columns[1]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string EmployeeID = @"EmployeeID";
            public static string TerritoryID = @"TerritoryID";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the Employee class.
    /// </summary>
    [Serializable]
    public partial class EmployeeCollection : ActiveList<Employee, EmployeeCollection>
    {
        public EmployeeCollection() {}

        /// <summary>
        /// Filters an existing collection based on the set criteria. This is an in-memory filter
        /// Thanks to developingchris for this!
        /// </summary>
        /// <returns>EmployeeCollection</returns>
        public EmployeeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Employee o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                               		remove = true;
                                }
                                break;
                        }
                    }

                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    /// This is an ActiveRecord class which wraps the [Employees] table.
    /// </summary>
    [Serializable]
    public class Employee : ActiveRecord<Employee>, IActiveRecord
    {

        #region ' .Ctors and Default Settings '

        public Employee()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        private void InitSetDefaults() { SetDefaults(); }

        public Employee(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if(useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public Employee(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public Employee(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName,columnValue);
        }

        protected static void SetSQLProps() { GetTableSchema(); }

        #endregion

        #region ' Schema and Query Accessor '

        public static Query CreateQuery() { return new Query(Schema); }

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Employees", TableType.Table, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                // Columns
                TableSchema.TableColumn columnEmployeeID = new TableSchema.TableColumn(schema);
                columnEmployeeID.ColumnName = "EmployeeID";
                columnEmployeeID.DataType = DbType.Int32;
                columnEmployeeID.MaxLength = 0;
                columnEmployeeID.AutoIncrement = true;
                columnEmployeeID.IsNullable = false;
                columnEmployeeID.IsPrimaryKey = true;
                columnEmployeeID.IsForeignKey = false;
                columnEmployeeID.IsReadOnly = true;
                schema.Columns.Add(columnEmployeeID);

                TableSchema.TableColumn columnLastName = new TableSchema.TableColumn(schema);
                columnLastName.ColumnName = "LastName";
                columnLastName.DataType = DbType.String;
                columnLastName.MaxLength = 20;
                columnLastName.AutoIncrement = false;
                columnLastName.IsNullable = false;
                columnLastName.IsPrimaryKey = false;
                columnLastName.IsForeignKey = false;
                columnLastName.IsReadOnly = false;
                schema.Columns.Add(columnLastName);

                TableSchema.TableColumn columnFirstName = new TableSchema.TableColumn(schema);
                columnFirstName.ColumnName = "FirstName";
                columnFirstName.DataType = DbType.String;
                columnFirstName.MaxLength = 10;
                columnFirstName.AutoIncrement = false;
                columnFirstName.IsNullable = false;
                columnFirstName.IsPrimaryKey = false;
                columnFirstName.IsForeignKey = false;
                columnFirstName.IsReadOnly = false;
                schema.Columns.Add(columnFirstName);

                TableSchema.TableColumn columnTitle = new TableSchema.TableColumn(schema);
                columnTitle.ColumnName = "Title";
                columnTitle.DataType = DbType.String;
                columnTitle.MaxLength = 30;
                columnTitle.AutoIncrement = false;
                columnTitle.IsNullable = true;
                columnTitle.IsPrimaryKey = false;
                columnTitle.IsForeignKey = false;
                columnTitle.IsReadOnly = false;
                schema.Columns.Add(columnTitle);

                TableSchema.TableColumn columnTitleOfCourtesy = new TableSchema.TableColumn(schema);
                columnTitleOfCourtesy.ColumnName = "TitleOfCourtesy";
                columnTitleOfCourtesy.DataType = DbType.String;
                columnTitleOfCourtesy.MaxLength = 25;
                columnTitleOfCourtesy.AutoIncrement = false;
                columnTitleOfCourtesy.IsNullable = true;
                columnTitleOfCourtesy.IsPrimaryKey = false;
                columnTitleOfCourtesy.IsForeignKey = false;
                columnTitleOfCourtesy.IsReadOnly = false;
                schema.Columns.Add(columnTitleOfCourtesy);

                TableSchema.TableColumn columnBirthDate = new TableSchema.TableColumn(schema);
                columnBirthDate.ColumnName = "BirthDate";
                columnBirthDate.DataType = DbType.DateTime;
                columnBirthDate.MaxLength = 0;
                columnBirthDate.AutoIncrement = false;
                columnBirthDate.IsNullable = true;
                columnBirthDate.IsPrimaryKey = false;
                columnBirthDate.IsForeignKey = false;
                columnBirthDate.IsReadOnly = false;
                schema.Columns.Add(columnBirthDate);

                TableSchema.TableColumn columnHireDate = new TableSchema.TableColumn(schema);
                columnHireDate.ColumnName = "HireDate";
                columnHireDate.DataType = DbType.DateTime;
                columnHireDate.MaxLength = 0;
                columnHireDate.AutoIncrement = false;
                columnHireDate.IsNullable = true;
                columnHireDate.IsPrimaryKey = false;
                columnHireDate.IsForeignKey = false;
                columnHireDate.IsReadOnly = false;
                schema.Columns.Add(columnHireDate);

                TableSchema.TableColumn columnAddress = new TableSchema.TableColumn(schema);
                columnAddress.ColumnName = "Address";
                columnAddress.DataType = DbType.String;
                columnAddress.MaxLength = 60;
                columnAddress.AutoIncrement = false;
                columnAddress.IsNullable = true;
                columnAddress.IsPrimaryKey = false;
                columnAddress.IsForeignKey = false;
                columnAddress.IsReadOnly = false;
                schema.Columns.Add(columnAddress);

                TableSchema.TableColumn columnCity = new TableSchema.TableColumn(schema);
                columnCity.ColumnName = "City";
                columnCity.DataType = DbType.String;
                columnCity.MaxLength = 15;
                columnCity.AutoIncrement = false;
                columnCity.IsNullable = true;
                columnCity.IsPrimaryKey = false;
                columnCity.IsForeignKey = false;
                columnCity.IsReadOnly = false;
                schema.Columns.Add(columnCity);

                TableSchema.TableColumn columnRegion = new TableSchema.TableColumn(schema);
                columnRegion.ColumnName = "Region";
                columnRegion.DataType = DbType.String;
                columnRegion.MaxLength = 15;
                columnRegion.AutoIncrement = false;
                columnRegion.IsNullable = true;
                columnRegion.IsPrimaryKey = false;
                columnRegion.IsForeignKey = false;
                columnRegion.IsReadOnly = false;
                schema.Columns.Add(columnRegion);

                TableSchema.TableColumn columnPostalCode = new TableSchema.TableColumn(schema);
                columnPostalCode.ColumnName = "PostalCode";
                columnPostalCode.DataType = DbType.String;
                columnPostalCode.MaxLength = 10;
                columnPostalCode.AutoIncrement = false;
                columnPostalCode.IsNullable = true;
                columnPostalCode.IsPrimaryKey = false;
                columnPostalCode.IsForeignKey = false;
                columnPostalCode.IsReadOnly = false;
                schema.Columns.Add(columnPostalCode);

                TableSchema.TableColumn columnCountry = new TableSchema.TableColumn(schema);
                columnCountry.ColumnName = "Country";
                columnCountry.DataType = DbType.String;
                columnCountry.MaxLength = 15;
                columnCountry.AutoIncrement = false;
                columnCountry.IsNullable = true;
                columnCountry.IsPrimaryKey = false;
                columnCountry.IsForeignKey = false;
                columnCountry.IsReadOnly = false;
                schema.Columns.Add(columnCountry);

                TableSchema.TableColumn columnHomePhone = new TableSchema.TableColumn(schema);
                columnHomePhone.ColumnName = "HomePhone";
                columnHomePhone.DataType = DbType.String;
                columnHomePhone.MaxLength = 24;
                columnHomePhone.AutoIncrement = false;
                columnHomePhone.IsNullable = true;
                columnHomePhone.IsPrimaryKey = false;
                columnHomePhone.IsForeignKey = false;
                columnHomePhone.IsReadOnly = false;
                schema.Columns.Add(columnHomePhone);

                TableSchema.TableColumn columnExtension = new TableSchema.TableColumn(schema);
                columnExtension.ColumnName = "Extension";
                columnExtension.DataType = DbType.String;
                columnExtension.MaxLength = 4;
                columnExtension.AutoIncrement = false;
                columnExtension.IsNullable = true;
                columnExtension.IsPrimaryKey = false;
                columnExtension.IsForeignKey = false;
                columnExtension.IsReadOnly = false;
                schema.Columns.Add(columnExtension);

                TableSchema.TableColumn columnPhoto = new TableSchema.TableColumn(schema);
                columnPhoto.ColumnName = "Photo";
                columnPhoto.DataType = DbType.Binary;
                columnPhoto.MaxLength = 0;
                columnPhoto.AutoIncrement = false;
                columnPhoto.IsNullable = true;
                columnPhoto.IsPrimaryKey = false;
                columnPhoto.IsForeignKey = false;
                columnPhoto.IsReadOnly = false;
                schema.Columns.Add(columnPhoto);

                TableSchema.TableColumn columnNotes = new TableSchema.TableColumn(schema);
                columnNotes.ColumnName = "Notes";
                columnNotes.DataType = DbType.String;
                columnNotes.MaxLength = 1073741823;
                columnNotes.AutoIncrement = false;
                columnNotes.IsNullable = true;
                columnNotes.IsPrimaryKey = false;
                columnNotes.IsForeignKey = false;
                columnNotes.IsReadOnly = false;
                schema.Columns.Add(columnNotes);

                TableSchema.TableColumn columnReportsTo = new TableSchema.TableColumn(schema);
                columnReportsTo.ColumnName = "ReportsTo";
                columnReportsTo.DataType = DbType.Int32;
                columnReportsTo.MaxLength = 0;
                columnReportsTo.AutoIncrement = false;
                columnReportsTo.IsNullable = true;
                columnReportsTo.IsPrimaryKey = false;
                columnReportsTo.IsForeignKey = true;
                columnReportsTo.ForeignKeyTableName = "Employees";
                columnReportsTo.IsReadOnly = false;
                schema.Columns.Add(columnReportsTo);

                TableSchema.TableColumn columnPhotoPath = new TableSchema.TableColumn(schema);
                columnPhotoPath.ColumnName = "PhotoPath";
                columnPhotoPath.DataType = DbType.String;
                columnPhotoPath.MaxLength = 255;
                columnPhotoPath.AutoIncrement = false;
                columnPhotoPath.IsNullable = true;
                columnPhotoPath.IsPrimaryKey = false;
                columnPhotoPath.IsForeignKey = false;
                columnPhotoPath.IsReadOnly = false;
                schema.Columns.Add(columnPhotoPath);

                BaseSchema = schema;

                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Employees", schema);
            }
        }

        #endregion

        #region ' Properties '

        [XmlAttribute("EmployeeID")]
        [Bindable(true)]
        public int EmployeeID
        {
            get { return GetColumnValue<int>(Columns.EmployeeID); }
            set { SetColumnValue(Columns.EmployeeID, value); }
        }

        [XmlAttribute("LastName")]
        [Bindable(true)]
        public string LastName
        {
            get { return GetColumnValue<string>(Columns.LastName); }
            set { SetColumnValue(Columns.LastName, value); }
        }

        [XmlAttribute("FirstName")]
        [Bindable(true)]
        public string FirstName
        {
            get { return GetColumnValue<string>(Columns.FirstName); }
            set { SetColumnValue(Columns.FirstName, value); }
        }

        [XmlAttribute("Title")]
        [Bindable(true)]
        public string Title
        {
            get { return GetColumnValue<string>(Columns.Title); }
            set { SetColumnValue(Columns.Title, value); }
        }

        [XmlAttribute("TitleOfCourtesy")]
        [Bindable(true)]
        public string TitleOfCourtesy
        {
            get { return GetColumnValue<string>(Columns.TitleOfCourtesy); }
            set { SetColumnValue(Columns.TitleOfCourtesy, value); }
        }

        [XmlAttribute("BirthDate")]
        [Bindable(true)]
        public DateTime BirthDate
        {
            get { return GetColumnValue<DateTime>(Columns.BirthDate); }
            set { SetColumnValue(Columns.BirthDate, value); }
        }

        [XmlAttribute("HireDate")]
        [Bindable(true)]
        public DateTime HireDate
        {
            get { return GetColumnValue<DateTime>(Columns.HireDate); }
            set { SetColumnValue(Columns.HireDate, value); }
        }

        [XmlAttribute("Address")]
        [Bindable(true)]
        public string Address
        {
            get { return GetColumnValue<string>(Columns.Address); }
            set { SetColumnValue(Columns.Address, value); }
        }

        [XmlAttribute("City")]
        [Bindable(true)]
        public string City
        {
            get { return GetColumnValue<string>(Columns.City); }
            set { SetColumnValue(Columns.City, value); }
        }

        [XmlAttribute("Region")]
        [Bindable(true)]
        public string Region
        {
            get { return GetColumnValue<string>(Columns.Region); }
            set { SetColumnValue(Columns.Region, value); }
        }

        [XmlAttribute("PostalCode")]
        [Bindable(true)]
        public string PostalCode
        {
            get { return GetColumnValue<string>(Columns.PostalCode); }
            set { SetColumnValue(Columns.PostalCode, value); }
        }

        [XmlAttribute("Country")]
        [Bindable(true)]
        public string Country
        {
            get { return GetColumnValue<string>(Columns.Country); }
            set { SetColumnValue(Columns.Country, value); }
        }

        [XmlAttribute("HomePhone")]
        [Bindable(true)]
        public string HomePhone
        {
            get { return GetColumnValue<string>(Columns.HomePhone); }
            set { SetColumnValue(Columns.HomePhone, value); }
        }

        [XmlAttribute("Extension")]
        [Bindable(true)]
        public string Extension
        {
            get { return GetColumnValue<string>(Columns.Extension); }
            set { SetColumnValue(Columns.Extension, value); }
        }

        [XmlAttribute("Photo")]
        [Bindable(true)]
        public byte[] Photo
        {
            get { return GetColumnValue<byte[]>(Columns.Photo); }
            set { SetColumnValue(Columns.Photo, value); }
        }

        [XmlAttribute("Notes")]
        [Bindable(true)]
        public string Notes
        {
            get { return GetColumnValue<string>(Columns.Notes); }
            set { SetColumnValue(Columns.Notes, value); }
        }

        [XmlAttribute("ReportsTo")]
        [Bindable(true)]
        public int ReportsTo
        {
            get { return GetColumnValue<int>(Columns.ReportsTo); }
            set { SetColumnValue(Columns.ReportsTo, value); }
        }

        [XmlAttribute("PhotoPath")]
        [Bindable(true)]
        public string PhotoPath
        {
            get { return GetColumnValue<string>(Columns.PhotoPath); }
            set { SetColumnValue(Columns.PhotoPath, value); }
        }

        #endregion

        #region ' Primary key relations' Methods '

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            SetPKValues();
        }

        public Northwind.EmployeeCollection EmployeesRecords()
        {
            return new Northwind.EmployeeCollection().Where(Employee.Columns.ReportsTo, EmployeeID).Load();
        }

        public Northwind.EmployeeTerritoryCollection EmployeeTerritoriesRecords()
        {
            return new Northwind.EmployeeTerritoryCollection().Where(EmployeeTerritory.Columns.EmployeeID, EmployeeID).Load();
        }

        public Northwind.OrderCollection OrdersRecords()
        {
            return new Northwind.OrderCollection().Where(Order.Columns.EmployeeID, EmployeeID).Load();
        }


        #endregion

        #region ' Foreign key relations Methods '

        /// <summary>
        /// Returns a Employee ActiveRecord object related to this Employee
        ///
        /// </summary>
        public Northwind.Employee EmployeeRecord
        {
            get { return Northwind.Employee.FetchByID(this.ReportsTo); }
            set { SetColumnValue("ReportsTo", value.EmployeeID); }
        }


        #endregion

        // No manytomany tables defined

        #region ' ObjectDataSource support '

        /// <summary>
        /// Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int EmployeeID, string LastName, string FirstName, string Title, string TitleOfCourtesy, DateTime BirthDate, DateTime HireDate, string Address, string City, string Region, string PostalCode, string Country, string HomePhone, string Extension, byte[] Photo, string Notes, int ReportsTo, string PhotoPath)
        {
            Employee item = new Employee();
            item.EmployeeID = EmployeeID;
            item.LastName = LastName;
            item.FirstName = FirstName;
            item.Title = Title;
            item.TitleOfCourtesy = TitleOfCourtesy;
            item.BirthDate = BirthDate;
            item.HireDate = HireDate;
            item.Address = Address;
            item.City = City;
            item.Region = Region;
            item.PostalCode = PostalCode;
            item.Country = Country;
            item.HomePhone = HomePhone;
            item.Extension = Extension;
            item.Photo = Photo;
            item.Notes = Notes;
            item.ReportsTo = ReportsTo;
            item.PhotoPath = PhotoPath;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string LastName, string FirstName, string Title, string TitleOfCourtesy, DateTime BirthDate, DateTime HireDate, string Address, string City, string Region, string PostalCode, string Country, string HomePhone, string Extension, byte[] Photo, string Notes, int ReportsTo, string PhotoPath)
        {
            Employee item = new Employee();
            item.LastName = LastName;
            item.FirstName = FirstName;
            item.Title = Title;
            item.TitleOfCourtesy = TitleOfCourtesy;
            item.BirthDate = BirthDate;
            item.HireDate = HireDate;
            item.Address = Address;
            item.City = City;
            item.Region = Region;
            item.PostalCode = PostalCode;
            item.Country = Country;
            item.HomePhone = HomePhone;
            item.Extension = Extension;
            item.Photo = Photo;
            item.Notes = Notes;
            item.ReportsTo = ReportsTo;
            item.PhotoPath = PhotoPath;
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region ' Typed Columns '

        public static TableSchema.TableColumn EmployeeIDColumn
        {
            get { return Schema.Columns[0]; }
        }

        public static TableSchema.TableColumn LastNameColumn
        {
            get { return Schema.Columns[1]; }
        }

        public static TableSchema.TableColumn FirstNameColumn
        {
            get { return Schema.Columns[2]; }
        }

        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[3]; }
        }

        public static TableSchema.TableColumn TitleOfCourtesyColumn
        {
            get { return Schema.Columns[4]; }
        }

        public static TableSchema.TableColumn BirthDateColumn
        {
            get { return Schema.Columns[5]; }
        }

        public static TableSchema.TableColumn HireDateColumn
        {
            get { return Schema.Columns[6]; }
        }

        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[7]; }
        }

        public static TableSchema.TableColumn CityColumn
        {
            get { return Schema.Columns[8]; }
        }

        public static TableSchema.TableColumn RegionColumn
        {
            get { return Schema.Columns[9]; }
        }

        public static TableSchema.TableColumn PostalCodeColumn
        {
            get { return Schema.Columns[10]; }
        }

        public static TableSchema.TableColumn CountryColumn
        {
            get { return Schema.Columns[11]; }
        }

        public static TableSchema.TableColumn HomePhoneColumn
        {
            get { return Schema.Columns[12]; }
        }

        public static TableSchema.TableColumn ExtensionColumn
        {
            get { return Schema.Columns[13]; }
        }

        public static TableSchema.TableColumn PhotoColumn
        {
            get { return Schema.Columns[14]; }
        }

        public static TableSchema.TableColumn NotesColumn
        {
            get { return Schema.Columns[15]; }
        }

        public static TableSchema.TableColumn ReportsToColumn
        {
            get { return Schema.Columns[16]; }
        }

        public static TableSchema.TableColumn PhotoPathColumn
        {
            get { return Schema.Columns[17]; }
        }

        #endregion

        #region ' Columns Struct '

        public struct Columns
        {
            public static string EmployeeID = @"EmployeeID";
            public static string LastName = @"LastName";
            public static string FirstName = @"FirstName";
            public static string Title = @"Title";
            public static string TitleOfCourtesy = @"TitleOfCourtesy";
            public static string BirthDate = @"BirthDate";
            public static string HireDate = @"HireDate";
            public static string Address = @"Address";
            public static string City = @"City";
            public static string Region = @"Region";
            public static string PostalCode = @"PostalCode";
            public static string Country = @"Country";
            public static string HomePhone = @"HomePhone";
            public static string Extension = @"Extension";
            public static string Photo = @"Photo";
            public static string Notes = @"Notes";
            public static string ReportsTo = @"ReportsTo";
            public static string PhotoPath = @"PhotoPath";
        }

        #endregion

        #region ' Update Primary Key Collections '

        public void SetPKValues()
        {
        }

        #endregion

        #region ' Deep Save '

        public void DeepSave()
        {
            Save();
        }

        #endregion

    }



    /// <summary>
    /// Strongly-typed collection for the CustomerandSuppliersbyCity class.
    /// </summary>

    [Serializable]
    public partial class CustomerandSuppliersbyCityCollection : ReadOnlyList<CustomerandSuppliersbyCity, CustomerandSuppliersbyCityCollection>
    {
        public CustomerandSuppliersbyCityCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Customer and Suppliers by City view.
    /// </summary>
    [Serializable]
    public partial class CustomerandSuppliersbyCity : ReadOnlyRecord<CustomerandSuppliersbyCity>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Customer and Suppliers by City", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnCity = new TableSchema.TableColumn(schema);
                columnCity.ColumnName = "City";
                columnCity.DataType = DbType.String;
                columnCity.MaxLength = 15;
                columnCity.AutoIncrement = false;
                columnCity.IsNullable = true;
                columnCity.IsPrimaryKey = false;
                columnCity.IsForeignKey = false;
                columnCity.IsReadOnly = false;
                schema.Columns.Add(columnCity);

                TableSchema.TableColumn columnCompanyName = new TableSchema.TableColumn(schema);
                columnCompanyName.ColumnName = "CompanyName";
                columnCompanyName.DataType = DbType.String;
                columnCompanyName.MaxLength = 40;
                columnCompanyName.AutoIncrement = false;
                columnCompanyName.IsNullable = false;
                columnCompanyName.IsPrimaryKey = false;
                columnCompanyName.IsForeignKey = false;
                columnCompanyName.IsReadOnly = false;
                schema.Columns.Add(columnCompanyName);

                TableSchema.TableColumn columnContactName = new TableSchema.TableColumn(schema);
                columnContactName.ColumnName = "ContactName";
                columnContactName.DataType = DbType.String;
                columnContactName.MaxLength = 30;
                columnContactName.AutoIncrement = false;
                columnContactName.IsNullable = true;
                columnContactName.IsPrimaryKey = false;
                columnContactName.IsForeignKey = false;
                columnContactName.IsReadOnly = false;
                schema.Columns.Add(columnContactName);

                TableSchema.TableColumn columnRelationship = new TableSchema.TableColumn(schema);
                columnRelationship.ColumnName = "Relationship";
                columnRelationship.DataType = DbType.AnsiString;
                columnRelationship.MaxLength = 9;
                columnRelationship.AutoIncrement = false;
                columnRelationship.IsNullable = false;
                columnRelationship.IsPrimaryKey = false;
                columnRelationship.IsForeignKey = false;
                columnRelationship.IsReadOnly = false;
                schema.Columns.Add(columnRelationship);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Customer and Suppliers by City", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public CustomerandSuppliersbyCity()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public CustomerandSuppliersbyCity(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public CustomerandSuppliersbyCity(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public CustomerandSuppliersbyCity(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("City")]
        [Bindable(true)]
        public string City
        {
            get { return GetColumnValue<string>(Columns.City); }
            set { SetColumnValue(Columns.City, value); }
        }

        [XmlAttribute("CompanyName")]
        [Bindable(true)]
        public string CompanyName
        {
            get { return GetColumnValue<string>(Columns.CompanyName); }
            set { SetColumnValue(Columns.CompanyName, value); }
        }

        [XmlAttribute("ContactName")]
        [Bindable(true)]
        public string ContactName
        {
            get { return GetColumnValue<string>(Columns.ContactName); }
            set { SetColumnValue(Columns.ContactName, value); }
        }

        [XmlAttribute("Relationship")]
        [Bindable(true)]
        public string Relationship
        {
            get { return GetColumnValue<string>(Columns.Relationship); }
            set { SetColumnValue(Columns.Relationship, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string City = @"City";
            public static string CompanyName = @"CompanyName";
            public static string ContactName = @"ContactName";
            public static string Relationship = @"Relationship";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the Alphabeticallistofproduct class.
    /// </summary>

    [Serializable]
    public partial class AlphabeticallistofproductCollection : ReadOnlyList<Alphabeticallistofproduct, AlphabeticallistofproductCollection>
    {
        public AlphabeticallistofproductCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Alphabetical list of products view.
    /// </summary>
    [Serializable]
    public partial class Alphabeticallistofproduct : ReadOnlyRecord<Alphabeticallistofproduct>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Alphabetical list of products", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnProductID = new TableSchema.TableColumn(schema);
                columnProductID.ColumnName = "ProductID";
                columnProductID.DataType = DbType.Int32;
                columnProductID.MaxLength = 0;
                columnProductID.AutoIncrement = false;
                columnProductID.IsNullable = false;
                columnProductID.IsPrimaryKey = false;
                columnProductID.IsForeignKey = false;
                columnProductID.IsReadOnly = false;
                schema.Columns.Add(columnProductID);

                TableSchema.TableColumn columnProductName = new TableSchema.TableColumn(schema);
                columnProductName.ColumnName = "ProductName";
                columnProductName.DataType = DbType.String;
                columnProductName.MaxLength = 40;
                columnProductName.AutoIncrement = false;
                columnProductName.IsNullable = false;
                columnProductName.IsPrimaryKey = false;
                columnProductName.IsForeignKey = false;
                columnProductName.IsReadOnly = false;
                schema.Columns.Add(columnProductName);

                TableSchema.TableColumn columnSupplierID = new TableSchema.TableColumn(schema);
                columnSupplierID.ColumnName = "SupplierID";
                columnSupplierID.DataType = DbType.Int32;
                columnSupplierID.MaxLength = 0;
                columnSupplierID.AutoIncrement = false;
                columnSupplierID.IsNullable = true;
                columnSupplierID.IsPrimaryKey = false;
                columnSupplierID.IsForeignKey = false;
                columnSupplierID.IsReadOnly = false;
                schema.Columns.Add(columnSupplierID);

                TableSchema.TableColumn columnCategoryID = new TableSchema.TableColumn(schema);
                columnCategoryID.ColumnName = "CategoryID";
                columnCategoryID.DataType = DbType.Int32;
                columnCategoryID.MaxLength = 0;
                columnCategoryID.AutoIncrement = false;
                columnCategoryID.IsNullable = true;
                columnCategoryID.IsPrimaryKey = false;
                columnCategoryID.IsForeignKey = false;
                columnCategoryID.IsReadOnly = false;
                schema.Columns.Add(columnCategoryID);

                TableSchema.TableColumn columnQuantityPerUnit = new TableSchema.TableColumn(schema);
                columnQuantityPerUnit.ColumnName = "QuantityPerUnit";
                columnQuantityPerUnit.DataType = DbType.String;
                columnQuantityPerUnit.MaxLength = 20;
                columnQuantityPerUnit.AutoIncrement = false;
                columnQuantityPerUnit.IsNullable = true;
                columnQuantityPerUnit.IsPrimaryKey = false;
                columnQuantityPerUnit.IsForeignKey = false;
                columnQuantityPerUnit.IsReadOnly = false;
                schema.Columns.Add(columnQuantityPerUnit);

                TableSchema.TableColumn columnUnitPrice = new TableSchema.TableColumn(schema);
                columnUnitPrice.ColumnName = "UnitPrice";
                columnUnitPrice.DataType = DbType.Currency;
                columnUnitPrice.MaxLength = 0;
                columnUnitPrice.AutoIncrement = false;
                columnUnitPrice.IsNullable = true;
                columnUnitPrice.IsPrimaryKey = false;
                columnUnitPrice.IsForeignKey = false;
                columnUnitPrice.IsReadOnly = false;
                schema.Columns.Add(columnUnitPrice);

                TableSchema.TableColumn columnUnitsInStock = new TableSchema.TableColumn(schema);
                columnUnitsInStock.ColumnName = "UnitsInStock";
                columnUnitsInStock.DataType = DbType.Int16;
                columnUnitsInStock.MaxLength = 0;
                columnUnitsInStock.AutoIncrement = false;
                columnUnitsInStock.IsNullable = true;
                columnUnitsInStock.IsPrimaryKey = false;
                columnUnitsInStock.IsForeignKey = false;
                columnUnitsInStock.IsReadOnly = false;
                schema.Columns.Add(columnUnitsInStock);

                TableSchema.TableColumn columnUnitsOnOrder = new TableSchema.TableColumn(schema);
                columnUnitsOnOrder.ColumnName = "UnitsOnOrder";
                columnUnitsOnOrder.DataType = DbType.Int16;
                columnUnitsOnOrder.MaxLength = 0;
                columnUnitsOnOrder.AutoIncrement = false;
                columnUnitsOnOrder.IsNullable = true;
                columnUnitsOnOrder.IsPrimaryKey = false;
                columnUnitsOnOrder.IsForeignKey = false;
                columnUnitsOnOrder.IsReadOnly = false;
                schema.Columns.Add(columnUnitsOnOrder);

                TableSchema.TableColumn columnReorderLevel = new TableSchema.TableColumn(schema);
                columnReorderLevel.ColumnName = "ReorderLevel";
                columnReorderLevel.DataType = DbType.Int16;
                columnReorderLevel.MaxLength = 0;
                columnReorderLevel.AutoIncrement = false;
                columnReorderLevel.IsNullable = true;
                columnReorderLevel.IsPrimaryKey = false;
                columnReorderLevel.IsForeignKey = false;
                columnReorderLevel.IsReadOnly = false;
                schema.Columns.Add(columnReorderLevel);

                TableSchema.TableColumn columnDiscontinued = new TableSchema.TableColumn(schema);
                columnDiscontinued.ColumnName = "Discontinued";
                columnDiscontinued.DataType = DbType.Boolean;
                columnDiscontinued.MaxLength = 0;
                columnDiscontinued.AutoIncrement = false;
                columnDiscontinued.IsNullable = false;
                columnDiscontinued.IsPrimaryKey = false;
                columnDiscontinued.IsForeignKey = false;
                columnDiscontinued.IsReadOnly = false;
                schema.Columns.Add(columnDiscontinued);

                TableSchema.TableColumn columnCategoryName = new TableSchema.TableColumn(schema);
                columnCategoryName.ColumnName = "CategoryName";
                columnCategoryName.DataType = DbType.String;
                columnCategoryName.MaxLength = 15;
                columnCategoryName.AutoIncrement = false;
                columnCategoryName.IsNullable = false;
                columnCategoryName.IsPrimaryKey = false;
                columnCategoryName.IsForeignKey = false;
                columnCategoryName.IsReadOnly = false;
                schema.Columns.Add(columnCategoryName);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Alphabetical list of products", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public Alphabeticallistofproduct()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public Alphabeticallistofproduct(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public Alphabeticallistofproduct(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public Alphabeticallistofproduct(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("ProductID")]
        [Bindable(true)]
        public int ProductID
        {
            get { return GetColumnValue<int>(Columns.ProductID); }
            set { SetColumnValue(Columns.ProductID, value); }
        }

        [XmlAttribute("ProductName")]
        [Bindable(true)]
        public string ProductName
        {
            get { return GetColumnValue<string>(Columns.ProductName); }
            set { SetColumnValue(Columns.ProductName, value); }
        }

        [XmlAttribute("SupplierID")]
        [Bindable(true)]
        public int SupplierID
        {
            get { return GetColumnValue<int>(Columns.SupplierID); }
            set { SetColumnValue(Columns.SupplierID, value); }
        }

        [XmlAttribute("CategoryID")]
        [Bindable(true)]
        public int CategoryID
        {
            get { return GetColumnValue<int>(Columns.CategoryID); }
            set { SetColumnValue(Columns.CategoryID, value); }
        }

        [XmlAttribute("QuantityPerUnit")]
        [Bindable(true)]
        public string QuantityPerUnit
        {
            get { return GetColumnValue<string>(Columns.QuantityPerUnit); }
            set { SetColumnValue(Columns.QuantityPerUnit, value); }
        }

        [XmlAttribute("UnitPrice")]
        [Bindable(true)]
        public decimal UnitPrice
        {
            get { return GetColumnValue<decimal>(Columns.UnitPrice); }
            set { SetColumnValue(Columns.UnitPrice, value); }
        }

        [XmlAttribute("UnitsInStock")]
        [Bindable(true)]
        public short UnitsInStock
        {
            get { return GetColumnValue<short>(Columns.UnitsInStock); }
            set { SetColumnValue(Columns.UnitsInStock, value); }
        }

        [XmlAttribute("UnitsOnOrder")]
        [Bindable(true)]
        public short UnitsOnOrder
        {
            get { return GetColumnValue<short>(Columns.UnitsOnOrder); }
            set { SetColumnValue(Columns.UnitsOnOrder, value); }
        }

        [XmlAttribute("ReorderLevel")]
        [Bindable(true)]
        public short ReorderLevel
        {
            get { return GetColumnValue<short>(Columns.ReorderLevel); }
            set { SetColumnValue(Columns.ReorderLevel, value); }
        }

        [XmlAttribute("Discontinued")]
        [Bindable(true)]
        public bool Discontinued
        {
            get { return GetColumnValue<bool>(Columns.Discontinued); }
            set { SetColumnValue(Columns.Discontinued, value); }
        }

        [XmlAttribute("CategoryName")]
        [Bindable(true)]
        public string CategoryName
        {
            get { return GetColumnValue<string>(Columns.CategoryName); }
            set { SetColumnValue(Columns.CategoryName, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string ProductID = @"ProductID";
            public static string ProductName = @"ProductName";
            public static string SupplierID = @"SupplierID";
            public static string CategoryID = @"CategoryID";
            public static string QuantityPerUnit = @"QuantityPerUnit";
            public static string UnitPrice = @"UnitPrice";
            public static string UnitsInStock = @"UnitsInStock";
            public static string UnitsOnOrder = @"UnitsOnOrder";
            public static string ReorderLevel = @"ReorderLevel";
            public static string Discontinued = @"Discontinued";
            public static string CategoryName = @"CategoryName";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the CurrentProductList class.
    /// </summary>

    [Serializable]
    public partial class CurrentProductListCollection : ReadOnlyList<CurrentProductList, CurrentProductListCollection>
    {
        public CurrentProductListCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Current Product List view.
    /// </summary>
    [Serializable]
    public partial class CurrentProductList : ReadOnlyRecord<CurrentProductList>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Current Product List", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnProductID = new TableSchema.TableColumn(schema);
                columnProductID.ColumnName = "ProductID";
                columnProductID.DataType = DbType.Int32;
                columnProductID.MaxLength = 0;
                columnProductID.AutoIncrement = true;
                columnProductID.IsNullable = false;
                columnProductID.IsPrimaryKey = false;
                columnProductID.IsForeignKey = false;
                columnProductID.IsReadOnly = true;
                schema.Columns.Add(columnProductID);

                TableSchema.TableColumn columnProductName = new TableSchema.TableColumn(schema);
                columnProductName.ColumnName = "ProductName";
                columnProductName.DataType = DbType.String;
                columnProductName.MaxLength = 40;
                columnProductName.AutoIncrement = false;
                columnProductName.IsNullable = false;
                columnProductName.IsPrimaryKey = false;
                columnProductName.IsForeignKey = false;
                columnProductName.IsReadOnly = false;
                schema.Columns.Add(columnProductName);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Current Product List", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public CurrentProductList()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public CurrentProductList(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public CurrentProductList(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public CurrentProductList(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("ProductID")]
        [Bindable(true)]
        public int ProductID
        {
            get { return GetColumnValue<int>(Columns.ProductID); }
            set { SetColumnValue(Columns.ProductID, value); }
        }

        [XmlAttribute("ProductName")]
        [Bindable(true)]
        public string ProductName
        {
            get { return GetColumnValue<string>(Columns.ProductName); }
            set { SetColumnValue(Columns.ProductName, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string ProductID = @"ProductID";
            public static string ProductName = @"ProductName";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the OrdersQry class.
    /// </summary>

    [Serializable]
    public partial class OrdersQryCollection : ReadOnlyList<OrdersQry, OrdersQryCollection>
    {
        public OrdersQryCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Orders Qry view.
    /// </summary>
    [Serializable]
    public partial class OrdersQry : ReadOnlyRecord<OrdersQry>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Orders Qry", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnOrderID = new TableSchema.TableColumn(schema);
                columnOrderID.ColumnName = "OrderID";
                columnOrderID.DataType = DbType.Int32;
                columnOrderID.MaxLength = 0;
                columnOrderID.AutoIncrement = false;
                columnOrderID.IsNullable = false;
                columnOrderID.IsPrimaryKey = false;
                columnOrderID.IsForeignKey = false;
                columnOrderID.IsReadOnly = false;
                schema.Columns.Add(columnOrderID);

                TableSchema.TableColumn columnCustomerID = new TableSchema.TableColumn(schema);
                columnCustomerID.ColumnName = "CustomerID";
                columnCustomerID.DataType = DbType.StringFixedLength;
                columnCustomerID.MaxLength = 5;
                columnCustomerID.AutoIncrement = false;
                columnCustomerID.IsNullable = true;
                columnCustomerID.IsPrimaryKey = false;
                columnCustomerID.IsForeignKey = false;
                columnCustomerID.IsReadOnly = false;
                schema.Columns.Add(columnCustomerID);

                TableSchema.TableColumn columnEmployeeID = new TableSchema.TableColumn(schema);
                columnEmployeeID.ColumnName = "EmployeeID";
                columnEmployeeID.DataType = DbType.Int32;
                columnEmployeeID.MaxLength = 0;
                columnEmployeeID.AutoIncrement = false;
                columnEmployeeID.IsNullable = true;
                columnEmployeeID.IsPrimaryKey = false;
                columnEmployeeID.IsForeignKey = false;
                columnEmployeeID.IsReadOnly = false;
                schema.Columns.Add(columnEmployeeID);

                TableSchema.TableColumn columnOrderDate = new TableSchema.TableColumn(schema);
                columnOrderDate.ColumnName = "OrderDate";
                columnOrderDate.DataType = DbType.DateTime;
                columnOrderDate.MaxLength = 0;
                columnOrderDate.AutoIncrement = false;
                columnOrderDate.IsNullable = true;
                columnOrderDate.IsPrimaryKey = false;
                columnOrderDate.IsForeignKey = false;
                columnOrderDate.IsReadOnly = false;
                schema.Columns.Add(columnOrderDate);

                TableSchema.TableColumn columnRequiredDate = new TableSchema.TableColumn(schema);
                columnRequiredDate.ColumnName = "RequiredDate";
                columnRequiredDate.DataType = DbType.DateTime;
                columnRequiredDate.MaxLength = 0;
                columnRequiredDate.AutoIncrement = false;
                columnRequiredDate.IsNullable = true;
                columnRequiredDate.IsPrimaryKey = false;
                columnRequiredDate.IsForeignKey = false;
                columnRequiredDate.IsReadOnly = false;
                schema.Columns.Add(columnRequiredDate);

                TableSchema.TableColumn columnShippedDate = new TableSchema.TableColumn(schema);
                columnShippedDate.ColumnName = "ShippedDate";
                columnShippedDate.DataType = DbType.DateTime;
                columnShippedDate.MaxLength = 0;
                columnShippedDate.AutoIncrement = false;
                columnShippedDate.IsNullable = true;
                columnShippedDate.IsPrimaryKey = false;
                columnShippedDate.IsForeignKey = false;
                columnShippedDate.IsReadOnly = false;
                schema.Columns.Add(columnShippedDate);

                TableSchema.TableColumn columnShipVia = new TableSchema.TableColumn(schema);
                columnShipVia.ColumnName = "ShipVia";
                columnShipVia.DataType = DbType.Int32;
                columnShipVia.MaxLength = 0;
                columnShipVia.AutoIncrement = false;
                columnShipVia.IsNullable = true;
                columnShipVia.IsPrimaryKey = false;
                columnShipVia.IsForeignKey = false;
                columnShipVia.IsReadOnly = false;
                schema.Columns.Add(columnShipVia);

                TableSchema.TableColumn columnFreight = new TableSchema.TableColumn(schema);
                columnFreight.ColumnName = "Freight";
                columnFreight.DataType = DbType.Currency;
                columnFreight.MaxLength = 0;
                columnFreight.AutoIncrement = false;
                columnFreight.IsNullable = true;
                columnFreight.IsPrimaryKey = false;
                columnFreight.IsForeignKey = false;
                columnFreight.IsReadOnly = false;
                schema.Columns.Add(columnFreight);

                TableSchema.TableColumn columnShipName = new TableSchema.TableColumn(schema);
                columnShipName.ColumnName = "ShipName";
                columnShipName.DataType = DbType.String;
                columnShipName.MaxLength = 40;
                columnShipName.AutoIncrement = false;
                columnShipName.IsNullable = true;
                columnShipName.IsPrimaryKey = false;
                columnShipName.IsForeignKey = false;
                columnShipName.IsReadOnly = false;
                schema.Columns.Add(columnShipName);

                TableSchema.TableColumn columnShipAddress = new TableSchema.TableColumn(schema);
                columnShipAddress.ColumnName = "ShipAddress";
                columnShipAddress.DataType = DbType.String;
                columnShipAddress.MaxLength = 60;
                columnShipAddress.AutoIncrement = false;
                columnShipAddress.IsNullable = true;
                columnShipAddress.IsPrimaryKey = false;
                columnShipAddress.IsForeignKey = false;
                columnShipAddress.IsReadOnly = false;
                schema.Columns.Add(columnShipAddress);

                TableSchema.TableColumn columnShipCity = new TableSchema.TableColumn(schema);
                columnShipCity.ColumnName = "ShipCity";
                columnShipCity.DataType = DbType.String;
                columnShipCity.MaxLength = 15;
                columnShipCity.AutoIncrement = false;
                columnShipCity.IsNullable = true;
                columnShipCity.IsPrimaryKey = false;
                columnShipCity.IsForeignKey = false;
                columnShipCity.IsReadOnly = false;
                schema.Columns.Add(columnShipCity);

                TableSchema.TableColumn columnShipRegion = new TableSchema.TableColumn(schema);
                columnShipRegion.ColumnName = "ShipRegion";
                columnShipRegion.DataType = DbType.String;
                columnShipRegion.MaxLength = 15;
                columnShipRegion.AutoIncrement = false;
                columnShipRegion.IsNullable = true;
                columnShipRegion.IsPrimaryKey = false;
                columnShipRegion.IsForeignKey = false;
                columnShipRegion.IsReadOnly = false;
                schema.Columns.Add(columnShipRegion);

                TableSchema.TableColumn columnShipPostalCode = new TableSchema.TableColumn(schema);
                columnShipPostalCode.ColumnName = "ShipPostalCode";
                columnShipPostalCode.DataType = DbType.String;
                columnShipPostalCode.MaxLength = 10;
                columnShipPostalCode.AutoIncrement = false;
                columnShipPostalCode.IsNullable = true;
                columnShipPostalCode.IsPrimaryKey = false;
                columnShipPostalCode.IsForeignKey = false;
                columnShipPostalCode.IsReadOnly = false;
                schema.Columns.Add(columnShipPostalCode);

                TableSchema.TableColumn columnShipCountry = new TableSchema.TableColumn(schema);
                columnShipCountry.ColumnName = "ShipCountry";
                columnShipCountry.DataType = DbType.String;
                columnShipCountry.MaxLength = 15;
                columnShipCountry.AutoIncrement = false;
                columnShipCountry.IsNullable = true;
                columnShipCountry.IsPrimaryKey = false;
                columnShipCountry.IsForeignKey = false;
                columnShipCountry.IsReadOnly = false;
                schema.Columns.Add(columnShipCountry);

                TableSchema.TableColumn columnCompanyName = new TableSchema.TableColumn(schema);
                columnCompanyName.ColumnName = "CompanyName";
                columnCompanyName.DataType = DbType.String;
                columnCompanyName.MaxLength = 40;
                columnCompanyName.AutoIncrement = false;
                columnCompanyName.IsNullable = false;
                columnCompanyName.IsPrimaryKey = false;
                columnCompanyName.IsForeignKey = false;
                columnCompanyName.IsReadOnly = false;
                schema.Columns.Add(columnCompanyName);

                TableSchema.TableColumn columnAddress = new TableSchema.TableColumn(schema);
                columnAddress.ColumnName = "Address";
                columnAddress.DataType = DbType.String;
                columnAddress.MaxLength = 60;
                columnAddress.AutoIncrement = false;
                columnAddress.IsNullable = true;
                columnAddress.IsPrimaryKey = false;
                columnAddress.IsForeignKey = false;
                columnAddress.IsReadOnly = false;
                schema.Columns.Add(columnAddress);

                TableSchema.TableColumn columnCity = new TableSchema.TableColumn(schema);
                columnCity.ColumnName = "City";
                columnCity.DataType = DbType.String;
                columnCity.MaxLength = 15;
                columnCity.AutoIncrement = false;
                columnCity.IsNullable = true;
                columnCity.IsPrimaryKey = false;
                columnCity.IsForeignKey = false;
                columnCity.IsReadOnly = false;
                schema.Columns.Add(columnCity);

                TableSchema.TableColumn columnRegion = new TableSchema.TableColumn(schema);
                columnRegion.ColumnName = "Region";
                columnRegion.DataType = DbType.String;
                columnRegion.MaxLength = 15;
                columnRegion.AutoIncrement = false;
                columnRegion.IsNullable = true;
                columnRegion.IsPrimaryKey = false;
                columnRegion.IsForeignKey = false;
                columnRegion.IsReadOnly = false;
                schema.Columns.Add(columnRegion);

                TableSchema.TableColumn columnPostalCode = new TableSchema.TableColumn(schema);
                columnPostalCode.ColumnName = "PostalCode";
                columnPostalCode.DataType = DbType.String;
                columnPostalCode.MaxLength = 10;
                columnPostalCode.AutoIncrement = false;
                columnPostalCode.IsNullable = true;
                columnPostalCode.IsPrimaryKey = false;
                columnPostalCode.IsForeignKey = false;
                columnPostalCode.IsReadOnly = false;
                schema.Columns.Add(columnPostalCode);

                TableSchema.TableColumn columnCountry = new TableSchema.TableColumn(schema);
                columnCountry.ColumnName = "Country";
                columnCountry.DataType = DbType.String;
                columnCountry.MaxLength = 15;
                columnCountry.AutoIncrement = false;
                columnCountry.IsNullable = true;
                columnCountry.IsPrimaryKey = false;
                columnCountry.IsForeignKey = false;
                columnCountry.IsReadOnly = false;
                schema.Columns.Add(columnCountry);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Orders Qry", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public OrdersQry()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public OrdersQry(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public OrdersQry(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public OrdersQry(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public int OrderID
        {
            get { return GetColumnValue<int>(Columns.OrderID); }
            set { SetColumnValue(Columns.OrderID, value); }
        }

        [XmlAttribute("CustomerID")]
        [Bindable(true)]
        public string CustomerID
        {
            get { return GetColumnValue<string>(Columns.CustomerID); }
            set { SetColumnValue(Columns.CustomerID, value); }
        }

        [XmlAttribute("EmployeeID")]
        [Bindable(true)]
        public int EmployeeID
        {
            get { return GetColumnValue<int>(Columns.EmployeeID); }
            set { SetColumnValue(Columns.EmployeeID, value); }
        }

        [XmlAttribute("OrderDate")]
        [Bindable(true)]
        public DateTime OrderDate
        {
            get { return GetColumnValue<DateTime>(Columns.OrderDate); }
            set { SetColumnValue(Columns.OrderDate, value); }
        }

        [XmlAttribute("RequiredDate")]
        [Bindable(true)]
        public DateTime RequiredDate
        {
            get { return GetColumnValue<DateTime>(Columns.RequiredDate); }
            set { SetColumnValue(Columns.RequiredDate, value); }
        }

        [XmlAttribute("ShippedDate")]
        [Bindable(true)]
        public DateTime ShippedDate
        {
            get { return GetColumnValue<DateTime>(Columns.ShippedDate); }
            set { SetColumnValue(Columns.ShippedDate, value); }
        }

        [XmlAttribute("ShipVia")]
        [Bindable(true)]
        public int ShipVia
        {
            get { return GetColumnValue<int>(Columns.ShipVia); }
            set { SetColumnValue(Columns.ShipVia, value); }
        }

        [XmlAttribute("Freight")]
        [Bindable(true)]
        public decimal Freight
        {
            get { return GetColumnValue<decimal>(Columns.Freight); }
            set { SetColumnValue(Columns.Freight, value); }
        }

        [XmlAttribute("ShipName")]
        [Bindable(true)]
        public string ShipName
        {
            get { return GetColumnValue<string>(Columns.ShipName); }
            set { SetColumnValue(Columns.ShipName, value); }
        }

        [XmlAttribute("ShipAddress")]
        [Bindable(true)]
        public string ShipAddress
        {
            get { return GetColumnValue<string>(Columns.ShipAddress); }
            set { SetColumnValue(Columns.ShipAddress, value); }
        }

        [XmlAttribute("ShipCity")]
        [Bindable(true)]
        public string ShipCity
        {
            get { return GetColumnValue<string>(Columns.ShipCity); }
            set { SetColumnValue(Columns.ShipCity, value); }
        }

        [XmlAttribute("ShipRegion")]
        [Bindable(true)]
        public string ShipRegion
        {
            get { return GetColumnValue<string>(Columns.ShipRegion); }
            set { SetColumnValue(Columns.ShipRegion, value); }
        }

        [XmlAttribute("ShipPostalCode")]
        [Bindable(true)]
        public string ShipPostalCode
        {
            get { return GetColumnValue<string>(Columns.ShipPostalCode); }
            set { SetColumnValue(Columns.ShipPostalCode, value); }
        }

        [XmlAttribute("ShipCountry")]
        [Bindable(true)]
        public string ShipCountry
        {
            get { return GetColumnValue<string>(Columns.ShipCountry); }
            set { SetColumnValue(Columns.ShipCountry, value); }
        }

        [XmlAttribute("CompanyName")]
        [Bindable(true)]
        public string CompanyName
        {
            get { return GetColumnValue<string>(Columns.CompanyName); }
            set { SetColumnValue(Columns.CompanyName, value); }
        }

        [XmlAttribute("Address")]
        [Bindable(true)]
        public string Address
        {
            get { return GetColumnValue<string>(Columns.Address); }
            set { SetColumnValue(Columns.Address, value); }
        }

        [XmlAttribute("City")]
        [Bindable(true)]
        public string City
        {
            get { return GetColumnValue<string>(Columns.City); }
            set { SetColumnValue(Columns.City, value); }
        }

        [XmlAttribute("Region")]
        [Bindable(true)]
        public string Region
        {
            get { return GetColumnValue<string>(Columns.Region); }
            set { SetColumnValue(Columns.Region, value); }
        }

        [XmlAttribute("PostalCode")]
        [Bindable(true)]
        public string PostalCode
        {
            get { return GetColumnValue<string>(Columns.PostalCode); }
            set { SetColumnValue(Columns.PostalCode, value); }
        }

        [XmlAttribute("Country")]
        [Bindable(true)]
        public string Country
        {
            get { return GetColumnValue<string>(Columns.Country); }
            set { SetColumnValue(Columns.Country, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string OrderID = @"OrderID";
            public static string CustomerID = @"CustomerID";
            public static string EmployeeID = @"EmployeeID";
            public static string OrderDate = @"OrderDate";
            public static string RequiredDate = @"RequiredDate";
            public static string ShippedDate = @"ShippedDate";
            public static string ShipVia = @"ShipVia";
            public static string Freight = @"Freight";
            public static string ShipName = @"ShipName";
            public static string ShipAddress = @"ShipAddress";
            public static string ShipCity = @"ShipCity";
            public static string ShipRegion = @"ShipRegion";
            public static string ShipPostalCode = @"ShipPostalCode";
            public static string ShipCountry = @"ShipCountry";
            public static string CompanyName = @"CompanyName";
            public static string Address = @"Address";
            public static string City = @"City";
            public static string Region = @"Region";
            public static string PostalCode = @"PostalCode";
            public static string Country = @"Country";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the ProductsAboveAveragePrice class.
    /// </summary>

    [Serializable]
    public partial class ProductsAboveAveragePriceCollection : ReadOnlyList<ProductsAboveAveragePrice, ProductsAboveAveragePriceCollection>
    {
        public ProductsAboveAveragePriceCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Products Above Average Price view.
    /// </summary>
    [Serializable]
    public partial class ProductsAboveAveragePrice : ReadOnlyRecord<ProductsAboveAveragePrice>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Products Above Average Price", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnProductName = new TableSchema.TableColumn(schema);
                columnProductName.ColumnName = "ProductName";
                columnProductName.DataType = DbType.String;
                columnProductName.MaxLength = 40;
                columnProductName.AutoIncrement = false;
                columnProductName.IsNullable = false;
                columnProductName.IsPrimaryKey = false;
                columnProductName.IsForeignKey = false;
                columnProductName.IsReadOnly = false;
                schema.Columns.Add(columnProductName);

                TableSchema.TableColumn columnUnitPrice = new TableSchema.TableColumn(schema);
                columnUnitPrice.ColumnName = "UnitPrice";
                columnUnitPrice.DataType = DbType.Currency;
                columnUnitPrice.MaxLength = 0;
                columnUnitPrice.AutoIncrement = false;
                columnUnitPrice.IsNullable = true;
                columnUnitPrice.IsPrimaryKey = false;
                columnUnitPrice.IsForeignKey = false;
                columnUnitPrice.IsReadOnly = false;
                schema.Columns.Add(columnUnitPrice);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Products Above Average Price", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public ProductsAboveAveragePrice()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public ProductsAboveAveragePrice(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public ProductsAboveAveragePrice(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public ProductsAboveAveragePrice(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("ProductName")]
        [Bindable(true)]
        public string ProductName
        {
            get { return GetColumnValue<string>(Columns.ProductName); }
            set { SetColumnValue(Columns.ProductName, value); }
        }

        [XmlAttribute("UnitPrice")]
        [Bindable(true)]
        public decimal UnitPrice
        {
            get { return GetColumnValue<decimal>(Columns.UnitPrice); }
            set { SetColumnValue(Columns.UnitPrice, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string ProductName = @"ProductName";
            public static string UnitPrice = @"UnitPrice";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the ProductsbyCategory class.
    /// </summary>

    [Serializable]
    public partial class ProductsbyCategoryCollection : ReadOnlyList<ProductsbyCategory, ProductsbyCategoryCollection>
    {
        public ProductsbyCategoryCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Products by Category view.
    /// </summary>
    [Serializable]
    public partial class ProductsbyCategory : ReadOnlyRecord<ProductsbyCategory>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Products by Category", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnCategoryName = new TableSchema.TableColumn(schema);
                columnCategoryName.ColumnName = "CategoryName";
                columnCategoryName.DataType = DbType.String;
                columnCategoryName.MaxLength = 15;
                columnCategoryName.AutoIncrement = false;
                columnCategoryName.IsNullable = false;
                columnCategoryName.IsPrimaryKey = false;
                columnCategoryName.IsForeignKey = false;
                columnCategoryName.IsReadOnly = false;
                schema.Columns.Add(columnCategoryName);

                TableSchema.TableColumn columnProductName = new TableSchema.TableColumn(schema);
                columnProductName.ColumnName = "ProductName";
                columnProductName.DataType = DbType.String;
                columnProductName.MaxLength = 40;
                columnProductName.AutoIncrement = false;
                columnProductName.IsNullable = false;
                columnProductName.IsPrimaryKey = false;
                columnProductName.IsForeignKey = false;
                columnProductName.IsReadOnly = false;
                schema.Columns.Add(columnProductName);

                TableSchema.TableColumn columnQuantityPerUnit = new TableSchema.TableColumn(schema);
                columnQuantityPerUnit.ColumnName = "QuantityPerUnit";
                columnQuantityPerUnit.DataType = DbType.String;
                columnQuantityPerUnit.MaxLength = 20;
                columnQuantityPerUnit.AutoIncrement = false;
                columnQuantityPerUnit.IsNullable = true;
                columnQuantityPerUnit.IsPrimaryKey = false;
                columnQuantityPerUnit.IsForeignKey = false;
                columnQuantityPerUnit.IsReadOnly = false;
                schema.Columns.Add(columnQuantityPerUnit);

                TableSchema.TableColumn columnUnitsInStock = new TableSchema.TableColumn(schema);
                columnUnitsInStock.ColumnName = "UnitsInStock";
                columnUnitsInStock.DataType = DbType.Int16;
                columnUnitsInStock.MaxLength = 0;
                columnUnitsInStock.AutoIncrement = false;
                columnUnitsInStock.IsNullable = true;
                columnUnitsInStock.IsPrimaryKey = false;
                columnUnitsInStock.IsForeignKey = false;
                columnUnitsInStock.IsReadOnly = false;
                schema.Columns.Add(columnUnitsInStock);

                TableSchema.TableColumn columnDiscontinued = new TableSchema.TableColumn(schema);
                columnDiscontinued.ColumnName = "Discontinued";
                columnDiscontinued.DataType = DbType.Boolean;
                columnDiscontinued.MaxLength = 0;
                columnDiscontinued.AutoIncrement = false;
                columnDiscontinued.IsNullable = false;
                columnDiscontinued.IsPrimaryKey = false;
                columnDiscontinued.IsForeignKey = false;
                columnDiscontinued.IsReadOnly = false;
                schema.Columns.Add(columnDiscontinued);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Products by Category", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public ProductsbyCategory()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public ProductsbyCategory(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public ProductsbyCategory(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public ProductsbyCategory(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("CategoryName")]
        [Bindable(true)]
        public string CategoryName
        {
            get { return GetColumnValue<string>(Columns.CategoryName); }
            set { SetColumnValue(Columns.CategoryName, value); }
        }

        [XmlAttribute("ProductName")]
        [Bindable(true)]
        public string ProductName
        {
            get { return GetColumnValue<string>(Columns.ProductName); }
            set { SetColumnValue(Columns.ProductName, value); }
        }

        [XmlAttribute("QuantityPerUnit")]
        [Bindable(true)]
        public string QuantityPerUnit
        {
            get { return GetColumnValue<string>(Columns.QuantityPerUnit); }
            set { SetColumnValue(Columns.QuantityPerUnit, value); }
        }

        [XmlAttribute("UnitsInStock")]
        [Bindable(true)]
        public short UnitsInStock
        {
            get { return GetColumnValue<short>(Columns.UnitsInStock); }
            set { SetColumnValue(Columns.UnitsInStock, value); }
        }

        [XmlAttribute("Discontinued")]
        [Bindable(true)]
        public bool Discontinued
        {
            get { return GetColumnValue<bool>(Columns.Discontinued); }
            set { SetColumnValue(Columns.Discontinued, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string CategoryName = @"CategoryName";
            public static string ProductName = @"ProductName";
            public static string QuantityPerUnit = @"QuantityPerUnit";
            public static string UnitsInStock = @"UnitsInStock";
            public static string Discontinued = @"Discontinued";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the QuarterlyOrder class.
    /// </summary>

    [Serializable]
    public partial class QuarterlyOrderCollection : ReadOnlyList<QuarterlyOrder, QuarterlyOrderCollection>
    {
        public QuarterlyOrderCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Quarterly Orders view.
    /// </summary>
    [Serializable]
    public partial class QuarterlyOrder : ReadOnlyRecord<QuarterlyOrder>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Quarterly Orders", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnCustomerID = new TableSchema.TableColumn(schema);
                columnCustomerID.ColumnName = "CustomerID";
                columnCustomerID.DataType = DbType.StringFixedLength;
                columnCustomerID.MaxLength = 5;
                columnCustomerID.AutoIncrement = false;
                columnCustomerID.IsNullable = true;
                columnCustomerID.IsPrimaryKey = false;
                columnCustomerID.IsForeignKey = false;
                columnCustomerID.IsReadOnly = false;
                schema.Columns.Add(columnCustomerID);

                TableSchema.TableColumn columnCompanyName = new TableSchema.TableColumn(schema);
                columnCompanyName.ColumnName = "CompanyName";
                columnCompanyName.DataType = DbType.String;
                columnCompanyName.MaxLength = 40;
                columnCompanyName.AutoIncrement = false;
                columnCompanyName.IsNullable = true;
                columnCompanyName.IsPrimaryKey = false;
                columnCompanyName.IsForeignKey = false;
                columnCompanyName.IsReadOnly = false;
                schema.Columns.Add(columnCompanyName);

                TableSchema.TableColumn columnCity = new TableSchema.TableColumn(schema);
                columnCity.ColumnName = "City";
                columnCity.DataType = DbType.String;
                columnCity.MaxLength = 15;
                columnCity.AutoIncrement = false;
                columnCity.IsNullable = true;
                columnCity.IsPrimaryKey = false;
                columnCity.IsForeignKey = false;
                columnCity.IsReadOnly = false;
                schema.Columns.Add(columnCity);

                TableSchema.TableColumn columnCountry = new TableSchema.TableColumn(schema);
                columnCountry.ColumnName = "Country";
                columnCountry.DataType = DbType.String;
                columnCountry.MaxLength = 15;
                columnCountry.AutoIncrement = false;
                columnCountry.IsNullable = true;
                columnCountry.IsPrimaryKey = false;
                columnCountry.IsForeignKey = false;
                columnCountry.IsReadOnly = false;
                schema.Columns.Add(columnCountry);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Quarterly Orders", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public QuarterlyOrder()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public QuarterlyOrder(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public QuarterlyOrder(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public QuarterlyOrder(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("CustomerID")]
        [Bindable(true)]
        public string CustomerID
        {
            get { return GetColumnValue<string>(Columns.CustomerID); }
            set { SetColumnValue(Columns.CustomerID, value); }
        }

        [XmlAttribute("CompanyName")]
        [Bindable(true)]
        public string CompanyName
        {
            get { return GetColumnValue<string>(Columns.CompanyName); }
            set { SetColumnValue(Columns.CompanyName, value); }
        }

        [XmlAttribute("City")]
        [Bindable(true)]
        public string City
        {
            get { return GetColumnValue<string>(Columns.City); }
            set { SetColumnValue(Columns.City, value); }
        }

        [XmlAttribute("Country")]
        [Bindable(true)]
        public string Country
        {
            get { return GetColumnValue<string>(Columns.Country); }
            set { SetColumnValue(Columns.Country, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string CustomerID = @"CustomerID";
            public static string CompanyName = @"CompanyName";
            public static string City = @"City";
            public static string Country = @"Country";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the Invoice class.
    /// </summary>

    [Serializable]
    public partial class InvoiceCollection : ReadOnlyList<Invoice, InvoiceCollection>
    {
        public InvoiceCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Invoices view.
    /// </summary>
    [Serializable]
    public partial class Invoice : ReadOnlyRecord<Invoice>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Invoices", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnShipName = new TableSchema.TableColumn(schema);
                columnShipName.ColumnName = "ShipName";
                columnShipName.DataType = DbType.String;
                columnShipName.MaxLength = 40;
                columnShipName.AutoIncrement = false;
                columnShipName.IsNullable = true;
                columnShipName.IsPrimaryKey = false;
                columnShipName.IsForeignKey = false;
                columnShipName.IsReadOnly = false;
                schema.Columns.Add(columnShipName);

                TableSchema.TableColumn columnShipAddress = new TableSchema.TableColumn(schema);
                columnShipAddress.ColumnName = "ShipAddress";
                columnShipAddress.DataType = DbType.String;
                columnShipAddress.MaxLength = 60;
                columnShipAddress.AutoIncrement = false;
                columnShipAddress.IsNullable = true;
                columnShipAddress.IsPrimaryKey = false;
                columnShipAddress.IsForeignKey = false;
                columnShipAddress.IsReadOnly = false;
                schema.Columns.Add(columnShipAddress);

                TableSchema.TableColumn columnShipCity = new TableSchema.TableColumn(schema);
                columnShipCity.ColumnName = "ShipCity";
                columnShipCity.DataType = DbType.String;
                columnShipCity.MaxLength = 15;
                columnShipCity.AutoIncrement = false;
                columnShipCity.IsNullable = true;
                columnShipCity.IsPrimaryKey = false;
                columnShipCity.IsForeignKey = false;
                columnShipCity.IsReadOnly = false;
                schema.Columns.Add(columnShipCity);

                TableSchema.TableColumn columnShipRegion = new TableSchema.TableColumn(schema);
                columnShipRegion.ColumnName = "ShipRegion";
                columnShipRegion.DataType = DbType.String;
                columnShipRegion.MaxLength = 15;
                columnShipRegion.AutoIncrement = false;
                columnShipRegion.IsNullable = true;
                columnShipRegion.IsPrimaryKey = false;
                columnShipRegion.IsForeignKey = false;
                columnShipRegion.IsReadOnly = false;
                schema.Columns.Add(columnShipRegion);

                TableSchema.TableColumn columnShipPostalCode = new TableSchema.TableColumn(schema);
                columnShipPostalCode.ColumnName = "ShipPostalCode";
                columnShipPostalCode.DataType = DbType.String;
                columnShipPostalCode.MaxLength = 10;
                columnShipPostalCode.AutoIncrement = false;
                columnShipPostalCode.IsNullable = true;
                columnShipPostalCode.IsPrimaryKey = false;
                columnShipPostalCode.IsForeignKey = false;
                columnShipPostalCode.IsReadOnly = false;
                schema.Columns.Add(columnShipPostalCode);

                TableSchema.TableColumn columnShipCountry = new TableSchema.TableColumn(schema);
                columnShipCountry.ColumnName = "ShipCountry";
                columnShipCountry.DataType = DbType.String;
                columnShipCountry.MaxLength = 15;
                columnShipCountry.AutoIncrement = false;
                columnShipCountry.IsNullable = true;
                columnShipCountry.IsPrimaryKey = false;
                columnShipCountry.IsForeignKey = false;
                columnShipCountry.IsReadOnly = false;
                schema.Columns.Add(columnShipCountry);

                TableSchema.TableColumn columnCustomerID = new TableSchema.TableColumn(schema);
                columnCustomerID.ColumnName = "CustomerID";
                columnCustomerID.DataType = DbType.StringFixedLength;
                columnCustomerID.MaxLength = 5;
                columnCustomerID.AutoIncrement = false;
                columnCustomerID.IsNullable = true;
                columnCustomerID.IsPrimaryKey = false;
                columnCustomerID.IsForeignKey = false;
                columnCustomerID.IsReadOnly = false;
                schema.Columns.Add(columnCustomerID);

                TableSchema.TableColumn columnCustomerName = new TableSchema.TableColumn(schema);
                columnCustomerName.ColumnName = "CustomerName";
                columnCustomerName.DataType = DbType.String;
                columnCustomerName.MaxLength = 40;
                columnCustomerName.AutoIncrement = false;
                columnCustomerName.IsNullable = false;
                columnCustomerName.IsPrimaryKey = false;
                columnCustomerName.IsForeignKey = false;
                columnCustomerName.IsReadOnly = false;
                schema.Columns.Add(columnCustomerName);

                TableSchema.TableColumn columnAddress = new TableSchema.TableColumn(schema);
                columnAddress.ColumnName = "Address";
                columnAddress.DataType = DbType.String;
                columnAddress.MaxLength = 60;
                columnAddress.AutoIncrement = false;
                columnAddress.IsNullable = true;
                columnAddress.IsPrimaryKey = false;
                columnAddress.IsForeignKey = false;
                columnAddress.IsReadOnly = false;
                schema.Columns.Add(columnAddress);

                TableSchema.TableColumn columnCity = new TableSchema.TableColumn(schema);
                columnCity.ColumnName = "City";
                columnCity.DataType = DbType.String;
                columnCity.MaxLength = 15;
                columnCity.AutoIncrement = false;
                columnCity.IsNullable = true;
                columnCity.IsPrimaryKey = false;
                columnCity.IsForeignKey = false;
                columnCity.IsReadOnly = false;
                schema.Columns.Add(columnCity);

                TableSchema.TableColumn columnRegion = new TableSchema.TableColumn(schema);
                columnRegion.ColumnName = "Region";
                columnRegion.DataType = DbType.String;
                columnRegion.MaxLength = 15;
                columnRegion.AutoIncrement = false;
                columnRegion.IsNullable = true;
                columnRegion.IsPrimaryKey = false;
                columnRegion.IsForeignKey = false;
                columnRegion.IsReadOnly = false;
                schema.Columns.Add(columnRegion);

                TableSchema.TableColumn columnPostalCode = new TableSchema.TableColumn(schema);
                columnPostalCode.ColumnName = "PostalCode";
                columnPostalCode.DataType = DbType.String;
                columnPostalCode.MaxLength = 10;
                columnPostalCode.AutoIncrement = false;
                columnPostalCode.IsNullable = true;
                columnPostalCode.IsPrimaryKey = false;
                columnPostalCode.IsForeignKey = false;
                columnPostalCode.IsReadOnly = false;
                schema.Columns.Add(columnPostalCode);

                TableSchema.TableColumn columnCountry = new TableSchema.TableColumn(schema);
                columnCountry.ColumnName = "Country";
                columnCountry.DataType = DbType.String;
                columnCountry.MaxLength = 15;
                columnCountry.AutoIncrement = false;
                columnCountry.IsNullable = true;
                columnCountry.IsPrimaryKey = false;
                columnCountry.IsForeignKey = false;
                columnCountry.IsReadOnly = false;
                schema.Columns.Add(columnCountry);

                TableSchema.TableColumn columnSalesperson = new TableSchema.TableColumn(schema);
                columnSalesperson.ColumnName = "Salesperson";
                columnSalesperson.DataType = DbType.String;
                columnSalesperson.MaxLength = 31;
                columnSalesperson.AutoIncrement = false;
                columnSalesperson.IsNullable = false;
                columnSalesperson.IsPrimaryKey = false;
                columnSalesperson.IsForeignKey = false;
                columnSalesperson.IsReadOnly = true;
                schema.Columns.Add(columnSalesperson);

                TableSchema.TableColumn columnOrderID = new TableSchema.TableColumn(schema);
                columnOrderID.ColumnName = "OrderID";
                columnOrderID.DataType = DbType.Int32;
                columnOrderID.MaxLength = 0;
                columnOrderID.AutoIncrement = false;
                columnOrderID.IsNullable = false;
                columnOrderID.IsPrimaryKey = false;
                columnOrderID.IsForeignKey = false;
                columnOrderID.IsReadOnly = false;
                schema.Columns.Add(columnOrderID);

                TableSchema.TableColumn columnOrderDate = new TableSchema.TableColumn(schema);
                columnOrderDate.ColumnName = "OrderDate";
                columnOrderDate.DataType = DbType.DateTime;
                columnOrderDate.MaxLength = 0;
                columnOrderDate.AutoIncrement = false;
                columnOrderDate.IsNullable = true;
                columnOrderDate.IsPrimaryKey = false;
                columnOrderDate.IsForeignKey = false;
                columnOrderDate.IsReadOnly = false;
                schema.Columns.Add(columnOrderDate);

                TableSchema.TableColumn columnRequiredDate = new TableSchema.TableColumn(schema);
                columnRequiredDate.ColumnName = "RequiredDate";
                columnRequiredDate.DataType = DbType.DateTime;
                columnRequiredDate.MaxLength = 0;
                columnRequiredDate.AutoIncrement = false;
                columnRequiredDate.IsNullable = true;
                columnRequiredDate.IsPrimaryKey = false;
                columnRequiredDate.IsForeignKey = false;
                columnRequiredDate.IsReadOnly = false;
                schema.Columns.Add(columnRequiredDate);

                TableSchema.TableColumn columnShippedDate = new TableSchema.TableColumn(schema);
                columnShippedDate.ColumnName = "ShippedDate";
                columnShippedDate.DataType = DbType.DateTime;
                columnShippedDate.MaxLength = 0;
                columnShippedDate.AutoIncrement = false;
                columnShippedDate.IsNullable = true;
                columnShippedDate.IsPrimaryKey = false;
                columnShippedDate.IsForeignKey = false;
                columnShippedDate.IsReadOnly = false;
                schema.Columns.Add(columnShippedDate);

                TableSchema.TableColumn columnShipperName = new TableSchema.TableColumn(schema);
                columnShipperName.ColumnName = "ShipperName";
                columnShipperName.DataType = DbType.String;
                columnShipperName.MaxLength = 40;
                columnShipperName.AutoIncrement = false;
                columnShipperName.IsNullable = false;
                columnShipperName.IsPrimaryKey = false;
                columnShipperName.IsForeignKey = false;
                columnShipperName.IsReadOnly = false;
                schema.Columns.Add(columnShipperName);

                TableSchema.TableColumn columnProductID = new TableSchema.TableColumn(schema);
                columnProductID.ColumnName = "ProductID";
                columnProductID.DataType = DbType.Int32;
                columnProductID.MaxLength = 0;
                columnProductID.AutoIncrement = false;
                columnProductID.IsNullable = false;
                columnProductID.IsPrimaryKey = false;
                columnProductID.IsForeignKey = false;
                columnProductID.IsReadOnly = false;
                schema.Columns.Add(columnProductID);

                TableSchema.TableColumn columnProductName = new TableSchema.TableColumn(schema);
                columnProductName.ColumnName = "ProductName";
                columnProductName.DataType = DbType.String;
                columnProductName.MaxLength = 40;
                columnProductName.AutoIncrement = false;
                columnProductName.IsNullable = false;
                columnProductName.IsPrimaryKey = false;
                columnProductName.IsForeignKey = false;
                columnProductName.IsReadOnly = false;
                schema.Columns.Add(columnProductName);

                TableSchema.TableColumn columnUnitPrice = new TableSchema.TableColumn(schema);
                columnUnitPrice.ColumnName = "UnitPrice";
                columnUnitPrice.DataType = DbType.Currency;
                columnUnitPrice.MaxLength = 0;
                columnUnitPrice.AutoIncrement = false;
                columnUnitPrice.IsNullable = false;
                columnUnitPrice.IsPrimaryKey = false;
                columnUnitPrice.IsForeignKey = false;
                columnUnitPrice.IsReadOnly = false;
                schema.Columns.Add(columnUnitPrice);

                TableSchema.TableColumn columnQuantity = new TableSchema.TableColumn(schema);
                columnQuantity.ColumnName = "Quantity";
                columnQuantity.DataType = DbType.Int16;
                columnQuantity.MaxLength = 0;
                columnQuantity.AutoIncrement = false;
                columnQuantity.IsNullable = false;
                columnQuantity.IsPrimaryKey = false;
                columnQuantity.IsForeignKey = false;
                columnQuantity.IsReadOnly = false;
                schema.Columns.Add(columnQuantity);

                TableSchema.TableColumn columnDiscount = new TableSchema.TableColumn(schema);
                columnDiscount.ColumnName = "Discount";
                columnDiscount.DataType = DbType.Single;
                columnDiscount.MaxLength = 0;
                columnDiscount.AutoIncrement = false;
                columnDiscount.IsNullable = false;
                columnDiscount.IsPrimaryKey = false;
                columnDiscount.IsForeignKey = false;
                columnDiscount.IsReadOnly = false;
                schema.Columns.Add(columnDiscount);

                TableSchema.TableColumn columnExtendedPrice = new TableSchema.TableColumn(schema);
                columnExtendedPrice.ColumnName = "ExtendedPrice";
                columnExtendedPrice.DataType = DbType.Currency;
                columnExtendedPrice.MaxLength = 0;
                columnExtendedPrice.AutoIncrement = false;
                columnExtendedPrice.IsNullable = true;
                columnExtendedPrice.IsPrimaryKey = false;
                columnExtendedPrice.IsForeignKey = false;
                columnExtendedPrice.IsReadOnly = true;
                schema.Columns.Add(columnExtendedPrice);

                TableSchema.TableColumn columnFreight = new TableSchema.TableColumn(schema);
                columnFreight.ColumnName = "Freight";
                columnFreight.DataType = DbType.Currency;
                columnFreight.MaxLength = 0;
                columnFreight.AutoIncrement = false;
                columnFreight.IsNullable = true;
                columnFreight.IsPrimaryKey = false;
                columnFreight.IsForeignKey = false;
                columnFreight.IsReadOnly = false;
                schema.Columns.Add(columnFreight);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Invoices", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public Invoice()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public Invoice(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public Invoice(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public Invoice(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("ShipName")]
        [Bindable(true)]
        public string ShipName
        {
            get { return GetColumnValue<string>(Columns.ShipName); }
            set { SetColumnValue(Columns.ShipName, value); }
        }

        [XmlAttribute("ShipAddress")]
        [Bindable(true)]
        public string ShipAddress
        {
            get { return GetColumnValue<string>(Columns.ShipAddress); }
            set { SetColumnValue(Columns.ShipAddress, value); }
        }

        [XmlAttribute("ShipCity")]
        [Bindable(true)]
        public string ShipCity
        {
            get { return GetColumnValue<string>(Columns.ShipCity); }
            set { SetColumnValue(Columns.ShipCity, value); }
        }

        [XmlAttribute("ShipRegion")]
        [Bindable(true)]
        public string ShipRegion
        {
            get { return GetColumnValue<string>(Columns.ShipRegion); }
            set { SetColumnValue(Columns.ShipRegion, value); }
        }

        [XmlAttribute("ShipPostalCode")]
        [Bindable(true)]
        public string ShipPostalCode
        {
            get { return GetColumnValue<string>(Columns.ShipPostalCode); }
            set { SetColumnValue(Columns.ShipPostalCode, value); }
        }

        [XmlAttribute("ShipCountry")]
        [Bindable(true)]
        public string ShipCountry
        {
            get { return GetColumnValue<string>(Columns.ShipCountry); }
            set { SetColumnValue(Columns.ShipCountry, value); }
        }

        [XmlAttribute("CustomerID")]
        [Bindable(true)]
        public string CustomerID
        {
            get { return GetColumnValue<string>(Columns.CustomerID); }
            set { SetColumnValue(Columns.CustomerID, value); }
        }

        [XmlAttribute("CustomerName")]
        [Bindable(true)]
        public string CustomerName
        {
            get { return GetColumnValue<string>(Columns.CustomerName); }
            set { SetColumnValue(Columns.CustomerName, value); }
        }

        [XmlAttribute("Address")]
        [Bindable(true)]
        public string Address
        {
            get { return GetColumnValue<string>(Columns.Address); }
            set { SetColumnValue(Columns.Address, value); }
        }

        [XmlAttribute("City")]
        [Bindable(true)]
        public string City
        {
            get { return GetColumnValue<string>(Columns.City); }
            set { SetColumnValue(Columns.City, value); }
        }

        [XmlAttribute("Region")]
        [Bindable(true)]
        public string Region
        {
            get { return GetColumnValue<string>(Columns.Region); }
            set { SetColumnValue(Columns.Region, value); }
        }

        [XmlAttribute("PostalCode")]
        [Bindable(true)]
        public string PostalCode
        {
            get { return GetColumnValue<string>(Columns.PostalCode); }
            set { SetColumnValue(Columns.PostalCode, value); }
        }

        [XmlAttribute("Country")]
        [Bindable(true)]
        public string Country
        {
            get { return GetColumnValue<string>(Columns.Country); }
            set { SetColumnValue(Columns.Country, value); }
        }

        [XmlAttribute("Salesperson")]
        [Bindable(true)]
        public string Salesperson
        {
            get { return GetColumnValue<string>(Columns.Salesperson); }
            set { SetColumnValue(Columns.Salesperson, value); }
        }

        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public int OrderID
        {
            get { return GetColumnValue<int>(Columns.OrderID); }
            set { SetColumnValue(Columns.OrderID, value); }
        }

        [XmlAttribute("OrderDate")]
        [Bindable(true)]
        public DateTime OrderDate
        {
            get { return GetColumnValue<DateTime>(Columns.OrderDate); }
            set { SetColumnValue(Columns.OrderDate, value); }
        }

        [XmlAttribute("RequiredDate")]
        [Bindable(true)]
        public DateTime RequiredDate
        {
            get { return GetColumnValue<DateTime>(Columns.RequiredDate); }
            set { SetColumnValue(Columns.RequiredDate, value); }
        }

        [XmlAttribute("ShippedDate")]
        [Bindable(true)]
        public DateTime ShippedDate
        {
            get { return GetColumnValue<DateTime>(Columns.ShippedDate); }
            set { SetColumnValue(Columns.ShippedDate, value); }
        }

        [XmlAttribute("ShipperName")]
        [Bindable(true)]
        public string ShipperName
        {
            get { return GetColumnValue<string>(Columns.ShipperName); }
            set { SetColumnValue(Columns.ShipperName, value); }
        }

        [XmlAttribute("ProductID")]
        [Bindable(true)]
        public int ProductID
        {
            get { return GetColumnValue<int>(Columns.ProductID); }
            set { SetColumnValue(Columns.ProductID, value); }
        }

        [XmlAttribute("ProductName")]
        [Bindable(true)]
        public string ProductName
        {
            get { return GetColumnValue<string>(Columns.ProductName); }
            set { SetColumnValue(Columns.ProductName, value); }
        }

        [XmlAttribute("UnitPrice")]
        [Bindable(true)]
        public decimal UnitPrice
        {
            get { return GetColumnValue<decimal>(Columns.UnitPrice); }
            set { SetColumnValue(Columns.UnitPrice, value); }
        }

        [XmlAttribute("Quantity")]
        [Bindable(true)]
        public short Quantity
        {
            get { return GetColumnValue<short>(Columns.Quantity); }
            set { SetColumnValue(Columns.Quantity, value); }
        }

        [XmlAttribute("Discount")]
        [Bindable(true)]
        public float Discount
        {
            get { return GetColumnValue<float>(Columns.Discount); }
            set { SetColumnValue(Columns.Discount, value); }
        }

        [XmlAttribute("ExtendedPrice")]
        [Bindable(true)]
        public decimal ExtendedPrice
        {
            get { return GetColumnValue<decimal>(Columns.ExtendedPrice); }
            set { SetColumnValue(Columns.ExtendedPrice, value); }
        }

        [XmlAttribute("Freight")]
        [Bindable(true)]
        public decimal Freight
        {
            get { return GetColumnValue<decimal>(Columns.Freight); }
            set { SetColumnValue(Columns.Freight, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string ShipName = @"ShipName";
            public static string ShipAddress = @"ShipAddress";
            public static string ShipCity = @"ShipCity";
            public static string ShipRegion = @"ShipRegion";
            public static string ShipPostalCode = @"ShipPostalCode";
            public static string ShipCountry = @"ShipCountry";
            public static string CustomerID = @"CustomerID";
            public static string CustomerName = @"CustomerName";
            public static string Address = @"Address";
            public static string City = @"City";
            public static string Region = @"Region";
            public static string PostalCode = @"PostalCode";
            public static string Country = @"Country";
            public static string Salesperson = @"Salesperson";
            public static string OrderID = @"OrderID";
            public static string OrderDate = @"OrderDate";
            public static string RequiredDate = @"RequiredDate";
            public static string ShippedDate = @"ShippedDate";
            public static string ShipperName = @"ShipperName";
            public static string ProductID = @"ProductID";
            public static string ProductName = @"ProductName";
            public static string UnitPrice = @"UnitPrice";
            public static string Quantity = @"Quantity";
            public static string Discount = @"Discount";
            public static string ExtendedPrice = @"ExtendedPrice";
            public static string Freight = @"Freight";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the OrderDetailsExtended class.
    /// </summary>

    [Serializable]
    public partial class OrderDetailsExtendedCollection : ReadOnlyList<OrderDetailsExtended, OrderDetailsExtendedCollection>
    {
        public OrderDetailsExtendedCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Order Details Extended view.
    /// </summary>
    [Serializable]
    public partial class OrderDetailsExtended : ReadOnlyRecord<OrderDetailsExtended>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Order Details Extended", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnOrderID = new TableSchema.TableColumn(schema);
                columnOrderID.ColumnName = "OrderID";
                columnOrderID.DataType = DbType.Int32;
                columnOrderID.MaxLength = 0;
                columnOrderID.AutoIncrement = false;
                columnOrderID.IsNullable = false;
                columnOrderID.IsPrimaryKey = false;
                columnOrderID.IsForeignKey = false;
                columnOrderID.IsReadOnly = false;
                schema.Columns.Add(columnOrderID);

                TableSchema.TableColumn columnProductID = new TableSchema.TableColumn(schema);
                columnProductID.ColumnName = "ProductID";
                columnProductID.DataType = DbType.Int32;
                columnProductID.MaxLength = 0;
                columnProductID.AutoIncrement = false;
                columnProductID.IsNullable = false;
                columnProductID.IsPrimaryKey = false;
                columnProductID.IsForeignKey = false;
                columnProductID.IsReadOnly = false;
                schema.Columns.Add(columnProductID);

                TableSchema.TableColumn columnProductName = new TableSchema.TableColumn(schema);
                columnProductName.ColumnName = "ProductName";
                columnProductName.DataType = DbType.String;
                columnProductName.MaxLength = 40;
                columnProductName.AutoIncrement = false;
                columnProductName.IsNullable = false;
                columnProductName.IsPrimaryKey = false;
                columnProductName.IsForeignKey = false;
                columnProductName.IsReadOnly = false;
                schema.Columns.Add(columnProductName);

                TableSchema.TableColumn columnUnitPrice = new TableSchema.TableColumn(schema);
                columnUnitPrice.ColumnName = "UnitPrice";
                columnUnitPrice.DataType = DbType.Currency;
                columnUnitPrice.MaxLength = 0;
                columnUnitPrice.AutoIncrement = false;
                columnUnitPrice.IsNullable = false;
                columnUnitPrice.IsPrimaryKey = false;
                columnUnitPrice.IsForeignKey = false;
                columnUnitPrice.IsReadOnly = false;
                schema.Columns.Add(columnUnitPrice);

                TableSchema.TableColumn columnQuantity = new TableSchema.TableColumn(schema);
                columnQuantity.ColumnName = "Quantity";
                columnQuantity.DataType = DbType.Int16;
                columnQuantity.MaxLength = 0;
                columnQuantity.AutoIncrement = false;
                columnQuantity.IsNullable = false;
                columnQuantity.IsPrimaryKey = false;
                columnQuantity.IsForeignKey = false;
                columnQuantity.IsReadOnly = false;
                schema.Columns.Add(columnQuantity);

                TableSchema.TableColumn columnDiscount = new TableSchema.TableColumn(schema);
                columnDiscount.ColumnName = "Discount";
                columnDiscount.DataType = DbType.Single;
                columnDiscount.MaxLength = 0;
                columnDiscount.AutoIncrement = false;
                columnDiscount.IsNullable = false;
                columnDiscount.IsPrimaryKey = false;
                columnDiscount.IsForeignKey = false;
                columnDiscount.IsReadOnly = false;
                schema.Columns.Add(columnDiscount);

                TableSchema.TableColumn columnExtendedPrice = new TableSchema.TableColumn(schema);
                columnExtendedPrice.ColumnName = "ExtendedPrice";
                columnExtendedPrice.DataType = DbType.Currency;
                columnExtendedPrice.MaxLength = 0;
                columnExtendedPrice.AutoIncrement = false;
                columnExtendedPrice.IsNullable = true;
                columnExtendedPrice.IsPrimaryKey = false;
                columnExtendedPrice.IsForeignKey = false;
                columnExtendedPrice.IsReadOnly = true;
                schema.Columns.Add(columnExtendedPrice);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Order Details Extended", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public OrderDetailsExtended()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public OrderDetailsExtended(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public OrderDetailsExtended(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public OrderDetailsExtended(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public int OrderID
        {
            get { return GetColumnValue<int>(Columns.OrderID); }
            set { SetColumnValue(Columns.OrderID, value); }
        }

        [XmlAttribute("ProductID")]
        [Bindable(true)]
        public int ProductID
        {
            get { return GetColumnValue<int>(Columns.ProductID); }
            set { SetColumnValue(Columns.ProductID, value); }
        }

        [XmlAttribute("ProductName")]
        [Bindable(true)]
        public string ProductName
        {
            get { return GetColumnValue<string>(Columns.ProductName); }
            set { SetColumnValue(Columns.ProductName, value); }
        }

        [XmlAttribute("UnitPrice")]
        [Bindable(true)]
        public decimal UnitPrice
        {
            get { return GetColumnValue<decimal>(Columns.UnitPrice); }
            set { SetColumnValue(Columns.UnitPrice, value); }
        }

        [XmlAttribute("Quantity")]
        [Bindable(true)]
        public short Quantity
        {
            get { return GetColumnValue<short>(Columns.Quantity); }
            set { SetColumnValue(Columns.Quantity, value); }
        }

        [XmlAttribute("Discount")]
        [Bindable(true)]
        public float Discount
        {
            get { return GetColumnValue<float>(Columns.Discount); }
            set { SetColumnValue(Columns.Discount, value); }
        }

        [XmlAttribute("ExtendedPrice")]
        [Bindable(true)]
        public decimal ExtendedPrice
        {
            get { return GetColumnValue<decimal>(Columns.ExtendedPrice); }
            set { SetColumnValue(Columns.ExtendedPrice, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string OrderID = @"OrderID";
            public static string ProductID = @"ProductID";
            public static string ProductName = @"ProductName";
            public static string UnitPrice = @"UnitPrice";
            public static string Quantity = @"Quantity";
            public static string Discount = @"Discount";
            public static string ExtendedPrice = @"ExtendedPrice";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the OrderSubtotal class.
    /// </summary>

    [Serializable]
    public partial class OrderSubtotalCollection : ReadOnlyList<OrderSubtotal, OrderSubtotalCollection>
    {
        public OrderSubtotalCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Order Subtotals view.
    /// </summary>
    [Serializable]
    public partial class OrderSubtotal : ReadOnlyRecord<OrderSubtotal>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Order Subtotals", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnOrderID = new TableSchema.TableColumn(schema);
                columnOrderID.ColumnName = "OrderID";
                columnOrderID.DataType = DbType.Int32;
                columnOrderID.MaxLength = 0;
                columnOrderID.AutoIncrement = false;
                columnOrderID.IsNullable = false;
                columnOrderID.IsPrimaryKey = false;
                columnOrderID.IsForeignKey = false;
                columnOrderID.IsReadOnly = false;
                schema.Columns.Add(columnOrderID);

                TableSchema.TableColumn columnSubtotal = new TableSchema.TableColumn(schema);
                columnSubtotal.ColumnName = "Subtotal";
                columnSubtotal.DataType = DbType.Currency;
                columnSubtotal.MaxLength = 0;
                columnSubtotal.AutoIncrement = false;
                columnSubtotal.IsNullable = true;
                columnSubtotal.IsPrimaryKey = false;
                columnSubtotal.IsForeignKey = false;
                columnSubtotal.IsReadOnly = false;
                schema.Columns.Add(columnSubtotal);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Order Subtotals", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public OrderSubtotal()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public OrderSubtotal(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public OrderSubtotal(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public OrderSubtotal(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public int OrderID
        {
            get { return GetColumnValue<int>(Columns.OrderID); }
            set { SetColumnValue(Columns.OrderID, value); }
        }

        [XmlAttribute("Subtotal")]
        [Bindable(true)]
        public decimal Subtotal
        {
            get { return GetColumnValue<decimal>(Columns.Subtotal); }
            set { SetColumnValue(Columns.Subtotal, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string OrderID = @"OrderID";
            public static string Subtotal = @"Subtotal";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the ProductSalesfor1997 class.
    /// </summary>

    [Serializable]
    public partial class ProductSalesfor1997Collection : ReadOnlyList<ProductSalesfor1997, ProductSalesfor1997Collection>
    {
        public ProductSalesfor1997Collection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Product Sales for 1997 view.
    /// </summary>
    [Serializable]
    public partial class ProductSalesfor1997 : ReadOnlyRecord<ProductSalesfor1997>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Product Sales for 1997", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnCategoryName = new TableSchema.TableColumn(schema);
                columnCategoryName.ColumnName = "CategoryName";
                columnCategoryName.DataType = DbType.String;
                columnCategoryName.MaxLength = 15;
                columnCategoryName.AutoIncrement = false;
                columnCategoryName.IsNullable = false;
                columnCategoryName.IsPrimaryKey = false;
                columnCategoryName.IsForeignKey = false;
                columnCategoryName.IsReadOnly = false;
                schema.Columns.Add(columnCategoryName);

                TableSchema.TableColumn columnProductName = new TableSchema.TableColumn(schema);
                columnProductName.ColumnName = "ProductName";
                columnProductName.DataType = DbType.String;
                columnProductName.MaxLength = 40;
                columnProductName.AutoIncrement = false;
                columnProductName.IsNullable = false;
                columnProductName.IsPrimaryKey = false;
                columnProductName.IsForeignKey = false;
                columnProductName.IsReadOnly = false;
                schema.Columns.Add(columnProductName);

                TableSchema.TableColumn columnProductSales = new TableSchema.TableColumn(schema);
                columnProductSales.ColumnName = "ProductSales";
                columnProductSales.DataType = DbType.Currency;
                columnProductSales.MaxLength = 0;
                columnProductSales.AutoIncrement = false;
                columnProductSales.IsNullable = true;
                columnProductSales.IsPrimaryKey = false;
                columnProductSales.IsForeignKey = false;
                columnProductSales.IsReadOnly = false;
                schema.Columns.Add(columnProductSales);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Product Sales for 1997", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public ProductSalesfor1997()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public ProductSalesfor1997(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public ProductSalesfor1997(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public ProductSalesfor1997(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("CategoryName")]
        [Bindable(true)]
        public string CategoryName
        {
            get { return GetColumnValue<string>(Columns.CategoryName); }
            set { SetColumnValue(Columns.CategoryName, value); }
        }

        [XmlAttribute("ProductName")]
        [Bindable(true)]
        public string ProductName
        {
            get { return GetColumnValue<string>(Columns.ProductName); }
            set { SetColumnValue(Columns.ProductName, value); }
        }

        [XmlAttribute("ProductSales")]
        [Bindable(true)]
        public decimal ProductSales
        {
            get { return GetColumnValue<decimal>(Columns.ProductSales); }
            set { SetColumnValue(Columns.ProductSales, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string CategoryName = @"CategoryName";
            public static string ProductName = @"ProductName";
            public static string ProductSales = @"ProductSales";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the CategorySalesfor1997 class.
    /// </summary>

    [Serializable]
    public partial class CategorySalesfor1997Collection : ReadOnlyList<CategorySalesfor1997, CategorySalesfor1997Collection>
    {
        public CategorySalesfor1997Collection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Category Sales for 1997 view.
    /// </summary>
    [Serializable]
    public partial class CategorySalesfor1997 : ReadOnlyRecord<CategorySalesfor1997>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Category Sales for 1997", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnCategoryName = new TableSchema.TableColumn(schema);
                columnCategoryName.ColumnName = "CategoryName";
                columnCategoryName.DataType = DbType.String;
                columnCategoryName.MaxLength = 15;
                columnCategoryName.AutoIncrement = false;
                columnCategoryName.IsNullable = false;
                columnCategoryName.IsPrimaryKey = false;
                columnCategoryName.IsForeignKey = false;
                columnCategoryName.IsReadOnly = false;
                schema.Columns.Add(columnCategoryName);

                TableSchema.TableColumn columnCategorySales = new TableSchema.TableColumn(schema);
                columnCategorySales.ColumnName = "CategorySales";
                columnCategorySales.DataType = DbType.Currency;
                columnCategorySales.MaxLength = 0;
                columnCategorySales.AutoIncrement = false;
                columnCategorySales.IsNullable = true;
                columnCategorySales.IsPrimaryKey = false;
                columnCategorySales.IsForeignKey = false;
                columnCategorySales.IsReadOnly = false;
                schema.Columns.Add(columnCategorySales);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Category Sales for 1997", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public CategorySalesfor1997()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public CategorySalesfor1997(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public CategorySalesfor1997(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public CategorySalesfor1997(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("CategoryName")]
        [Bindable(true)]
        public string CategoryName
        {
            get { return GetColumnValue<string>(Columns.CategoryName); }
            set { SetColumnValue(Columns.CategoryName, value); }
        }

        [XmlAttribute("CategorySales")]
        [Bindable(true)]
        public decimal CategorySales
        {
            get { return GetColumnValue<decimal>(Columns.CategorySales); }
            set { SetColumnValue(Columns.CategorySales, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string CategoryName = @"CategoryName";
            public static string CategorySales = @"CategorySales";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the SalesbyCategory class.
    /// </summary>

    [Serializable]
    public partial class SalesbyCategoryCollection : ReadOnlyList<SalesbyCategory, SalesbyCategoryCollection>
    {
        public SalesbyCategoryCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Sales by Category view.
    /// </summary>
    [Serializable]
    public partial class SalesbyCategory : ReadOnlyRecord<SalesbyCategory>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Sales by Category", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnCategoryID = new TableSchema.TableColumn(schema);
                columnCategoryID.ColumnName = "CategoryID";
                columnCategoryID.DataType = DbType.Int32;
                columnCategoryID.MaxLength = 0;
                columnCategoryID.AutoIncrement = false;
                columnCategoryID.IsNullable = false;
                columnCategoryID.IsPrimaryKey = false;
                columnCategoryID.IsForeignKey = false;
                columnCategoryID.IsReadOnly = false;
                schema.Columns.Add(columnCategoryID);

                TableSchema.TableColumn columnCategoryName = new TableSchema.TableColumn(schema);
                columnCategoryName.ColumnName = "CategoryName";
                columnCategoryName.DataType = DbType.String;
                columnCategoryName.MaxLength = 15;
                columnCategoryName.AutoIncrement = false;
                columnCategoryName.IsNullable = false;
                columnCategoryName.IsPrimaryKey = false;
                columnCategoryName.IsForeignKey = false;
                columnCategoryName.IsReadOnly = false;
                schema.Columns.Add(columnCategoryName);

                TableSchema.TableColumn columnProductName = new TableSchema.TableColumn(schema);
                columnProductName.ColumnName = "ProductName";
                columnProductName.DataType = DbType.String;
                columnProductName.MaxLength = 40;
                columnProductName.AutoIncrement = false;
                columnProductName.IsNullable = false;
                columnProductName.IsPrimaryKey = false;
                columnProductName.IsForeignKey = false;
                columnProductName.IsReadOnly = false;
                schema.Columns.Add(columnProductName);

                TableSchema.TableColumn columnProductSales = new TableSchema.TableColumn(schema);
                columnProductSales.ColumnName = "ProductSales";
                columnProductSales.DataType = DbType.Currency;
                columnProductSales.MaxLength = 0;
                columnProductSales.AutoIncrement = false;
                columnProductSales.IsNullable = true;
                columnProductSales.IsPrimaryKey = false;
                columnProductSales.IsForeignKey = false;
                columnProductSales.IsReadOnly = false;
                schema.Columns.Add(columnProductSales);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Sales by Category", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public SalesbyCategory()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public SalesbyCategory(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public SalesbyCategory(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public SalesbyCategory(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("CategoryID")]
        [Bindable(true)]
        public int CategoryID
        {
            get { return GetColumnValue<int>(Columns.CategoryID); }
            set { SetColumnValue(Columns.CategoryID, value); }
        }

        [XmlAttribute("CategoryName")]
        [Bindable(true)]
        public string CategoryName
        {
            get { return GetColumnValue<string>(Columns.CategoryName); }
            set { SetColumnValue(Columns.CategoryName, value); }
        }

        [XmlAttribute("ProductName")]
        [Bindable(true)]
        public string ProductName
        {
            get { return GetColumnValue<string>(Columns.ProductName); }
            set { SetColumnValue(Columns.ProductName, value); }
        }

        [XmlAttribute("ProductSales")]
        [Bindable(true)]
        public decimal ProductSales
        {
            get { return GetColumnValue<decimal>(Columns.ProductSales); }
            set { SetColumnValue(Columns.ProductSales, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string CategoryID = @"CategoryID";
            public static string CategoryName = @"CategoryName";
            public static string ProductName = @"ProductName";
            public static string ProductSales = @"ProductSales";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the SalesTotalsbyAmount class.
    /// </summary>

    [Serializable]
    public partial class SalesTotalsbyAmountCollection : ReadOnlyList<SalesTotalsbyAmount, SalesTotalsbyAmountCollection>
    {
        public SalesTotalsbyAmountCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Sales Totals by Amount view.
    /// </summary>
    [Serializable]
    public partial class SalesTotalsbyAmount : ReadOnlyRecord<SalesTotalsbyAmount>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Sales Totals by Amount", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnSaleAmount = new TableSchema.TableColumn(schema);
                columnSaleAmount.ColumnName = "SaleAmount";
                columnSaleAmount.DataType = DbType.Currency;
                columnSaleAmount.MaxLength = 0;
                columnSaleAmount.AutoIncrement = false;
                columnSaleAmount.IsNullable = true;
                columnSaleAmount.IsPrimaryKey = false;
                columnSaleAmount.IsForeignKey = false;
                columnSaleAmount.IsReadOnly = false;
                schema.Columns.Add(columnSaleAmount);

                TableSchema.TableColumn columnOrderID = new TableSchema.TableColumn(schema);
                columnOrderID.ColumnName = "OrderID";
                columnOrderID.DataType = DbType.Int32;
                columnOrderID.MaxLength = 0;
                columnOrderID.AutoIncrement = false;
                columnOrderID.IsNullable = false;
                columnOrderID.IsPrimaryKey = false;
                columnOrderID.IsForeignKey = false;
                columnOrderID.IsReadOnly = false;
                schema.Columns.Add(columnOrderID);

                TableSchema.TableColumn columnCompanyName = new TableSchema.TableColumn(schema);
                columnCompanyName.ColumnName = "CompanyName";
                columnCompanyName.DataType = DbType.String;
                columnCompanyName.MaxLength = 40;
                columnCompanyName.AutoIncrement = false;
                columnCompanyName.IsNullable = false;
                columnCompanyName.IsPrimaryKey = false;
                columnCompanyName.IsForeignKey = false;
                columnCompanyName.IsReadOnly = false;
                schema.Columns.Add(columnCompanyName);

                TableSchema.TableColumn columnShippedDate = new TableSchema.TableColumn(schema);
                columnShippedDate.ColumnName = "ShippedDate";
                columnShippedDate.DataType = DbType.DateTime;
                columnShippedDate.MaxLength = 0;
                columnShippedDate.AutoIncrement = false;
                columnShippedDate.IsNullable = true;
                columnShippedDate.IsPrimaryKey = false;
                columnShippedDate.IsForeignKey = false;
                columnShippedDate.IsReadOnly = false;
                schema.Columns.Add(columnShippedDate);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Sales Totals by Amount", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public SalesTotalsbyAmount()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public SalesTotalsbyAmount(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public SalesTotalsbyAmount(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public SalesTotalsbyAmount(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("SaleAmount")]
        [Bindable(true)]
        public decimal SaleAmount
        {
            get { return GetColumnValue<decimal>(Columns.SaleAmount); }
            set { SetColumnValue(Columns.SaleAmount, value); }
        }

        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public int OrderID
        {
            get { return GetColumnValue<int>(Columns.OrderID); }
            set { SetColumnValue(Columns.OrderID, value); }
        }

        [XmlAttribute("CompanyName")]
        [Bindable(true)]
        public string CompanyName
        {
            get { return GetColumnValue<string>(Columns.CompanyName); }
            set { SetColumnValue(Columns.CompanyName, value); }
        }

        [XmlAttribute("ShippedDate")]
        [Bindable(true)]
        public DateTime ShippedDate
        {
            get { return GetColumnValue<DateTime>(Columns.ShippedDate); }
            set { SetColumnValue(Columns.ShippedDate, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string SaleAmount = @"SaleAmount";
            public static string OrderID = @"OrderID";
            public static string CompanyName = @"CompanyName";
            public static string ShippedDate = @"ShippedDate";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the SummaryofSalesbyQuarter class.
    /// </summary>

    [Serializable]
    public partial class SummaryofSalesbyQuarterCollection : ReadOnlyList<SummaryofSalesbyQuarter, SummaryofSalesbyQuarterCollection>
    {
        public SummaryofSalesbyQuarterCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Summary of Sales by Quarter view.
    /// </summary>
    [Serializable]
    public partial class SummaryofSalesbyQuarter : ReadOnlyRecord<SummaryofSalesbyQuarter>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Summary of Sales by Quarter", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnShippedDate = new TableSchema.TableColumn(schema);
                columnShippedDate.ColumnName = "ShippedDate";
                columnShippedDate.DataType = DbType.DateTime;
                columnShippedDate.MaxLength = 0;
                columnShippedDate.AutoIncrement = false;
                columnShippedDate.IsNullable = true;
                columnShippedDate.IsPrimaryKey = false;
                columnShippedDate.IsForeignKey = false;
                columnShippedDate.IsReadOnly = false;
                schema.Columns.Add(columnShippedDate);

                TableSchema.TableColumn columnOrderID = new TableSchema.TableColumn(schema);
                columnOrderID.ColumnName = "OrderID";
                columnOrderID.DataType = DbType.Int32;
                columnOrderID.MaxLength = 0;
                columnOrderID.AutoIncrement = false;
                columnOrderID.IsNullable = false;
                columnOrderID.IsPrimaryKey = false;
                columnOrderID.IsForeignKey = false;
                columnOrderID.IsReadOnly = false;
                schema.Columns.Add(columnOrderID);

                TableSchema.TableColumn columnSubtotal = new TableSchema.TableColumn(schema);
                columnSubtotal.ColumnName = "Subtotal";
                columnSubtotal.DataType = DbType.Currency;
                columnSubtotal.MaxLength = 0;
                columnSubtotal.AutoIncrement = false;
                columnSubtotal.IsNullable = true;
                columnSubtotal.IsPrimaryKey = false;
                columnSubtotal.IsForeignKey = false;
                columnSubtotal.IsReadOnly = false;
                schema.Columns.Add(columnSubtotal);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Summary of Sales by Quarter", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public SummaryofSalesbyQuarter()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public SummaryofSalesbyQuarter(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public SummaryofSalesbyQuarter(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public SummaryofSalesbyQuarter(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("ShippedDate")]
        [Bindable(true)]
        public DateTime ShippedDate
        {
            get { return GetColumnValue<DateTime>(Columns.ShippedDate); }
            set { SetColumnValue(Columns.ShippedDate, value); }
        }

        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public int OrderID
        {
            get { return GetColumnValue<int>(Columns.OrderID); }
            set { SetColumnValue(Columns.OrderID, value); }
        }

        [XmlAttribute("Subtotal")]
        [Bindable(true)]
        public decimal Subtotal
        {
            get { return GetColumnValue<decimal>(Columns.Subtotal); }
            set { SetColumnValue(Columns.Subtotal, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string ShippedDate = @"ShippedDate";
            public static string OrderID = @"OrderID";
            public static string Subtotal = @"Subtotal";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

    /// <summary>
    /// Strongly-typed collection for the SummaryofSalesbyYear class.
    /// </summary>

    [Serializable]
    public partial class SummaryofSalesbyYearCollection : ReadOnlyList<SummaryofSalesbyYear, SummaryofSalesbyYearCollection>
    {
        public SummaryofSalesbyYearCollection() {}
    }

    /// <summary>
    /// This is read-only wrapper class for the Summary of Sales by Year view.
    /// </summary>
    [Serializable]
    public partial class SummaryofSalesbyYear : ReadOnlyRecord<SummaryofSalesbyYear>, IReadOnlyRecord
    {

        #region ' Default Settings '

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region ' Schema Accessor '

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                {
                    SetSQLProps();
                }
                return BaseSchema;
            }
        }

        private static void GetTableSchema()
        {
            if(!IsSchemaInitialized)
            {
                //Schema declaration
                TableSchema.Table schema = new TableSchema.Table("Summary of Sales by Year", TableType.View, DataService.GetInstance("Northwind"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";

                //Columns
                TableSchema.TableColumn columnShippedDate = new TableSchema.TableColumn(schema);
                columnShippedDate.ColumnName = "ShippedDate";
                columnShippedDate.DataType = DbType.DateTime;
                columnShippedDate.MaxLength = 0;
                columnShippedDate.AutoIncrement = false;
                columnShippedDate.IsNullable = true;
                columnShippedDate.IsPrimaryKey = false;
                columnShippedDate.IsForeignKey = false;
                columnShippedDate.IsReadOnly = false;
                schema.Columns.Add(columnShippedDate);

                TableSchema.TableColumn columnOrderID = new TableSchema.TableColumn(schema);
                columnOrderID.ColumnName = "OrderID";
                columnOrderID.DataType = DbType.Int32;
                columnOrderID.MaxLength = 0;
                columnOrderID.AutoIncrement = false;
                columnOrderID.IsNullable = false;
                columnOrderID.IsPrimaryKey = false;
                columnOrderID.IsForeignKey = false;
                columnOrderID.IsReadOnly = false;
                schema.Columns.Add(columnOrderID);

                TableSchema.TableColumn columnSubtotal = new TableSchema.TableColumn(schema);
                columnSubtotal.ColumnName = "Subtotal";
                columnSubtotal.DataType = DbType.Currency;
                columnSubtotal.MaxLength = 0;
                columnSubtotal.AutoIncrement = false;
                columnSubtotal.IsNullable = true;
                columnSubtotal.IsPrimaryKey = false;
                columnSubtotal.IsForeignKey = false;
                columnSubtotal.IsReadOnly = false;
                schema.Columns.Add(columnSubtotal);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["Northwind"].AddSchema("Summary of Sales by Year", schema);
            }
        }

        #endregion
        
        #region ' Query Accessor '
        
	    public static Query CreateQuery()
	    {
		    return new Query(Schema);
	    }
	    
	    #endregion

	    #region ' .Ctors '
	    
	    public SummaryofSalesbyYear()
	    {
            SetSQLProps();
            SetDefaults();
            MarkNew();
        }

        public SummaryofSalesbyYear(bool useDatabaseDefaults)
	    {
		    SetSQLProps();
		    if(useDatabaseDefaults)
		    {
				ForceDefaults();
			}
			MarkNew();
	    }
	    
	    public SummaryofSalesbyYear(object keyID)
	    {
		    SetSQLProps();
		    LoadByKey(keyID);
	    }
    	 
	    public SummaryofSalesbyYear(string columnName, object columnValue)
        {
            SetSQLProps();
            LoadByParam(columnName,columnValue);
        }
        
	    #endregion

        #region ' Properties '

        [XmlAttribute("ShippedDate")]
        [Bindable(true)]
        public DateTime ShippedDate
        {
            get { return GetColumnValue<DateTime>(Columns.ShippedDate); }
            set { SetColumnValue(Columns.ShippedDate, value); }
        }

        [XmlAttribute("OrderID")]
        [Bindable(true)]
        public int OrderID
        {
            get { return GetColumnValue<int>(Columns.OrderID); }
            set { SetColumnValue(Columns.OrderID, value); }
        }

        [XmlAttribute("Subtotal")]
        [Bindable(true)]
        public decimal Subtotal
        {
            get { return GetColumnValue<decimal>(Columns.Subtotal); }
            set { SetColumnValue(Columns.Subtotal, value); }
        }

        #endregion

	    #region ' Columns Struct '
	    
	    public struct Columns
	    {
            public static string ShippedDate = @"ShippedDate";
            public static string OrderID = @"OrderID";
            public static string Subtotal = @"Subtotal";
        }

	    #endregion

	    #region ' IAbstractRecord Members '

        public new CT GetColumnValue<CT>(string columnName)
        {
            return base.GetColumnValue<CT>(columnName);
        }

        public object GetColumnValue(string columnName)
        {
            return base.GetColumnValue<object>(columnName);
        }

        #endregion

    }

}