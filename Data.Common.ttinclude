<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Reflection" #>
<#+
//
//  Data.Common.DbSchema - http://dbschema.codeplex.com
//
//  The contents of this file are subject to the New BSD
//  License (the "License"); you may not use this file
//  except in compliance with the License. You may obtain a copy of
//  the License at http://www.opensource.org/licenses/bsd-license.php
//
//  Software distributed under the License is distributed on an
//  "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
//  implied. See the License for the specific language governing
//  rights and limitations under the License.
//


	// Data.Common.DbTable

    public class DbTable
    {
        public DbTable() { }

        public DbTable(DataRow TableRow)
        {
            if (TableRow.Table.Columns.Contains("TABLE_CATALOG"))
                if (TableRow["TABLE_CATALOG"] != DBNull.Value)
                    this.TableCatalog = TableRow["TABLE_CATALOG"].ToString();
            if (TableRow.Table.Columns.Contains("TABLE_SCHEMA"))
                if (TableRow["TABLE_SCHEMA"] != DBNull.Value)
                    this.TableSchema = TableRow["TABLE_SCHEMA"].ToString();
            this.TableName = TableRow["TABLE_NAME"].ToString();
            this.TableType = TableRow["TABLE_TYPE"].ToString();

        }

        public string TableCatalog { get; set; }
        public string TableSchema { get; set; }
        public string TableName { get; set; }
        public string TableType { get; set; }

    }


	// Data.Common.DbColumn

    public class DbColumn
    {
        public DbColumn() { }

        public DbColumn(DataRow ColumnRow)
        {
            this.AllowDBNull = (bool)ColumnRow["AllowDBNull"];
            if (ColumnRow.Table.Columns.Contains("BaseCatalogName"))
                if (ColumnRow["BaseCatalogName"] != DBNull.Value)
                    this.BaseCatalogName = ColumnRow["BaseCatalogName"].ToString();
            this.BaseColumnName = ColumnRow["BaseColumnName"].ToString();
            if (ColumnRow["BaseSchemaName"] != DBNull.Value)
                this.BaseSchemaName = ColumnRow["BaseSchemaName"].ToString();
            this.BaseTableName = ColumnRow["BaseTableName"].ToString();
            this.ColumnName = ColumnRow["ColumnName"].ToString();
            this.ColumnOrdinal = (int)ColumnRow["ColumnOrdinal"];
            this.ColumnSize = (int)ColumnRow["ColumnSize"];
            this.DataType = ColumnRow["DataType"].ToString();
            if (ColumnRow.Table.Columns.Contains("IsAutoIncrement"))
                this.IsAutoIncrement = (bool)ColumnRow["IsAutoIncrement"];
            this.IsKey = (bool)ColumnRow["IsKey"];
            this.IsLong = (bool)ColumnRow["IsLong"];
            if (ColumnRow.Table.Columns.Contains("IsReadOnly"))
                this.IsReadOnly = (bool)ColumnRow["IsReadOnly"];
            if (ColumnRow.Table.Columns.Contains("IsRowVersion"))
                this.IsRowVersion = (bool)ColumnRow["IsRowVersion"];
            this.IsUnique = (bool)ColumnRow["IsUnique"];
            this.NumericPrecision = Convert.ToInt32(ColumnRow["NumericPrecision"]);
            this.NumericScale = Convert.ToInt32(ColumnRow["NumericScale"]);
            if (ColumnRow.Table.Columns.Contains("ProviderType"))
                this.ProviderType = ColumnRow["ProviderType"].ToString();
        }

        public bool AllowDBNull { get; set; }
        public string BaseCatalogName { get; set; }
        public string BaseColumnName { get; set; }
        public string BaseSchemaName { get; set; }
        public string BaseTableName { get; set; }
        public string ColumnName { get; set; }
        public int ColumnOrdinal { get; set; }
        public int ColumnSize { get; set; }
        public string DataType { get; set; }
        public bool IsAutoIncrement { get; set; }
        public bool IsKey { get; set; }
        public bool IsLong { get; set; }
        public bool IsReadOnly { get; set; }
        public bool IsRowVersion { get; set; }
        public bool IsUnique { get; set; }
        public int NumericPrecision { get; set; }
        public int NumericScale { get; set; }
        public string ProviderType { get; set; }

    }


	// Data.Common.DbRelation

    public class DbRelation
    {
        public DbRelation() { }

        public DbRelation(DataRow RelationRow)
        {
            if (RelationRow["PK_TABLE_CATALOG"] != DBNull.Value)
                this.PkTableCatalog = RelationRow["PK_TABLE_CATALOG"].ToString();
            if (RelationRow["PK_TABLE_SCHEMA"] != DBNull.Value)
                this.PkTableSchema = RelationRow["PK_TABLE_SCHEMA"].ToString();
            this.PkTableName = RelationRow["PK_TABLE_NAME"].ToString();
            this.PkColumnName = RelationRow["PK_COLUMN_NAME"].ToString();

            if (RelationRow["FK_TABLE_CATALOG"] != DBNull.Value)
                this.FkTableCatalog = RelationRow["FK_TABLE_CATALOG"].ToString();
            if (RelationRow["FK_TABLE_SCHEMA"] != DBNull.Value)
                this.FkTableSchema = RelationRow["FK_TABLE_SCHEMA"].ToString();
            this.FkTableName = RelationRow["FK_TABLE_NAME"].ToString();
            this.FkColumnName = RelationRow["FK_COLUMN_NAME"].ToString();

        }

        public string PkTableCatalog { get; set; }
        public string PkTableSchema { get; set; }
        public string PkTableName { get; set; }
        public string PkColumnName { get; set; }
        public string FkTableCatalog { get; set; }
        public string FkTableSchema { get; set; }
        public string FkTableName { get; set; }
        public string FkColumnName { get; set; }
    }


	// Data.Common.DbSchema

    public class DbSchema
    {
        private string _ConnectionName;
        private string _ConnectionString;
        private string _ProviderName;
        private DbSchemaProvider _Provider;
        private Dictionary<string, DataTable> Cache = new Dictionary<string, DataTable>();
        private ArrayList dictionaryTablesManyToMany = new ArrayList();
        private ArrayList dictionaryTablesOneToOne = new ArrayList();

        #region ' Properties '

        public string ConnectionName
        {
            get { return _ConnectionName; }
        }

        public string ConnectionString
        {
            get { return _ConnectionString; }
        }

        public string ProviderName
        {
            get { return _ProviderName; }
        }

        #endregion

        #region ' Constractors '

        public DbSchema() :
            this("LocalSqlServer")
        { }

        public DbSchema(string ConnectionName) :
            this(ConnectionName, System.Configuration.ConfigurationManager.ConnectionStrings[ConnectionName].ConnectionString, System.Configuration.ConfigurationManager.ConnectionStrings[ConnectionName].ProviderName)
        { }

        public DbSchema(string ConnectionString, string ProviderName) :
            this(null, ConnectionString, ProviderName)
        { }

        private DbSchema(string ConnectionName, string ConnectionString, string ProviderName)
        {
            if (!string.IsNullOrEmpty(ConnectionString))
                _ConnectionName = ConnectionName;

            _ConnectionString = ConnectionString;
            _ProviderName = ProviderName;
            _Provider = GetSchemaProvider(_ConnectionString, _ProviderName);
            DiscoverTableRelations();
        }

        #endregion

        #region ' Methods '

        #region ' Tables and Views '

        private DataTable GetSchemaTables()
        {
            string CacheKey = "SchemaTables";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable tbl = _Provider.GetSchemaTables();

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTables()
        {
            string CacheKey = "Tables";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable schemaTables = GetSchemaTables();
            DataTable tbl = new DataTable("Tables");
            if (schemaTables.Rows.Count > 0)
            {
                string WhereClause = "TABLE_TYPE = 'TABLE' OR TABLE_TYPE = 'BASE TABLE'";
                tbl = schemaTables.Clone();
                foreach (DataRow tblRow in schemaTables.Select(WhereClause))
                {
                    tbl.ImportRow(tblRow);
                }
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetViews()
        {
            string CacheKey = "Views";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable schemaTables = GetSchemaTables();
            DataTable tbl = new DataTable("Views");
            if (schemaTables.Rows.Count > 0)
            {
                string WhereClause = "TABLE_TYPE = 'VIEW'";
                tbl = schemaTables.Clone();
                foreach (DataRow tblRow in schemaTables.Select(WhereClause))
                {
                    tbl.ImportRow(tblRow);
                }
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTablesAndViews()
        {
            string CacheKey = "TablesAndViews";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable schemaTables = GetSchemaTables();
            DataTable tbl = new DataTable("TablesAndViews");
            if (schemaTables.Rows.Count > 0)
            {
                string WhereClause = "TABLE_TYPE = 'TABLE' OR TABLE_TYPE = 'BASE TABLE' OR TABLE_TYPE = 'VIEW'";
                tbl = schemaTables.Clone();
                foreach (DataRow tblRow in schemaTables.Select(WhereClause))
                {
                    tbl.ImportRow(tblRow);
                }
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTablesLogical()
        {
            string CacheKey = "LogicalTables";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DiscoverTableRelations();

            return GetTablesLogical();
        }

        public DataTable GetTablesManyToMany()
        {
            string CacheKey = "ManyToManyTables";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DiscoverTableRelations();

            return GetTablesManyToMany();
        }

        private void DiscoverTableRelations()
        {
            DataTable schemaTables = GetTables();
            DataTable tblManyToMany = new DataTable("ManyToManyTables");
            tblManyToMany = schemaTables.Clone();
            DataTable tblLogical = new DataTable("LogicalTables");
            tblLogical = schemaTables.Clone();

            dictionaryTablesManyToMany.Clear();
            foreach (DataRow tableRow in schemaTables.Rows)
            {
                string tableSchema = null;
                if (tableRow["TABLE_SCHEMA"] != DBNull.Value)
                    tableSchema = tableRow["TABLE_SCHEMA"].ToString();
                string tableName = tableRow["TABLE_NAME"].ToString();

                // Discover Many-to-Many relations
                int foreignKeyRelationsCount = GetTableRelationsByForeignKey(tableSchema, tableName).Rows.Count;
                int tableColumnsCount = GetTableColumns(tableSchema, tableName).Rows.Count;
                int primaryKeyColumnsCount = GetTablePrimaryKeyColumns(tableSchema, tableName).Rows.Count;

                if ((foreignKeyRelationsCount == tableColumnsCount) || (primaryKeyColumnsCount + foreignKeyRelationsCount == tableColumnsCount))
                {
                    dictionaryTablesManyToMany.Add(_Provider.QualifiedTableName(tableSchema, tableName));
                    tblManyToMany.ImportRow(tableRow);
                }
                else
                    tblLogical.ImportRow(tableRow);


            }

            Cache.Add("ManyToManyTables", tblManyToMany);
            Cache.Add("LogicalTables", tblLogical);
        }

        #endregion

        #region ' Columns and Primary Keys '

        public DataTable GetTableColumns(string tableSchema, string tableName)
        {
            string CacheKey = "Columns:" + _Provider.QualifiedTableName(tableSchema, tableName);
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable tbl = new DataTable();
            DataTable tableColumns = _Provider.GetTableColumns(tableSchema, tableName);
            if (tableColumns.Columns.Contains("IsHidden"))
            {
                if (tableColumns.Select("IsHidden = 1").Length > 0)
                {
                    tbl = tableColumns.Clone();
                    foreach (DataRow columnRow in tableColumns.Select("IsHidden = 0 OR IsHidden IS NULL"))
                    {
                        tbl.ImportRow(columnRow);
                    }
                }
                else
                    tbl = tableColumns;
            }
            else
                tbl = tableColumns;

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTablePrimaryKeyColumns(string tableSchema, string tableName)
        {
            DataTable TableColumns = GetTableColumns(tableSchema, tableName);
            string WhereClause = "IsKey = true";
            DataTable tbl = TableColumns.Clone();
            foreach (DataRow primaryKeyRow in TableColumns.Select(WhereClause))
                tbl.ImportRow(primaryKeyRow);

            return tbl;
        }

        public DataTable GetTableFields(string tableSchema, string tableName)
        {
            List<string> filteredcolumns = new List<string>();

            foreach (DataRow primarykey in GetTablePrimaryKeyColumns(tableSchema, tableName).Rows)
            {
                string columnname = "'" + primarykey["ColumnName"].ToString() + "'";
                if (!filteredcolumns.Contains(columnname))
                    filteredcolumns.Add(columnname);
            }

            foreach (DataRow pkRelationRow in GetTableRelationsByPrimaryKey(tableSchema, tableName).Rows)
            {
                string columnname = "'" + pkRelationRow["PK_COLUMN_NAME"].ToString() + "'";
                if (!filteredcolumns.Contains(columnname))
                    filteredcolumns.Add(columnname);
            }
            foreach (DataRow fkRelationRow in GetTableRelationsByForeignKey(tableSchema, tableName).Rows)
            {
                string columnname = "'" + fkRelationRow["FK_COLUMN_NAME"].ToString() + "'";
                if (!filteredcolumns.Contains(columnname))
                    filteredcolumns.Add(columnname);
            }

            string WhereClause = "ColumnName NOT IN ( " + string.Join(", ", filteredcolumns.ToArray()) + " )";
            DataTable TableColumns = GetTableColumns(tableSchema, tableName);
            DataTable tbl = TableColumns.Clone();
            foreach (DataRow columnRow in TableColumns.Select(WhereClause))
            {
                tbl.ImportRow(columnRow);
            }

            return tbl;
        }

        #endregion

        #region ' Relations '

        private DataTable GetSchemaConstraints()
        {
            string CacheKey = "Constraints";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable tbl = _Provider.GetConstraints();

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTableRelationsOneToMany(string tableSchema, string tableName)
        {
            string CacheKey = "OneToManyRelations:" + _Provider.QualifiedTableName(tableSchema, tableName);
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable otmRelations = GetTableRelationsByPrimaryKey(tableSchema, tableName);
            DataTable tbl = otmRelations.Clone();
            foreach (DataRow relationRow in otmRelations.Rows)
            {
                string fkTableSchema = null;
                if (relationRow["FK_TABLE_SCHEMA"] != DBNull.Value)
                    fkTableSchema = relationRow["FK_TABLE_SCHEMA"].ToString();
                string fkTableName = relationRow["FK_TABLE_NAME"].ToString();
                string fkColumnName = relationRow["FK_COLUMN_NAME"].ToString();

                DataTable fkTablePrimaryKeys = GetTablePrimaryKeyColumns(fkTableSchema, fkTableName);
                bool fkColumnIsPrimaryKey = false;
                foreach (DataRow primarykeyRow in fkTablePrimaryKeys.Rows)
                {
                    string pkColumnName = primarykeyRow["ColumnName"].ToString();
                    if (fkColumnName.ToLower() == pkColumnName.ToLower())
                    {
                        fkColumnIsPrimaryKey = true;
                        break;
                    }
                }

                string tableNameHash = _Provider.QualifiedTableName(fkTableSchema, fkTableName);
                if (!dictionaryTablesManyToMany.Contains(tableNameHash) && !fkColumnIsPrimaryKey)
                    tbl.ImportRow(relationRow);
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTableRelationsManyToOne(string tableSchema, string tableName)
        {
            string CacheKey = "ManyToOneRelations:" + _Provider.QualifiedTableName(tableSchema, tableName);
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable mtoRelations = GetTableRelationsByForeignKey(tableSchema, tableName);
            DataTable tbl = mtoRelations.Clone();
            foreach (DataRow relationRow in mtoRelations.Rows)
            {
                string pkTableSchema = null;
                if (relationRow["PK_TABLE_SCHEMA"] != DBNull.Value)
                    pkTableSchema = relationRow["PK_TABLE_SCHEMA"].ToString();
                string pkTableName = relationRow["PK_TABLE_NAME"].ToString();

                string tableNameHash = _Provider.QualifiedTableName(pkTableSchema, pkTableName);
                if (!dictionaryTablesManyToMany.Contains(tableNameHash))
                    tbl.ImportRow(relationRow);
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTableRelationsManyToMany(string tableSchema, string tableName)
        {
            string CacheKey = "ManyToManyRelations:" + _Provider.QualifiedTableName(tableSchema, tableName);
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable mtmRelations = GetTableRelationsByPrimaryKey(tableSchema, tableName);
            DataTable tbl = mtmRelations.Clone();
            foreach (DataRow relationRow in mtmRelations.Rows)
            {
                string fkTableSchema = null;
                string fkTableName = null;
                if (relationRow["FK_TABLE_SCHEMA"] != DBNull.Value)
                    fkTableSchema = relationRow["FK_TABLE_SCHEMA"].ToString();
                fkTableName = relationRow["FK_TABLE_NAME"].ToString();

                string tableNameHash = _Provider.QualifiedTableName(fkTableSchema, fkTableName);
                if (dictionaryTablesManyToMany.Contains(tableNameHash))
                    tbl.ImportRow(relationRow);
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTableRelationsOneToOne(string tableSchema, string tableName)
        {
            string CacheKey = "OneToOneRelations:" + _Provider.QualifiedTableName(tableSchema, tableName);
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable pkRelations = GetTableRelationsByPrimaryKey(tableSchema, tableName);
            DataTable tbl = pkRelations.Clone();
            foreach (DataRow relationRow in pkRelations.Rows)
            {
                string fkTableSchema = null;
                if (relationRow["FK_TABLE_SCHEMA"] != DBNull.Value)
                    fkTableSchema = relationRow["FK_TABLE_SCHEMA"].ToString();
                string fkTableName = relationRow["FK_TABLE_NAME"].ToString();
                string fkColumnName = relationRow["FK_COLUMN_NAME"].ToString();

                DataTable fkTablePrimaryKeys = GetTablePrimaryKeyColumns(fkTableSchema, fkTableName);
                bool fkColumnIsPrimaryKey = false;
                foreach (DataRow primarykeyRow in fkTablePrimaryKeys.Rows)
                {
                    string pkColumnName = primarykeyRow["ColumnName"].ToString();
                    if (fkColumnName.ToLower() == pkColumnName.ToLower())
                    {
                        fkColumnIsPrimaryKey = true;
                        break;
                    }
                }

                string tableNameHash = _Provider.QualifiedTableName(fkTableSchema, fkTableName);
                if (!dictionaryTablesManyToMany.Contains(tableNameHash) && fkColumnIsPrimaryKey)
                    tbl.ImportRow(relationRow);
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTableRelationsByPrimaryKey(string tableSchema, string tableName)
        {
            string CacheKey = "PrimaryKeyRelations:" + _Provider.QualifiedTableName(tableSchema, tableName);
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            string WhereClause;
            if (!string.IsNullOrEmpty(tableSchema))
                WhereClause = string.Format("PK_TABLE_SCHEMA = '{0}' AND PK_TABLE_NAME = '{1}'", tableSchema, tableName);
            else
                WhereClause = string.Format("PK_TABLE_NAME = '{0}'", tableName);

            DataTable relations = GetSchemaConstraints();
            DataRow[] pkRelations = (DataRow[])relations.Select(WhereClause);
            DataTable tbl = relations.Clone();
            foreach (DataRow relationRow in pkRelations)
            {
                tbl.ImportRow(relationRow);
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetTableRelationsByForeignKey(string tableSchema, string tableName)
        {
            string CacheKey = "ForeignKeyRelations:" + _Provider.QualifiedTableName(tableSchema, tableName);
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            string WhereClause;
            if (!string.IsNullOrEmpty(tableSchema))
                WhereClause = string.Format("FK_TABLE_SCHEMA = '{0}' AND FK_TABLE_NAME = '{1}'", tableSchema, tableName);
            else
                WhereClause = string.Format("FK_TABLE_NAME = '{0}'", tableName);

            DataTable relations = GetSchemaConstraints();
            DataRow[] fkRelations = (DataRow[])relations.Select(WhereClause);
            DataTable tbl = relations.Clone();
            foreach (DataRow relationRow in fkRelations)
            {
                tbl.ImportRow(relationRow);
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        #endregion

        #region ' Store Procedures '

        public DataTable GetProcedures()
        {
            string CacheKey = "Procedures";
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable tblProcedures = _Provider.GetProcedures();
            DataTable tbl = new DataTable("Procedures");
            tbl = tblProcedures.Clone();
            if (tblProcedures.Rows.Count > 0)
            {
                string WhereClause = "ROUTINE_TYPE = 'PROCEDURE'";
                foreach (DataRow tblRow in tblProcedures.Select(WhereClause))
                {
                    tbl.ImportRow(tblRow);
                }
            }

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        public DataTable GetProcedureParameters(string procedureSchema, string procedureName)
        {
            string CacheKey = "ProcedureParameters:" + (string.IsNullOrEmpty(procedureSchema) ? procedureName : procedureSchema + "." + procedureName);
            if (Cache.Keys.Contains(CacheKey))
                return Cache[CacheKey];

            DataTable tbl = _Provider.GetProcedureParameters(procedureSchema, procedureName);

            Cache.Add(CacheKey, tbl);
            return tbl;
        }

        #endregion

        #endregion

        #region ' Helpers '
        private DbSchemaProvider GetSchemaProvider(string connectionString, string providerName)
        {
            DbSchemaProvider dbProvider;
            switch (providerName.ToLower())
            {

                case "system.data.sqlclient":
                    dbProvider = new SqlServerSchemaProvider(connectionString, providerName);
                    break;


                default:
                    throw new NotImplementedException("The provider '" + providerName + "' is not implemented!");
            }
            return dbProvider;
        }
        public string GetPropertyType(string SystemType)
        {
            return this.GetPropertyType(SystemType, false);
        }
        public string GetPropertyType(string SystemType, bool IsNullable)
        {
            return _Provider.GetPropertyType(SystemType, IsNullable);
        }
        public DbType GetDbColumnType(string providerDbType)
        {
            return _Provider.GetDbColumnType(providerDbType);
        }
        public string QualifiedTableName(string tableSchema, string tableName)
        {
            return _Provider.QualifiedTableName(tableSchema, tableName);
        }
        public string GetDatabaseName()
        {
            return _Provider.GetDatabaseName();
        }
        #endregion

    }


	// Data.Common.IDbSchemaProvider

    interface IDbSchemaProvider
    {
        string GetDatabaseName();
        DataTable GetSchemaTables();
        DataTable GetTableColumns(string tableSchema, string tableName);
        DataTable GetConstraints();
        DataTable GetProcedures();
        DataTable GetProcedureParameters(string procedureSchema, string procedureName);
        DbType GetDbColumnType(string providerDbType);
        string GetPropertyType(string SystemType);
        string GetPropertyType(string SystemType, bool IsNullable);
        string QualifiedTableName(string tableSchema, string tableName);
    }


	// Data.Common.DbSchemaProvider

    abstract public class DbSchemaProvider : IDbSchemaProvider
    {
        private string _ConnectionString;
        private string _ProviderName;

        protected string ProviderName
        {
            get { return _ProviderName; }
        }

        public DbSchemaProvider(string connectionstring, string providername)
        {
            _ConnectionString = connectionstring;
            _ProviderName = providername;
        }

        #region ' IDbProvider Members '

        virtual public string GetDatabaseName()
        {
            string DatabaseName = string.Empty;
            using (DbConnection _Connection = GetDBConnection())
            {
                DatabaseName = _Connection.Database;
            }
            return DatabaseName;
        }

        virtual public DataTable GetSchemaTables()
        {
            DataTable tbl = new DataTable("SchemaTables");
            using (DbConnection _Connection = GetDBConnection())
            {
                tbl = _Connection.GetSchema("Tables");
            }

            return tbl;
        }

        virtual public DataTable GetTableColumns(string tableSchema, string tableName)
        {
            DataTable tbl = new DataTable();

            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = string.Format("SELECT * FROM {0}", QualifiedTableName(tableSchema, tableName));
                _Command.CommandType = CommandType.Text;

                System.Console.WriteLine("SQL: " + _Command.CommandText);
                tbl = _Command.ExecuteReader(CommandBehavior.KeyInfo).GetSchemaTable();
            }

            return tbl;
        }

        abstract public DataTable GetConstraints();

        virtual public string QualifiedTableName(string tableSchema, string tableName)
        {
            if (!string.IsNullOrEmpty(tableSchema))
                return string.Format("[{0}].[{1}]", tableSchema, tableName);
            else
                return string.Format("[{0}]", tableName);
        }

        virtual public DataTable GetProcedures()
        {
            DataTable tbl = new DataTable("Procedures");
            using (DbConnection _Connection = GetDBConnection())
            {
                tbl = _Connection.GetSchema("Procedures");
            }

            return tbl;
        }

        virtual public DataTable GetProcedureParameters(string procedureSchema, string procedureName)
        {
            #region ' Decapated Code '
            //DataTable tbl = new DataTable("ProcedureParameters");
            //using (DbConnection _Connection = GetDBConnection())
            //{
            //    string[] restrictions = new string[4] { null, procedureSchema, procedureName, null };
            //    tbl = _Connection.GetSchema("ProcedureParameters", restrictions);
            //}
            //return tbl;
            #endregion

            DataTable tbl = GetDTSchemaProcedureParameters();
            using (DbConnection _Connection = GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = this.QualifiedTableName(procedureSchema, procedureName);
                _Command.CommandType = CommandType.StoredProcedure;

                DbParameter par = _Command.CreateParameter();

                DbProviderFactory pf = DbProviderFactories.GetFactory(this.ProviderName);
                DbCommandBuilder cb = pf.CreateCommandBuilder();
                MethodInfo theMethod = cb.GetType().GetMethod("DeriveParameters");
                theMethod.Invoke(cb, new object[] { _Command });

                int counter = 1;
                foreach (DbParameter p in _Command.Parameters)
                {
                    if (p.ParameterName != "@RETURN_VALUE")
                    {
                        DataRow parameterRow = tbl.NewRow();
                        if (!string.IsNullOrEmpty(procedureSchema))
                            parameterRow["SPECIFIC_SCHEMA"] = procedureSchema;
                        parameterRow["SPECIFIC_NAME"] = procedureName;
                        parameterRow["PARAMETER_NAME"] = p.ParameterName;
                        parameterRow["ORDINAL_POSITION"] = counter;
                        parameterRow["PARAMETER_MODE"] = p.Direction;
                        parameterRow["IS_RESULT"] = p.Direction == ParameterDirection.ReturnValue;
                        parameterRow["DATA_TYPE"] = p.DbType;
                        parameterRow["CHARACTER_MAXIMUM_LENGTH"] = p.Size;

                        tbl.Rows.Add(parameterRow);
                        counter++;
                    }
                }
            }

            return tbl;
        }

        virtual public string GetPropertyType(string SystemType)
        {
            return GetPropertyType(SystemType, false);
        }

        virtual public string GetPropertyType(string SystemType, bool IsNullable)
        {
            string classType = string.Empty;
            string[] systemType = SystemType.Split('.');
            switch (systemType[1])
            {
                case "String":
                    classType = "string";
                    break;

                case "SByte":
                case "Boolean":
                    classType = IsNullable ? "bool?" : "bool";
                    break;

                case "Byte":
                    classType = IsNullable ? "byte?" : "byte";
                    break;

                case "Int16":
                    classType = IsNullable ? "short?" : "short";
                    break;

                case "Int32":
                    classType = IsNullable ? "int?" : "int";
                    break;

                case "Int64":
                    classType = IsNullable ? "long?" : "long";
                    break;

                case "Decimal":
                    classType = IsNullable ? "decimal?" : "decimal";
                    break;

                case "Double":
                    classType = IsNullable ? "double?" : "double";
                    break;

                case "Single":
                    classType = (IsNullable ? "float?" : "float");
                    break;

                case "DateTime":
                    classType = (IsNullable ? "DateTime?" : "DateTime");
                    break;

                case "Guid":
                case "Type":
                    classType = systemType[1];
                    break;

                case "Byte[]":
                    classType = "byte[]";
                    break;

                default:
                    //throw new NotImplementedException("Not implemented type :" + SystemType);
                    classType = SystemType;
                    break;
            }

            return classType;
        }

        abstract public DbType GetDbColumnType(string providerDbType);

        #endregion

        #region ' Helper functions '

        internal DbConnection GetDBConnection()
        {
            DbProviderFactory providerFactory = DbProviderFactories.GetFactory(_ProviderName);
            DbConnection _Connection = providerFactory.CreateConnection();
            _Connection.ConnectionString = _ConnectionString;
            _Connection.Open();
            return _Connection;
        }

        protected DataTable GetDTSchemaTables()
        {
            DataTable tbl = new DataTable("SchemaTables");
            tbl.Columns.Add("TABLE_CATALOG", typeof(System.String));
            tbl.Columns.Add("TABLE_SCHEMA", typeof(System.String));
            tbl.Columns.Add("TABLE_NAME", typeof(System.String));
            tbl.Columns.Add("TABLE_TYPE", typeof(System.String));
            tbl.Columns.Add("TABLE_GUID", typeof(System.Guid));
            tbl.Columns.Add("DESCRIPTION", typeof(System.String));
            tbl.Columns.Add("TABLE_PROPID", typeof(System.Int32));
            tbl.Columns.Add("DATE_CREATED", typeof(System.DateTime));
            tbl.Columns.Add("DATE_MODIFIED", typeof(System.DateTime));

            return tbl;
        }

        protected DataTable GetDTSchemaConstrains()
        {
            DataTable tbl = new DataTable("Constraints");
            tbl.Columns.Add("PK_TABLE_CATALOG", typeof(System.String));
            tbl.Columns.Add("PK_TABLE_SCHEMA", typeof(System.String));
            tbl.Columns.Add("PK_TABLE_NAME", typeof(System.String));
            tbl.Columns.Add("PK_COLUMN_NAME", typeof(System.String));
            tbl.Columns.Add("PK_ORDINAL_POSITION", typeof(System.String));
            tbl.Columns.Add("PK_NAME", typeof(System.String));
            tbl.Columns.Add("FK_TABLE_CATALOG", typeof(System.String));
            tbl.Columns.Add("FK_TABLE_SCHEMA", typeof(System.String));
            tbl.Columns.Add("FK_TABLE_NAME", typeof(System.String));
            tbl.Columns.Add("FK_COLUMN_NAME", typeof(System.String));
            tbl.Columns.Add("FK_ORDINAL_POSITION", typeof(System.Int32));
            tbl.Columns.Add("FK_NAME", typeof(System.String));

            return tbl;
        }

        protected DataTable GetDTSchemaProcedures()
        {
            DataTable tbl = new DataTable("Procedures");
            tbl.Columns.Add(new DataColumn("SPECIFIC_CATALOG", typeof(string)));
            tbl.Columns.Add(new DataColumn("SPECIFIC_SCHEMA", typeof(string)));
            tbl.Columns.Add(new DataColumn("SPECIFIC_NAME", typeof(string)));
            tbl.Columns.Add(new DataColumn("ROUTINE_CATALOG", typeof(string)));
            tbl.Columns.Add(new DataColumn("ROUTINE_SCHEMA", typeof(string)));
            tbl.Columns.Add(new DataColumn("ROUTINE_NAME", typeof(string)));
            tbl.Columns.Add(new DataColumn("ROUTINE_TYPE", typeof(string))); 
            tbl.Columns.Add(new DataColumn("CREATED", typeof(DateTime)));
            tbl.Columns.Add(new DataColumn("LAST_ALTERED", typeof(DateTime)));

            return tbl;
        }

        protected DataTable GetDTSchemaProcedureParameters()
        {
            DataTable tbl = new DataTable("ProcedureParameters");
            tbl.Columns.Add("SPECIFIC_CATALOG", typeof(System.String));
            tbl.Columns.Add("SPECIFIC_SCHEMA", typeof(System.String));
            tbl.Columns.Add("SPECIFIC_NAME", typeof(System.String));
            tbl.Columns.Add("PARAMETER_NAME", typeof(System.String));
            tbl.Columns.Add("ORDINAL_POSITION", typeof(System.Int32));
            tbl.Columns.Add("PARAMETER_MODE", typeof(ParameterDirection));
            tbl.Columns.Add("IS_RESULT", typeof(System.Boolean));
            tbl.Columns.Add("DATA_TYPE", typeof(System.Data.DbType));
            tbl.Columns.Add("CHARACTER_MAXIMUM_LENGTH", typeof(System.Int32));
            tbl.Columns.Add("NUMERIC_PRECISION", typeof(System.Int16));
            tbl.Columns.Add("NUMERIC_SCALE", typeof(System.Int32));
            tbl.Columns.Add("DATETIME_PRECISION", typeof(System.Int16));

            return tbl;
        }

        #endregion

    }


	// system.data.sqlclient

    class SqlServerSchemaProvider : DbSchemaProvider
    {
        public SqlServerSchemaProvider(string connectionstring, string providername) : base(connectionstring, providername) { }

        #region ' IDbProvider Members '

        public override DataTable GetConstraints()
        {
            DataTable tbl = new DataTable("Constraints");
            using (DbConnection _Connection = this.GetDBConnection())
            {
                DbCommand _Command = _Connection.CreateCommand();
                _Command.CommandText = sqlConstraints;
                _Command.CommandType = CommandType.Text;
                tbl.Load(_Command.ExecuteReader());
            }

            return tbl;
        }

        public override DbType GetDbColumnType(string providerDbType)
        {
            switch (providerDbType)
            {
                case "0":   // SqlDbType.BigInt
                    return DbType.Int64;

                case "1":   // SqlDbType.Binary
                case "7":   // SqlDbType.Image
                case "19":  // SqlDbType.Timestamp
                case "21":  // SqlDbType.VarBinary
                    return DbType.Binary;

                case "2":   // SqlDbType.Bit
                    return DbType.Boolean;

                case "3":   // SqlDbType.Char
                    return DbType.AnsiStringFixedLength;

                case "4":   // SqlDbType.DateTime
                case "15":  // SqlDbType.SmallDateTime
                    return DbType.DateTime;

                case "5":   // SqlDbType.Decimal
                    return DbType.Decimal;

                case "6":   // SqlDbType.Float
                    return DbType.Double;

                case "8":   // SqlDbType.Int
                    return DbType.Int32;

                case "9":   // SqlDbType.Money
                case "17":  // SqlDbType.SmallMoney
                    return DbType.Currency;

                case "10":  // SqlDbType.NChar
                    return DbType.StringFixedLength;

                case "11":  // SqlDbType.NText
                case "12":  // SqlDbType.NVarChar 
                    return DbType.String;

                case "13":  // SqlDbType.Real:
                    return DbType.Single;

                case "14":  // SqlDbType.UniqueIdentifier:
                    return DbType.Guid;

                case "16":  // SqlDbType.SmallInt:
                    return DbType.Int16;

                case "18":  // SqlDbType.Text:
                case "22":  // SqlDbType.VarChar:
                    return DbType.AnsiString;

                case "20":  // SqlDbType.TinyInt:
                    return DbType.Byte;

                default:
                    return DbType.AnsiString;
            }

        }

        #endregion

        #region ' SQL code: database constrains '
        //
        // SQL Server: find database constrains
        //
        const string sqlConstraints =
            "SELECT" +
            "	KCUUC.TABLE_CATALOG AS PK_TABLE_CATALOG," +
            "	KCUUC.TABLE_SCHEMA AS PK_TABLE_SCHEMA," +
            "	KCUUC.TABLE_NAME AS PK_TABLE_NAME," +
            "	KCUUC.COLUMN_NAME AS PK_COLUMN_NAME," +
            "	KCUUC.ORDINAL_POSITION AS PK_ORDINAL_POSITION," +
            "	KCUUC.CONSTRAINT_NAME AS PK_NAME, " +
            "	KCUC.TABLE_CATALOG AS FK_TABLE_CATALOG," +
            "	KCUC.TABLE_SCHEMA AS FK_TABLE_SCHEMA," +
            "	KCUC.TABLE_NAME AS FK_TABLE_NAME," +
            "	KCUC.COLUMN_NAME AS FK_COLUMN_NAME," +
            "	KCUC.ORDINAL_POSITION AS FK_ORDINAL_POSITION," +
            "	KCUC.CONSTRAINT_NAME AS FK_NAME " +
            "FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC " +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUC" +
            "	ON (RC.CONSTRAINT_CATALOG = KCUC.CONSTRAINT_CATALOG" +
            "		AND RC.CONSTRAINT_SCHEMA = KCUC.CONSTRAINT_SCHEMA" +
            "		AND RC.CONSTRAINT_NAME = KCUC.CONSTRAINT_NAME)" +
            "JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCUUC" +
            "	ON (RC.UNIQUE_CONSTRAINT_CATALOG = KCUUC.CONSTRAINT_CATALOG" +
            "		AND RC.UNIQUE_CONSTRAINT_SCHEMA = KCUUC.CONSTRAINT_SCHEMA" +
            "		AND RC.UNIQUE_CONSTRAINT_NAME = KCUUC.CONSTRAINT_NAME)";

        #endregion

    }
#>
